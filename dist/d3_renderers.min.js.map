{"version":3,"sources":["d3_renderers.coffee","d3_renderers.min.js"],"names":["callWithJQuery","pivotModule","exports","module","require","define","amd","jQuery","d3","$","pivotUtilities","d3_renderers","Treemap","pivotData","opts","addToTree","color","defaults","height","i","len","ref","result","rowKey","tree","treemap","value","width","localeStrings","window","extend","css","name","children","path","child","newChild","x","length","shift","push","getRowKeys","getAggregator","scale","category10","layout","size","sticky","d","select","append","style","datum","selectAll","data","padding","nodes","enter","attr","text","call","this","y","Math","max","dx","dy"],"mappings":"CAAA,WAAA,GAAAA,IAAAA,EAAiB,SAACC,GACd,MAAqB,gBAAXC,UAAyC,gBAAVC,QACrCF,EAAYG,QAAQ,UAAWA,QAAQ,OAClB,kBAAVC,SAAyBA,OAAOC,IAC3CD,QAAQ,SAAU,MAAOJ,GAGzBA,EAAYM,OAAQC,MAEb,SAACC,EAAGD,GCKf,MDHAC,GAAEC,eAAeC,cAAeC,QAAS,SAACC,EAAWC,GACjD,GAAAC,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,CAyBA,KAzBAV,GACIW,iBACApB,IACImB,MAAO,WCMT,MDNYlB,GAAEoB,QAAQF,QAAU,KAC9BT,OAAQ,WCQV,MDRaT,GAAEoB,QAAQX,SAAW,OAExCJ,EAAOL,EAAEqB,QAAO,KAAUb,EAAUH,GAGpCQ,EAASb,EAAE,SAASsB,KAAIJ,MAAO,OAAQT,OAAQ,SAE/CM,GAAOQ,KAAM,MAAOC,aACpBlB,EAAY,SAACS,EAAMU,EAAMR,GACrB,GAAAS,GAAAhB,EAAAC,EAAAgB,EAAAf,EAAAgB,CAAA,IAAkB,IAAfH,EAAKI,OAEJ,YADAd,EAAKE,MAAQA,EAIjB,KCamB,MAAjBF,EAAKS,WDfPT,EAAKS,aACLI,EAAIH,EAAKK,QACTlB,EAAAG,EAAAS,SAAAd,EAAA,EAAAC,EAAAC,EAAAiB,OAAAnB,EAAAC,EAAAD,ICoBA,GADAgB,EAAQd,EAAIF,GDnBoBgB,EAAMH,OAAQK,EAE1C,WADAtB,GAAUoB,EAAOD,EAAMR,EC6B7B,OD3BEU,IAAWJ,KAAMK,GACjBtB,EAAUqB,EAAUF,EAAMR,GAC1BF,EAAKS,SAASO,KAAKJ,IAEvBf,EAAAR,EAAA4B,aAAAtB,EAAA,EAAAC,EAAAC,EAAAiB,OAAAnB,EAAAC,EAAAD,IC2BEI,EAASF,EAAIF,GD1BXO,EAAQb,EAAU6B,cAAcnB,MAAYG,QACzC,MAAAA,GACCX,EAAUS,EAAMD,EAAQG,EA6BhC,OA3BAV,GAAQR,EAAGmC,MAAMC,aACjBjB,EAAQb,EAAKN,GAAGmB,QAChBT,EAASJ,EAAKN,GAAGU,SAEjBO,EAAUjB,EAAGqC,OAAOpB,UACfqB,MAAMnB,EAAOT,IACb6B,QAAO,GACPrB,MAAO,SAACsB,GCyBX,MDzBiBA,GAAEF,OAErBtC,EAAGyC,OAAO3B,EAAO,IACZ4B,OAAO,OACHC,MAAM,WAAY,YAClBA,MAAM,QAASxB,EAAQ,MACvBwB,MAAM,SAAUjC,EAAS,MAC7BkC,MAAM5B,GAAM6B,UAAU,SAClBC,KAAK7B,EAAQ8B,SAAS,GAAG,EAAE,EAAE,IAAI7B,MAAO,SAACsB,GCoBhD,MDpBsDA,GAAEtB,QAAQ8B,OAC7DC,QAAQP,OAAO,OACfQ,KAAK,QAAS,QACdP,MAAM,aAAc,SAACH,GAAM,MAAG,OAAAA,EAAAf,SAAiB,YAAiBjB,EAAMgC,EAAEhB,QACxE2B,KAAM,SAACX,GCwBV,MDxBgBA,GAAEhB,OACf4B,KAAK,WACEC,KAAKV,MAAM,OAAS,SAACH,GCyB7B,MDzBmCA,GAAEX,EAAE,OAC1Bc,MAAM,MAAS,SAACH,GC0B7B,MD1BmCA,GAAEc,EAAE,OAC1BX,MAAM,QAAS,SAACH,GC2B7B,MD3BmCe,MAAKC,IAAI,EAAGhB,EAAEiB,GAAK,GAAG,OAC5Cd,MAAM,SAAS,SAACH,GC4B7B,MD5BmCe,MAAKC,IAAI,EAAGhB,EAAEkB,GAAK,GAAG,SAGtD5C,QCiCZsC,KAAKC","file":"d3_renderers.min.js","sourcesContent":["callWithJQuery = (pivotModule) ->\n    if typeof exports is \"object\" and typeof module is \"object\" # CommonJS\n        pivotModule require(\"jquery\"), require(\"d3\")\n    else if typeof define is \"function\" and define.amd # AMD\n        define [\"jquery\", \"d3\"], pivotModule\n    # Plain browser env\n    else\n        pivotModule jQuery, d3\n\ncallWithJQuery ($, d3) ->\n\n    $.pivotUtilities.d3_renderers = Treemap: (pivotData, opts) ->\n        defaults =\n            localeStrings: {}\n            d3:\n                width: -> $(window).width() / 1.4\n                height: -> $(window).height() / 1.4\n\n        opts = $.extend(true, {}, defaults, opts)\n\n\n        result = $(\"<div>\").css(width: \"100%\", height: \"100%\")\n\n        tree = name: \"All\", children: []\n        addToTree = (tree, path, value) ->\n            if path.length == 0\n                tree.value = value\n                return\n            tree.children ?= []\n            x = path.shift()\n            for child in tree.children when child.name == x\n                addToTree(child, path, value)\n                return\n            newChild = name: x\n            addToTree(newChild, path, value)\n            tree.children.push newChild\n\n        for rowKey in pivotData.getRowKeys()\n            value = pivotData.getAggregator(rowKey, []).value()\n            if value?\n                addToTree(tree, rowKey, value)\n\n        color = d3.scale.category10()\n        width = opts.d3.width()\n        height = opts.d3.height()\n\n        treemap = d3.layout.treemap()\n            .size([width, height])\n            .sticky(true)\n            .value( (d) -> d.size )\n\n        d3.select(result[0])\n            .append(\"div\")\n                .style(\"position\", \"relative\")\n                .style(\"width\", width + \"px\")\n                .style(\"height\", height + \"px\")\n            .datum(tree).selectAll(\".node\")\n                .data(treemap.padding([15,0,0,0]).value( (d) -> d.value ).nodes)\n            .enter().append(\"div\")\n            .attr(\"class\", \"node\")\n            .style(\"background\", (d) -> if d.children? then \"lightgrey\" else color(d.name) )\n            .text( (d) -> d.name )\n            .call ->\n                    this.style(\"left\",  (d) -> d.x+\"px\" )\n                        .style(\"top\",   (d) -> d.y+\"px\" )\n                        .style(\"width\", (d) -> Math.max(0, d.dx - 1)+\"px\" )\n                        .style(\"height\",(d) -> Math.max(0, d.dy - 1)+\"px\" )\n                    return\n\n        return result\n\n\n\n","(function() {\n  var callWithJQuery;\n\n  callWithJQuery = function(pivotModule) {\n    if (typeof exports === \"object\" && typeof module === \"object\") {\n      return pivotModule(require(\"jquery\"), require(\"d3\"));\n    } else if (typeof define === \"function\" && define.amd) {\n      return define([\"jquery\", \"d3\"], pivotModule);\n    } else {\n      return pivotModule(jQuery, d3);\n    }\n  };\n\n  callWithJQuery(function($, d3) {\n    return $.pivotUtilities.d3_renderers = {\n      Treemap: function(pivotData, opts) {\n        var addToTree, color, defaults, height, i, len, ref, result, rowKey, tree, treemap, value, width;\n        defaults = {\n          localeStrings: {},\n          d3: {\n            width: function() {\n              return $(window).width() / 1.4;\n            },\n            height: function() {\n              return $(window).height() / 1.4;\n            }\n          }\n        };\n        opts = $.extend(true, {}, defaults, opts);\n        result = $(\"<div>\").css({\n          width: \"100%\",\n          height: \"100%\"\n        });\n        tree = {\n          name: \"All\",\n          children: []\n        };\n        addToTree = function(tree, path, value) {\n          var child, i, len, newChild, ref, x;\n          if (path.length === 0) {\n            tree.value = value;\n            return;\n          }\n          if (tree.children == null) {\n            tree.children = [];\n          }\n          x = path.shift();\n          ref = tree.children;\n          for (i = 0, len = ref.length; i < len; i++) {\n            child = ref[i];\n            if (!(child.name === x)) {\n              continue;\n            }\n            addToTree(child, path, value);\n            return;\n          }\n          newChild = {\n            name: x\n          };\n          addToTree(newChild, path, value);\n          return tree.children.push(newChild);\n        };\n        ref = pivotData.getRowKeys();\n        for (i = 0, len = ref.length; i < len; i++) {\n          rowKey = ref[i];\n          value = pivotData.getAggregator(rowKey, []).value();\n          if (value != null) {\n            addToTree(tree, rowKey, value);\n          }\n        }\n        color = d3.scale.category10();\n        width = opts.d3.width();\n        height = opts.d3.height();\n        treemap = d3.layout.treemap().size([width, height]).sticky(true).value(function(d) {\n          return d.size;\n        });\n        d3.select(result[0]).append(\"div\").style(\"position\", \"relative\").style(\"width\", width + \"px\").style(\"height\", height + \"px\").datum(tree).selectAll(\".node\").data(treemap.padding([15, 0, 0, 0]).value(function(d) {\n          return d.value;\n        }).nodes).enter().append(\"div\").attr(\"class\", \"node\").style(\"background\", function(d) {\n          if (d.children != null) {\n            return \"lightgrey\";\n          } else {\n            return color(d.name);\n          }\n        }).text(function(d) {\n          return d.name;\n        }).call(function() {\n          this.style(\"left\", function(d) {\n            return d.x + \"px\";\n          }).style(\"top\", function(d) {\n            return d.y + \"px\";\n          }).style(\"width\", function(d) {\n            return Math.max(0, d.dx - 1) + \"px\";\n          }).style(\"height\", function(d) {\n            return Math.max(0, d.dy - 1) + \"px\";\n          });\n        });\n        return result;\n      }\n    };\n  });\n\n}).call(this);\n\n//# sourceMappingURL=d3_renderers.js.map\n"]}