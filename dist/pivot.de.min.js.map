{"version":3,"sources":["pivot.de.coffee","pivot.de.min.js"],"names":["callWithJQuery","pivotModule","exports","module","require","define","amd","jQuery","$","frFmt","frFmtInt","frFmtPct","nf","tpl","pivotUtilities","numberFormat","aggregatorTemplates","thousandsSep","decimalSep","digitsAfterDecimal","scaler","suffix","locales","de","localeStrings","renderError","computeError","uiRenderError","selectAll","selectNone","tooMany","filterResults","totals","vs","by","aggregators","Anzahl","count","Anzahl eindeutiger Werte","countUnique","Liste eindeutiger Werte","listUnique","Summe","sum","Ganzzahlige Summe","Durchschnitt","average","Minimum","min","Maximum","max","Summe über Summe","sumOverSum","80% Obergrenze","sumOverSumBound80","80% Untergrenze","Summe als Anteil von Gesamt","fractionOf","Summe als Anteil von Zeile","Summe als Anteil von Spalte","Anzahl als Anteil von Gesamt","Anzahl als Anteil von Zeile","Anzahl als Anteil von Spalte","renderers","Tabelle","Tabelle mit Balkendiagramm","Heatmap","Heatmap pro Zeile","Heatmap pro Spalte","call","this"],"mappings":"CAAA,WAAA,GAAAA,IAAAA,EAAiB,SAACC,GACd,MAAqB,gBAAXC,UAAyC,gBAAVC,QACrCF,EAAYG,QAAQ,WACC,kBAAVC,SAAyBA,OAAOC,IAC3CD,QAAQ,UAAWJ,GAGnBA,EAAYM,UAEL,SAACC,GACZ,GAAAC,GAAAC,EAAAC,EAAAC,EAAAC,CCuBA,ODvBAD,GAAKJ,EAAEM,eAAeC,aACtBF,EAAML,EAAEM,eAAeE,oBAEvBP,EAAWG,GAAGK,aAAc,IAAKC,WAAY,MAC7CR,EAAWE,GAAGO,mBAAoB,EAAGF,aAAc,IAAKC,WAAY,MACpEP,EAAWC,GAAGO,mBAAoB,EAAGC,OAAQ,IAAKC,OAAQ,IAAKJ,aAAc,IAAKC,WAAY,MAE9FV,EAAEM,eAAeQ,QAAQC,IACrBC,eACIC,YAAa,oEACbC,aAAc,mEACdC,cAAe,+EACfC,UAAW,kBACXC,WAAY,mBACZC,QAAS,uBACTC,cAAe,qBACfC,OAAQ,SACRC,GAAI,QACJC,GAAI,OAERC,aACIC,OAAgCvB,EAAIwB,MAAM3B,GAC1C4B,2BAAgCzB,EAAI0B,YAAY7B,GAChD8B,0BAAgC3B,EAAI4B,WAAW,MAC/CC,MAAgC7B,EAAI8B,IAAIlC,GACxCmC,oBAAuB/B,EAAI8B,IAAIjC,GAC/BmC,aAAgChC,EAAIiC,QAAQrC,GAC5CsC,QAAgClC,EAAImC,IAAIvC,GACxCwC,QAAgCpC,EAAIqC,IAAIzC,GACxC0C,mBAAgCtC,EAAIuC,WAAW3C,GAC/C4C,iBAAgCxC,EAAIyC,mBAAkB,EAAM7C,GAC5D8C,kBAA4B1C,EAAIyC,mBAAkB,EAAO7C,GACzD+C,8BAAgC3C,EAAI4C,WAAW5C,EAAI8B,MAAS,QAAShC,GACrE+C,6BAAgC7C,EAAI4C,WAAW5C,EAAI8B,MAAS,MAAShC,GACrEgD,8BAAgC9C,EAAI4C,WAAW5C,EAAI8B,MAAS,MAAShC,GACrEiD,+BAAgC/C,EAAI4C,WAAW5C,EAAIwB,QAAS,QAAS1B,GACrEkD,8BAAgChD,EAAI4C,WAAW5C,EAAIwB,QAAS,MAAS1B,GACrEmD,+BAAgCjD,EAAI4C,WAAW5C,EAAIwB,QAAS,MAAS1B,IAEzEoD,WACIC,QAAgCxD,EAAEM,eAAeiD,UAAU,MAC3DE,6BAAgCzD,EAAEM,eAAeiD,UAAU,kBAC3DG,QAAgC1D,EAAEM,eAAeiD,UAAU,QAC3DI,oBAAgC3D,EAAEM,eAAeiD,UAAU,eAC3DK,qBAAgC5D,EAAEM,eAAeiD,UAAU,qBCqBpEM,KAAKC","file":"pivot.de.min.js","sourcesContent":["callWithJQuery = (pivotModule) ->\n    if typeof exports is \"object\" and typeof module is \"object\" # CommonJS\n        pivotModule require(\"jquery\")\n    else if typeof define is \"function\" and define.amd # AMD\n        define [\"jquery\"], pivotModule\n    # Plain browser env\n    else\n        pivotModule jQuery\n        \ncallWithJQuery ($) ->\n    nf = $.pivotUtilities.numberFormat\n    tpl = $.pivotUtilities.aggregatorTemplates\n\n    frFmt =    nf(thousandsSep: \" \", decimalSep: \",\")\n    frFmtInt = nf(digitsAfterDecimal: 0, thousandsSep: \" \", decimalSep: \",\")\n    frFmtPct = nf(digitsAfterDecimal: 1, scaler: 100, suffix: \"%\", thousandsSep: \" \", decimalSep: \",\")\n\n    $.pivotUtilities.locales.de = \n        localeStrings:\n            renderError: \"Bei der Darstellung der Pivot-Tabelle ist ein Fehler aufgetreten.\"\n            computeError: \"Bei der Berechnung der Pivot-Tabelle ist ein Fehler aufgetreten.\"\n            uiRenderError: \"Bei der Darstellung Oberfläche der Pivot-Tabelle ist ein Fehler aufgetreten.\"\n            selectAll: \"Alles auswählen\"\n            selectNone: \"Nichts auswählen\"\n            tooMany: \"(zu viele für Liste)\"\n            filterResults: \"Ergebnisse filtern\"\n            totals: \"Gesamt\"\n            vs: \"gegen\"\n            by: \"pro\"\n\n        aggregators: \n            \"Anzahl\":                       tpl.count(frFmtInt)\n            \"Anzahl eindeutiger Werte\":     tpl.countUnique(frFmtInt)\n            \"Liste eindeutiger Werte\":      tpl.listUnique(\", \")\n            \"Summe\":                        tpl.sum(frFmt)\n            \"Ganzzahlige Summe\":\t\t\ttpl.sum(frFmtInt)\n            \"Durchschnitt\":                 tpl.average(frFmt)\n            \"Minimum\":                      tpl.min(frFmt)\n            \"Maximum\":                      tpl.max(frFmt)\n            \"Summe über Summe\":             tpl.sumOverSum(frFmt)\n            \"80% Obergrenze\":               tpl.sumOverSumBound80(true, frFmt)\n            \"80% Untergrenze\":        \t\ttpl.sumOverSumBound80(false, frFmt)\n            \"Summe als Anteil von Gesamt\":  tpl.fractionOf(tpl.sum(),   \"total\", frFmtPct)\n            \"Summe als Anteil von Zeile\":   tpl.fractionOf(tpl.sum(),   \"row\",   frFmtPct)\n            \"Summe als Anteil von Spalte\":  tpl.fractionOf(tpl.sum(),   \"col\",   frFmtPct)\n            \"Anzahl als Anteil von Gesamt\": tpl.fractionOf(tpl.count(), \"total\", frFmtPct)\n            \"Anzahl als Anteil von Zeile\":  tpl.fractionOf(tpl.count(), \"row\",   frFmtPct)\n            \"Anzahl als Anteil von Spalte\": tpl.fractionOf(tpl.count(), \"col\",   frFmtPct)\n\n        renderers:\n            \"Tabelle\":                      $.pivotUtilities.renderers[\"Table\"]\n            \"Tabelle mit Balkendiagramm\":   $.pivotUtilities.renderers[\"Table Barchart\"]\n            \"Heatmap\":                      $.pivotUtilities.renderers[\"Heatmap\"]\n            \"Heatmap pro Zeile\":            $.pivotUtilities.renderers[\"Row Heatmap\"]\n            \"Heatmap pro Spalte\":           $.pivotUtilities.renderers[\"Col Heatmap\"]\n","(function() {\n  var callWithJQuery;\n\n  callWithJQuery = function(pivotModule) {\n    if (typeof exports === \"object\" && typeof module === \"object\") {\n      return pivotModule(require(\"jquery\"));\n    } else if (typeof define === \"function\" && define.amd) {\n      return define([\"jquery\"], pivotModule);\n    } else {\n      return pivotModule(jQuery);\n    }\n  };\n\n  callWithJQuery(function($) {\n    var frFmt, frFmtInt, frFmtPct, nf, tpl;\n    nf = $.pivotUtilities.numberFormat;\n    tpl = $.pivotUtilities.aggregatorTemplates;\n    frFmt = nf({\n      thousandsSep: \" \",\n      decimalSep: \",\"\n    });\n    frFmtInt = nf({\n      digitsAfterDecimal: 0,\n      thousandsSep: \" \",\n      decimalSep: \",\"\n    });\n    frFmtPct = nf({\n      digitsAfterDecimal: 1,\n      scaler: 100,\n      suffix: \"%\",\n      thousandsSep: \" \",\n      decimalSep: \",\"\n    });\n    return $.pivotUtilities.locales.de = {\n      localeStrings: {\n        renderError: \"Bei der Darstellung der Pivot-Tabelle ist ein Fehler aufgetreten.\",\n        computeError: \"Bei der Berechnung der Pivot-Tabelle ist ein Fehler aufgetreten.\",\n        uiRenderError: \"Bei der Darstellung Oberfläche der Pivot-Tabelle ist ein Fehler aufgetreten.\",\n        selectAll: \"Alles auswählen\",\n        selectNone: \"Nichts auswählen\",\n        tooMany: \"(zu viele für Liste)\",\n        filterResults: \"Ergebnisse filtern\",\n        totals: \"Gesamt\",\n        vs: \"gegen\",\n        by: \"pro\"\n      },\n      aggregators: {\n        \"Anzahl\": tpl.count(frFmtInt),\n        \"Anzahl eindeutiger Werte\": tpl.countUnique(frFmtInt),\n        \"Liste eindeutiger Werte\": tpl.listUnique(\", \"),\n        \"Summe\": tpl.sum(frFmt),\n        \"Ganzzahlige Summe\": tpl.sum(frFmtInt),\n        \"Durchschnitt\": tpl.average(frFmt),\n        \"Minimum\": tpl.min(frFmt),\n        \"Maximum\": tpl.max(frFmt),\n        \"Summe über Summe\": tpl.sumOverSum(frFmt),\n        \"80% Obergrenze\": tpl.sumOverSumBound80(true, frFmt),\n        \"80% Untergrenze\": tpl.sumOverSumBound80(false, frFmt),\n        \"Summe als Anteil von Gesamt\": tpl.fractionOf(tpl.sum(), \"total\", frFmtPct),\n        \"Summe als Anteil von Zeile\": tpl.fractionOf(tpl.sum(), \"row\", frFmtPct),\n        \"Summe als Anteil von Spalte\": tpl.fractionOf(tpl.sum(), \"col\", frFmtPct),\n        \"Anzahl als Anteil von Gesamt\": tpl.fractionOf(tpl.count(), \"total\", frFmtPct),\n        \"Anzahl als Anteil von Zeile\": tpl.fractionOf(tpl.count(), \"row\", frFmtPct),\n        \"Anzahl als Anteil von Spalte\": tpl.fractionOf(tpl.count(), \"col\", frFmtPct)\n      },\n      renderers: {\n        \"Tabelle\": $.pivotUtilities.renderers[\"Table\"],\n        \"Tabelle mit Balkendiagramm\": $.pivotUtilities.renderers[\"Table Barchart\"],\n        \"Heatmap\": $.pivotUtilities.renderers[\"Heatmap\"],\n        \"Heatmap pro Zeile\": $.pivotUtilities.renderers[\"Row Heatmap\"],\n        \"Heatmap pro Spalte\": $.pivotUtilities.renderers[\"Col Heatmap\"]\n      }\n    };\n  });\n\n}).call(this);\n\n//# sourceMappingURL=pivot.de.js.map\n"]}