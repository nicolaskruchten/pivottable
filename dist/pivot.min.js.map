{"version":3,"sources":["pivot.coffee","pivot.min.js"],"names":["callWithJQuery","indexOf","item","i","l","this","length","slice","bind","fn","me","apply","arguments","hasProp","hasOwnProperty","pivotModule","exports","module","require","define","amd","jQuery","$","PivotData","addSeparators","aggregatorTemplates","aggregators","dayNamesEn","derivers","getSort","locales","mthNamesEn","naturalSort","numberFormat","pivotTableRenderer","rd","renderers","rx","rz","sortAs","usFmt","usFmtInt","usFmtPct","zeroPad","nStr","thousandsSep","decimalSep","rgx","x","x1","x2","split","test","replace","opts","defaults","digitsAfterDecimal","scaler","prefix","suffix","extend","result","isNaN","isFinite","toFixed","count","formatter","data","rowKey","colKey","push","value","format","uniques","arg","attr","uniq","record","ref","call","numInputs","canUseCascadeDropdown","sum","parseFloat","extremes","mode","val","sorter","sorters","ref1","ref2","Math","quantile","q","vals","sort","a","b","floor","ceil","runningStat","ddof","n","m","s","m_new","sqrt","sumOverSum","denom","num","sumNum","sumDenom","sumOverSumBound80","upper","sign","fractionOf","wrapped","type","selector","total","row","col","inner","getAggregator","countUnique","f","listUnique","join","max","min","first","last","median","average","stdev","tpl","Count","Count Unique Values","List Unique Values","Sum","Integer Sum","Average","Median","Sample Variance","Sample Standard Deviation","Minimum","Maximum","First","Last","Sum over Sum","80% Upper Bound","80% Lower Bound","Sum as Fraction of Total","Sum as Fraction of Rows","Sum as Fraction of Columns","Count as Fraction of Total","Count as Fraction of Rows","Count as Fraction of Columns","Table","Table Barchart","barchart","Heatmap","heatmap","Row Heatmap","Col Heatmap","en","localeStrings","renderError","computeError","uiRenderError","selectAll","selectNone","tooMany","filterResults","cancel","totals","vs","by","selectView","selectFirstLevelDropdown","selectSecondLevelDropdown","number","substr","bin","binWidth","dateFormat","formatString","utcOutput","mthNames","dayNames","utc","date","Date","parse","p","_this","as","bs","a1","b1","nas","nbs","String","match","shift","order","l_mapping","mapping","toLowerCase","isFunction","input","ref3","ref4","ref5","ref6","ref7","ref8","ref9","getRowKeys","getColKeys","sortKeys","arrSort","aggregator","aggregatorName","colAttrs","cols","rowAttrs","rows","valAttrs","rowOrder","colOrder","derivedAttributes","filter","tree","rowKeys","colKeys","rowTotals","colTotals","allTotal","sorted","forEachRecord","processRecord","addRecord","compactRecord","j","k","len1","results","results1","tblCols","isEmptyObject","v","isArray","each","text","Error","prototype","forEachMatchingRecord","criteria","callback","attrs","sortersArr","comparison","r","c","flatColKey","flatRowKey","len2","fromCharCode","agg","pivotUtilities","pivotData","getClickHandler","spanSize","tbody","td","th","thead","totalAggregator","tr","txt","table","clickCallback","rowValues","colValues","filters","e","document","createElement","className","arr","len","noDraw","stop","parseInt","setAttribute","appendChild","textContent","innerHTML","onclick","pivot","inputOpts","locale","localeDefaults","dataClass","renderer","rendererOptions","error","console","stack","html","hasChildNodes","removeChild","lastChild","append","pivotUI","overwrite","attrLength","attrValues","buildFirstLevelDropdown","colOrderArrow","defaultOptionVal","existingOpts","fn1","initialRender","len3","materializedInput","needResetSecondLevelDropdownOptions","o","ordering","pivotTable","recordsProcessed","refresh","refreshDelayed","rendererControl","resetSecondLevelDropdownOptions","rowOrderArrow","shownAttributes","shownInAggregators","shownInDragDrop","tr1","tr2","uiTable","unused","unusedAttrsVerticalAutoCutoff","unusedAttrsVerticalAutoOverride","viewName","viewer","hiddenAttributes","hiddenFromAggregators","hiddenFromDragDrop","menuLimit","exclusions","inclusions","unusedAttrsVertical","autoSortUnusedAttrs","onRefresh","showUI","cascadeDropdownFirstLevelVals","cascadeDropdownMapping","views","currentView","pvtAttrFirstLevelDropdownName","firstLevelVal","newFirstLevelDropdown","addClass","appendTo","currentDropdown","currentDropdownVal","secondLevelDropdownVals","nextElementSibling","base","class","copyCurrentPvOptions","currentPvOptions","JSON","stringify","attrElem","checkContainer","closeFilterBox","controls","filterItem","filterItemExcluded","finalButtons","hasExcludedItem","placeholder","triangleLink","valueCount","valueList","values","hide","accept","accept_gen","trim","accepted","real_filter","substring","find","parent","show","prop","toggleClass","removeClass","left","top","currentTarget","position","css","key_a_to_z","rowSymbol","colSymbol","next","value_a_to_z","value_z_to_a","role","prepend","inArray","rendererName","cascadeDropdownFirstLevelIndex","len4","newDropdown","numInputsToProcess","pivotUIOptions","pvtAttrBreakName","pvtAttrDropdowns","pvtVals","pvtViewer","subopts","t","u","unusedAttrsContainer","index","breakDom","cascadeDropdownFirstLevelVal","firstLevelDropdown","isAllSecondLevelDropdownOptionsResetted","previousElementSibling","hasClass","remove","before","after","trigger","not","excludedItems","ref10","inclusionsInfo","children","setTimeout","sortable","update","ui","sender","connectWith","items","scope","colorScaleGenerator","heatmapper","numCols","numRows","nonRed","round","colorScale","forEachCell","elem","barcharter","range","bBase","bgColor","wrapper","height","bottom","right","background-color","padding-left","padding-right","padding","padding-top","text-align"],"mappings":"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","file":"pivot.min.js","sourcesContent":["callWithJQuery = (pivotModule) ->\n    if typeof exports is \"object\" and typeof module is \"object\" # CommonJS\n        pivotModule require(\"jquery\")\n    else if typeof define is \"function\" and define.amd # AMD\n        define [\"jquery\"], pivotModule\n    # Plain browser env\n    else\n        pivotModule jQuery\n\ncallWithJQuery ($) ->\n\n    ###\n    Utilities\n    ###\n\n    addSeparators = (nStr, thousandsSep, decimalSep) ->\n        nStr += ''\n        x = nStr.split('.')\n        x1 = x[0]\n        x2 = if x.length > 1 then  decimalSep + x[1] else ''\n        rgx = /(\\d+)(\\d{3})/\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2') while rgx.test(x1)\n        return x1 + x2\n\n    numberFormat = (opts) ->\n        defaults =\n            digitsAfterDecimal: 2, scaler: 1,\n            thousandsSep: \",\", decimalSep: \".\"\n            prefix: \"\", suffix: \"\"\n        opts = $.extend({}, defaults, opts)\n        (x) ->\n            return \"\" if isNaN(x) or not isFinite(x)\n            result = addSeparators (opts.scaler*x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep\n            return \"\"+opts.prefix+result+opts.suffix\n\n    #aggregator templates default to US number formatting but this is overrideable\n    usFmt = numberFormat()\n    usFmtInt = numberFormat(digitsAfterDecimal: 0)\n    usFmtPct = numberFormat(digitsAfterDecimal:1, scaler: 100, suffix: \"%\")\n\n    aggregatorTemplates =\n        count: (formatter=usFmtInt) -> () -> (data, rowKey, colKey) ->\n            count: 0\n            push:  -> @count++\n            value: -> @count\n            format: formatter\n\n        uniques: (fn, formatter=usFmtInt) -> ([attr]) -> (data, rowKey, colKey) ->\n            uniq: []\n            push: (record) -> @uniq.push(record[attr]) if record[attr] not in @uniq\n            value: -> fn(@uniq)\n            format: formatter\n            numInputs: if attr? then 0 else 1\n            canUseCascadeDropdown: true\n\n        sum: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            sum: 0\n            push: (record) -> @sum += parseFloat(record[attr]) if not isNaN parseFloat(record[attr])\n            value: -> @sum\n            format: formatter\n            numInputs: if attr? then 0 else 1\n            canUseCascadeDropdown: true\n\n        extremes: (mode, formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            val: null\n            sorter: getSort(data?.sorters, attr)\n            push: (record) ->\n                x = record[attr]\n                if mode in [\"min\", \"max\"]\n                    x = parseFloat(x)\n                    if not isNaN x then @val = Math[mode](x, @val ? x)\n                if mode == \"first\" then @val = x if @sorter(x, @val ? x) <= 0\n                if mode == \"last\"  then @val = x if @sorter(x, @val ? x) >= 0\n            value: -> @val\n            format: (x) -> if isNaN(x) then x else formatter(x)\n            numInputs: if attr? then 0 else 1\n            canUseCascadeDropdown: true\n\n        quantile: (q, formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            vals: []\n            push: (record) ->\n                x = parseFloat(record[attr])\n                @vals.push(x) if not isNaN(x)\n            value: ->\n                return null if @vals.length == 0\n                @vals.sort((a,b) -> a-b)\n                i = (@vals.length-1)*q\n                return (@vals[Math.floor(i)] + @vals[Math.ceil(i)])/2.0\n            format: formatter\n            numInputs: if attr? then 0 else 1\n            canUseCascadeDropdown: true\n\n        runningStat: (mode=\"mean\", ddof=1, formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            n: 0.0, m: 0.0, s: 0.0\n            push: (record) ->\n                x = parseFloat(record[attr])\n                return if isNaN(x)\n                @n += 1.0\n                if @n == 1.0\n                    @m = x\n                else\n                    m_new = @m + (x - @m)/@n\n                    @s = @s + (x - @m)*(x - m_new)\n                    @m = m_new\n            value: ->\n                if mode == \"mean\"\n                    return if @n == 0 then 0/0 else @m\n                return 0 if @n <= ddof\n                switch mode\n                    when \"var\"   then @s/(@n-ddof)\n                    when \"stdev\" then Math.sqrt(@s/(@n-ddof))\n            format: formatter\n            numInputs: if attr? then 0 else 1\n            canUseCascadeDropdown: true\n\n        sumOverSum: (formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\n            sumNum: 0\n            sumDenom: 0\n            push: (record) ->\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\n            value: -> @sumNum/@sumDenom\n            format: formatter\n            numInputs: if num? and denom? then 0 else 2\n            canUseCascadeDropdown: true\n\n        sumOverSumBound80: (upper=true, formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\n            sumNum: 0\n            sumDenom: 0\n            push: (record) ->\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\n            value: ->\n                sign = if upper then 1 else -1\n                (0.821187207574908/@sumDenom + @sumNum/@sumDenom + 1.2815515655446004*sign*\n                    Math.sqrt(0.410593603787454/ (@sumDenom*@sumDenom) + (@sumNum*(1 - @sumNum/ @sumDenom))/ (@sumDenom*@sumDenom)))/\n                    (1 + 1.642374415149816/@sumDenom)\n            format: formatter\n            numInputs: if num? and denom? then 0 else 2\n\n        fractionOf: (wrapped, type=\"total\", formatter=usFmtPct) -> (x...) -> (data, rowKey, colKey) ->\n            selector: {total:[[],[]],row:[rowKey,[]],col:[[],colKey]}[type]\n            inner: wrapped(x...)(data, rowKey, colKey)\n            push: (record) -> @inner.push record\n            format: formatter\n            value: -> @inner.value() / data.getAggregator(@selector...).inner.value()\n            numInputs: wrapped(x...)().numInputs\n\n    aggregatorTemplates.countUnique = (f) -> aggregatorTemplates.uniques(((x) -> x.length), f)\n    aggregatorTemplates.listUnique =  (s) -> aggregatorTemplates.uniques(((x) -> x.sort(naturalSort).join(s)), ((x)->x))\n    aggregatorTemplates.max =         (f) -> aggregatorTemplates.extremes('max', f)\n    aggregatorTemplates.min =         (f) -> aggregatorTemplates.extremes('min', f)\n    aggregatorTemplates.first =       (f) -> aggregatorTemplates.extremes('first', f)\n    aggregatorTemplates.last =        (f) -> aggregatorTemplates.extremes('last', f)\n    aggregatorTemplates.median =      (f) -> aggregatorTemplates.quantile(0.5, f)\n    aggregatorTemplates.average =     (f) -> aggregatorTemplates.runningStat(\"mean\", 1, f)\n    aggregatorTemplates.var =         (ddof, f) -> aggregatorTemplates.runningStat(\"var\", ddof, f)\n    aggregatorTemplates.stdev =       (ddof, f) -> aggregatorTemplates.runningStat(\"stdev\", ddof, f)\n\n    #default aggregators & renderers use US naming and number formatting\n    aggregators = do (tpl = aggregatorTemplates) ->\n        \"Count\":                tpl.count(usFmtInt)\n        \"Count Unique Values\":  tpl.countUnique(usFmtInt)\n        \"List Unique Values\":   tpl.listUnique(\", \")\n        \"Sum\":                  tpl.sum(usFmt)\n        \"Integer Sum\":          tpl.sum(usFmtInt)\n        \"Average\":              tpl.average(usFmt)\n        \"Median\":               tpl.median(usFmt)\n        \"Sample Variance\":      tpl.var(1, usFmt)\n        \"Sample Standard Deviation\": tpl.stdev(1, usFmt)\n        \"Minimum\":              tpl.min(usFmt)\n        \"Maximum\":              tpl.max(usFmt)\n        \"First\":                tpl.first(usFmt)\n        \"Last\":                 tpl.last(usFmt)\n        \"Sum over Sum\":         tpl.sumOverSum(usFmt)\n        \"80% Upper Bound\":      tpl.sumOverSumBound80(true, usFmt)\n        \"80% Lower Bound\":      tpl.sumOverSumBound80(false, usFmt)\n        \"Sum as Fraction of Total\":     tpl.fractionOf(tpl.sum(),   \"total\", usFmtPct)\n        \"Sum as Fraction of Rows\":      tpl.fractionOf(tpl.sum(),   \"row\",   usFmtPct)\n        \"Sum as Fraction of Columns\":   tpl.fractionOf(tpl.sum(),   \"col\",   usFmtPct)\n        \"Count as Fraction of Total\":   tpl.fractionOf(tpl.count(), \"total\", usFmtPct)\n        \"Count as Fraction of Rows\":    tpl.fractionOf(tpl.count(), \"row\",   usFmtPct)\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\",   usFmtPct)\n\n    renderers =\n        \"Table\":          (data, opts) ->   pivotTableRenderer(data, opts)\n        \"Table Barchart\": (data, opts) -> $(pivotTableRenderer(data, opts)).barchart()\n        \"Heatmap\":        (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"heatmap\",    opts)\n        \"Row Heatmap\":    (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"rowheatmap\", opts)\n        \"Col Heatmap\":    (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"colheatmap\", opts)\n\n    locales =\n        en:\n            aggregators: aggregators\n            renderers: renderers\n            localeStrings:\n                renderError: \"An error occurred rendering the PivotTable results.\"\n                computeError: \"An error occurred computing the PivotTable results.\"\n                uiRenderError: \"An error occurred rendering the PivotTable UI.\"\n                selectAll: \"Select All\"\n                selectNone: \"Select None\"\n                tooMany: \"(too many to list)\"\n                filterResults: \"Filter values\"\n                apply: \"Apply\"\n                cancel: \"Cancel\"\n                totals: \"Totals\" #for table renderer\n                vs: \"vs\" #for gchart renderer\n                by: \"by\" #for gchart renderer\n                selectView: \"Select View\"\n                selectFirstLevelDropdown: \"Select Category\"\n                selectSecondLevelDropdown: \"Select Field\"\n\n    #dateFormat deriver l10n requires month and day names to be passed in directly\n    mthNamesEn = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]\n    dayNamesEn = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"]\n    zeroPad = (number) -> (\"0\"+number).substr(-2,2)\n\n    derivers =\n        bin: (col, binWidth) -> (record) -> record[col] - record[col] % binWidth\n        dateFormat: (col, formatString, utcOutput=false, mthNames=mthNamesEn, dayNames=dayNamesEn) ->\n            utc = if utcOutput then \"UTC\" else \"\"\n            (record) -> #thanks http://stackoverflow.com/a/12213072/112871\n                date = new Date(Date.parse(record[col]))\n                if isNaN(date) then return \"\"\n                formatString.replace /%(.)/g, (m, p) ->\n                    switch p\n                        when \"y\" then date[\"get#{utc}FullYear\"]()\n                        when \"m\" then zeroPad(date[\"get#{utc}Month\"]()+1)\n                        when \"n\" then mthNames[date[\"get#{utc}Month\"]()]\n                        when \"d\" then zeroPad(date[\"get#{utc}Date\"]())\n                        when \"w\" then dayNames[date[\"get#{utc}Day\"]()]\n                        when \"x\" then date[\"get#{utc}Day\"]()\n                        when \"H\" then zeroPad(date[\"get#{utc}Hours\"]())\n                        when \"M\" then zeroPad(date[\"get#{utc}Minutes\"]())\n                        when \"S\" then zeroPad(date[\"get#{utc}Seconds\"]())\n                        else \"%\" + p\n\n    rx = /(\\d+)|(\\D+)/g\n    rd = /\\d/\n    rz = /^0/\n    naturalSort = (as, bs) =>\n        #nulls first\n        return -1 if bs? and not as?\n        return  1 if as? and not bs?\n\n        #then raw NaNs\n        return -1 if typeof as == \"number\" and isNaN(as)\n        return  1 if typeof bs == \"number\" and isNaN(bs)\n\n        #numbers and numbery strings group together\n        nas = +as\n        nbs = +bs\n        return -1 if nas < nbs\n        return  1 if nas > nbs\n\n        #within that, true numbers before numbery strings\n        return -1 if typeof as == \"number\" and typeof bs != \"number\"\n        return  1 if typeof bs == \"number\" and typeof as != \"number\"\n        return  0 if typeof as == \"number\" and typeof bs == \"number\"\n\n        # 'Infinity' is a textual number, so less than 'A'\n        return -1 if isNaN(nbs) and not isNaN(nas)\n        return  1 if isNaN(nas) and not isNaN(nbs)\n\n        #finally, \"smart\" string sorting per http://stackoverflow.com/a/4373421/112871\n        a = String(as)\n        b = String(bs)\n        return 0 if a == b\n        return (if a > b then 1 else -1) unless rd.test(a) and rd.test(b)\n\n        #special treatment for strings containing digits\n        a = a.match(rx) #create digits vs non-digit chunks and iterate through\n        b = b.match(rx)\n        while a.length and b.length\n            a1 = a.shift()\n            b1 = b.shift()\n            if a1 != b1\n                if rd.test(a1) and rd.test(b1) #both are digit chunks\n                    return a1.replace(rz, \".0\") - b1.replace(rz, \".0\")\n                else\n                    return (if a1 > b1 then 1 else -1)\n        return a.length - b.length\n\n    sortAs = (order) ->\n        mapping = {}\n        l_mapping = {} # sort lowercased keys similarly\n        for i, x of order\n            mapping[x] = i\n            l_mapping[x.toLowerCase()] = i if typeof x == \"string\"\n        (a, b) ->\n            if mapping[a]? and mapping[b]? then mapping[a] - mapping[b]\n            else if mapping[a]? then -1\n            else if mapping[b]? then 1\n            else if l_mapping[a]? and l_mapping[b]? then l_mapping[a] - l_mapping[b]\n            else if l_mapping[a]? then -1\n            else if l_mapping[b]? then 1\n            else naturalSort(a,b)\n\n    getSort = (sorters, attr) ->\n        if sorters?\n            if $.isFunction(sorters)\n                sort = sorters(attr)\n                return sort if $.isFunction(sort)\n            else if sorters[attr]?\n                return sorters[attr]\n        return naturalSort\n\n    ###\n    Data Model class\n    ###\n\n    class PivotData\n        constructor: (input, opts = {}) ->\n            @input = input\n            @aggregator = opts.aggregator ? aggregatorTemplates.count()()\n            @aggregatorName = opts.aggregatorName ? \"Count\"\n            @colAttrs = opts.cols ? []\n            @rowAttrs = opts.rows ? []\n            @valAttrs = opts.vals ? []\n            @sorters = opts.sorters ? {}\n            @rowOrder = opts.rowOrder ? \"key_a_to_z\"\n            @colOrder = opts.colOrder ? \"key_a_to_z\"\n            @derivedAttributes = opts.derivedAttributes ? {}\n            @filter = opts.filter ? (-> true)\n            @tree = {}\n            @rowKeys = []\n            @colKeys = []\n            @rowTotals = {}\n            @colTotals = {}\n            @allTotal = @aggregator(this, [], [])\n            @sorted = false\n\n            # iterate through input, accumulating data for cells\n            PivotData.forEachRecord @input, @derivedAttributes, (record) =>\n                @processRecord(record) if @filter(record)\n\n        #can handle arrays or jQuery selections of tables\n        @forEachRecord = (input, derivedAttributes, f) ->\n            if $.isEmptyObject derivedAttributes\n                addRecord = f\n            else\n                addRecord = (record) ->\n                    record[k] = v(record) ? record[k] for k, v of derivedAttributes\n                    f(record)\n\n            #if it's a function, have it call us back\n            if $.isFunction(input)\n                input(addRecord)\n            else if $.isArray(input)\n                if $.isArray(input[0]) #array of arrays\n                    for own i, compactRecord of input when i > 0\n                        record = {}\n                        record[k] = compactRecord[j] for own j, k of input[0]\n                        addRecord(record)\n                else #array of objects\n                    addRecord(record) for record in input\n            else if input instanceof $\n                tblCols = []\n                $(\"thead > tr > th\", input).each (i) -> tblCols.push $(this).text()\n                $(\"tbody > tr\", input).each (i) ->\n                    record = {}\n                    $(\"td\", this).each (j) -> record[tblCols[j]] = $(this).text()\n                    addRecord(record)\n            else\n                throw new Error(\"unknown input format\")\n\n        forEachMatchingRecord: (criteria, callback) ->\n            PivotData.forEachRecord @input, @derivedAttributes, (record) =>\n                return if not @filter(record)\n                for k, v of criteria\n                    return if v != (record[k] ? \"null\")\n                callback(record)\n\n        arrSort: (attrs) =>\n            sortersArr = (getSort(@sorters, a) for a in attrs)\n            (a,b) ->\n                for own i, sorter of sortersArr\n                    comparison = sorter(a[i], b[i])\n                    return comparison if comparison != 0\n                return 0\n\n        sortKeys: () =>\n            if not @sorted\n                @sorted = true\n                v = (r,c) => @getAggregator(r,c).value()\n                switch @rowOrder\n                    when \"value_a_to_z\"  then @rowKeys.sort (a,b) =>  naturalSort v(a,[]), v(b,[])\n                    when \"value_z_to_a\" then @rowKeys.sort (a,b) => -naturalSort v(a,[]), v(b,[])\n                    else             @rowKeys.sort @arrSort(@rowAttrs)\n                switch @colOrder\n                    when \"value_a_to_z\"  then @colKeys.sort (a,b) =>  naturalSort v([],a), v([],b)\n                    when \"value_z_to_a\" then @colKeys.sort (a,b) => -naturalSort v([],a), v([],b)\n                    else             @colKeys.sort @arrSort(@colAttrs)\n\n        getColKeys: () =>\n            @sortKeys()\n            return @colKeys\n\n        getRowKeys: () =>\n            @sortKeys()\n            return @rowKeys\n\n        processRecord: (record) -> #this code is called in a tight loop\n            colKey = []\n            rowKey = []\n            colKey.push record[x] ? \"null\" for x in @colAttrs\n            rowKey.push record[x] ? \"null\" for x in @rowAttrs\n            flatRowKey = rowKey.join(String.fromCharCode(0))\n            flatColKey = colKey.join(String.fromCharCode(0))\n\n            @allTotal.push record\n\n            if rowKey.length != 0\n                if not @rowTotals[flatRowKey]\n                    @rowKeys.push rowKey\n                    @rowTotals[flatRowKey] = @aggregator(this, rowKey, [])\n                @rowTotals[flatRowKey].push record\n\n            if colKey.length != 0\n                if not @colTotals[flatColKey]\n                    @colKeys.push colKey\n                    @colTotals[flatColKey] = @aggregator(this, [], colKey)\n                @colTotals[flatColKey].push record\n\n            if colKey.length != 0 and rowKey.length != 0\n                if not @tree[flatRowKey]\n                    @tree[flatRowKey] = {}\n                if not @tree[flatRowKey][flatColKey]\n                    @tree[flatRowKey][flatColKey] = @aggregator(this, rowKey, colKey)\n                @tree[flatRowKey][flatColKey].push record\n\n        getAggregator: (rowKey, colKey) =>\n            flatRowKey = rowKey.join(String.fromCharCode(0))\n            flatColKey = colKey.join(String.fromCharCode(0))\n            if rowKey.length == 0 and colKey.length == 0\n                agg = @allTotal\n            else if rowKey.length == 0\n                agg = @colTotals[flatColKey]\n            else if colKey.length == 0\n                agg = @rowTotals[flatRowKey]\n            else\n                agg = @tree[flatRowKey][flatColKey]\n            return agg ? {value: (-> null), format: -> \"\"}\n\n    #expose these to the outside world\n    $.pivotUtilities = {aggregatorTemplates, aggregators, renderers, derivers, locales,\n        naturalSort, numberFormat, sortAs, PivotData}\n\n    ###\n    Default Renderer for hierarchical table layout\n    ###\n\n    pivotTableRenderer = (pivotData, opts) ->\n\n        defaults =\n            table:\n                clickCallback: null\n                rowTotals: true\n                colTotals: true\n            localeStrings: totals: \"Totals\"\n\n        opts = $.extend(true, {}, defaults, opts)\n\n        colAttrs = pivotData.colAttrs\n        rowAttrs = pivotData.rowAttrs\n        rowKeys = pivotData.getRowKeys()\n        colKeys = pivotData.getColKeys()\n\n        if opts.table.clickCallback\n            getClickHandler = (value, rowValues, colValues) ->\n                filters = {}\n                filters[attr] = colValues[i] for own i, attr of colAttrs when colValues[i]?\n                filters[attr] = rowValues[i] for own i, attr of rowAttrs when rowValues[i]?\n                return (e) -> opts.table.clickCallback(e, value, filters, pivotData)\n\n        #now actually build the output\n        result = document.createElement(\"table\")\n        result.className = \"pvtTable\"\n\n        #helper function for setting row/col-span in pivotTableRenderer\n        spanSize = (arr, i, j) ->\n            if i != 0\n                noDraw = true\n                for x in [0..j]\n                    if arr[i-1][x] != arr[i][x]\n                        noDraw = false\n                if noDraw\n                  return -1 #do not draw cell\n            len = 0\n            while i+len < arr.length\n                stop = false\n                for x in [0..j]\n                    stop = true if arr[i][x] != arr[i+len][x]\n                break if stop\n                len++\n            return len\n\n        #the first few rows are for col headers\n        thead = document.createElement(\"thead\")\n        for own j, c of colAttrs\n            tr = document.createElement(\"tr\")\n            if parseInt(j) == 0 and rowAttrs.length != 0\n                th = document.createElement(\"th\")\n                th.setAttribute(\"colspan\", rowAttrs.length)\n                th.setAttribute(\"rowspan\", colAttrs.length)\n                tr.appendChild th\n            th = document.createElement(\"th\")\n            th.className = \"pvtAxisLabel\"\n            th.textContent = c\n            tr.appendChild th\n            for own i, colKey of colKeys\n                x = spanSize(colKeys, parseInt(i), parseInt(j))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtColLabel\"\n                    th.textContent = colKey[j]\n                    th.setAttribute(\"colspan\", x)\n                    if parseInt(j) == colAttrs.length-1 and rowAttrs.length != 0\n                        th.setAttribute(\"rowspan\", 2)\n                    tr.appendChild th\n            if parseInt(j) == 0 && opts.table.rowTotals\n                th = document.createElement(\"th\")\n                th.className = \"pvtTotalLabel pvtRowTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n                th.setAttribute(\"rowspan\", colAttrs.length + (if rowAttrs.length ==0 then 0 else 1))\n                tr.appendChild th\n            thead.appendChild tr\n\n        #then a row for row header headers\n        if rowAttrs.length !=0\n            tr = document.createElement(\"tr\")\n            for own i, r of rowAttrs\n                th = document.createElement(\"th\")\n                th.className = \"pvtAxisLabel\"\n                th.textContent = r\n                tr.appendChild th\n            th = document.createElement(\"th\")\n            if colAttrs.length ==0\n                th.className = \"pvtTotalLabel pvtRowTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n            tr.appendChild th\n            thead.appendChild tr\n        result.appendChild thead\n\n        #now the actual data rows, with their row headers and totals\n        tbody = document.createElement(\"tbody\")\n        for own i, rowKey of rowKeys\n            tr = document.createElement(\"tr\")\n            for own j, txt of rowKey\n                x = spanSize(rowKeys, parseInt(i), parseInt(j))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtRowLabel\"\n                    th.textContent = txt\n                    th.setAttribute(\"rowspan\", x)\n                    if parseInt(j) == rowAttrs.length-1 and colAttrs.length !=0\n                        th.setAttribute(\"colspan\",2)\n                    tr.appendChild th\n            for own j, colKey of colKeys #this is the tight loop\n                aggregator = pivotData.getAggregator(rowKey, colKey)\n                val = aggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtVal row#{i} col#{j}\"\n                td.textContent = aggregator.format(val)\n                td.setAttribute(\"data-value\", val)\n                if getClickHandler?\n                    td.onclick = getClickHandler(val, rowKey, colKey)\n                tr.appendChild td\n\n            if opts.table.rowTotals || colAttrs.length == 0\n                totalAggregator = pivotData.getAggregator(rowKey, [])\n                val = totalAggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtTotal rowTotal\"\n                td.textContent = totalAggregator.format(val)\n                td.setAttribute(\"data-value\", val)\n                if getClickHandler?\n                    td.onclick = getClickHandler(val, rowKey, [])\n                td.setAttribute(\"data-for\", \"row\"+i)\n                tr.appendChild td\n            tbody.appendChild tr\n\n        #finally, the row for col totals, and a grand total\n        if opts.table.colTotals || rowAttrs.length == 0\n            tr = document.createElement(\"tr\")\n            if opts.table.colTotals || rowAttrs.length == 0\n                th = document.createElement(\"th\")\n                th.className = \"pvtTotalLabel pvtColTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n                th.setAttribute(\"colspan\", rowAttrs.length + (if colAttrs.length == 0 then 0 else 1))\n                tr.appendChild th\n            for own j, colKey of colKeys\n                totalAggregator = pivotData.getAggregator([], colKey)\n                val = totalAggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtTotal colTotal\"\n                td.textContent = totalAggregator.format(val)\n                td.setAttribute(\"data-value\", val)\n                if getClickHandler?\n                    td.onclick = getClickHandler(val, [], colKey)\n                td.setAttribute(\"data-for\", \"col\"+j)\n                tr.appendChild td\n            if opts.table.rowTotals || colAttrs.length == 0\n                totalAggregator = pivotData.getAggregator([], [])\n                val = totalAggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtGrandTotal\"\n                td.textContent = totalAggregator.format(val)\n                td.setAttribute(\"data-value\", val)\n                if getClickHandler?\n                    td.onclick = getClickHandler(val, [], [])\n                tr.appendChild td\n            tbody.appendChild tr\n        result.appendChild tbody\n\n        #squirrel this away for later\n        result.setAttribute(\"data-numrows\", rowKeys.length)\n        result.setAttribute(\"data-numcols\", colKeys.length)\n\n        return result\n\n    ###\n    Pivot Table core: create PivotData object and call Renderer on it\n    ###\n\n    $.fn.pivot = (input, inputOpts, locale=\"en\") ->\n        locale = \"en\" if not locales[locale]?\n        defaults =\n            cols : [], rows: [], vals: []\n            rowOrder: \"key_a_to_z\", colOrder: \"key_a_to_z\"\n            dataClass: PivotData\n            filter: -> true\n            aggregator: aggregatorTemplates.count()()\n            aggregatorName: \"Count\"\n            sorters: {}\n            derivedAttributes: {}\n            renderer: pivotTableRenderer\n\n        localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings)\n        localeDefaults =\n            rendererOptions: {localeStrings}\n            localeStrings: localeStrings\n\n        opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts))\n\n        result = null\n        try\n            pivotData = new opts.dataClass(input, opts)\n            try\n                result = opts.renderer(pivotData, opts.rendererOptions)\n            catch e\n                console.error(e.stack) if console?\n                result = $(\"<span>\").html opts.localeStrings.renderError\n        catch e\n            console.error(e.stack) if console?\n            result = $(\"<span>\").html opts.localeStrings.computeError\n\n        x = this[0]\n        x.removeChild(x.lastChild) while x.hasChildNodes()\n        return @append result\n\n\n    ###\n    Pivot Table UI: calls Pivot Table core above with options set by user\n    ###\n\n    $.fn.pivotUI = (input, inputOpts, overwrite = false, locale=\"en\") ->\n        locale = \"en\" if not locales[locale]?\n        defaults =\n            derivedAttributes: {}\n            aggregators: locales[locale].aggregators\n            renderers: locales[locale].renderers\n            hiddenAttributes: []\n            hiddenFromAggregators: []\n            hiddenFromDragDrop: []\n            menuLimit: 500\n            cols: [], rows: [], vals: []\n            rowOrder: \"key_a_to_z\", colOrder: \"key_a_to_z\"\n            dataClass: PivotData\n            exclusions: {}\n            inclusions: {}\n            unusedAttrsVertical: 85\n            autoSortUnusedAttrs: false\n            onRefresh: null\n            showUI: true\n            filter: -> true\n            sorters: {}\n            cascadeDropdownFirstLevelVals: []\n            cascadeDropdownMapping: null\n            views: {}\n            currentView: null\n\n        localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings)\n        localeDefaults =\n            rendererOptions: {localeStrings}\n            localeStrings: localeStrings\n\n        existingOpts = @data \"pivotUIOptions\"\n        if not existingOpts? or overwrite\n            opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts))\n        else\n            opts = existingOpts\n\n        buildFirstLevelDropdown = (pvtAttrFirstLevelDropdownName, cascadeDropdownMapping) ->\n            defaultOptionVal = opts.localeStrings.selectFirstLevelDropdown\n\n            newFirstLevelDropdown = $(\"<select>\")\n                .addClass(pvtAttrFirstLevelDropdownName)\n                .append($(\"<option>\").val(defaultOptionVal).html(defaultOptionVal))\n\n            for firstLevelVal of cascadeDropdownMapping\n                $(\"<option>\").val(firstLevelVal).html(firstLevelVal).appendTo(newFirstLevelDropdown)\n\n            newFirstLevelDropdown.bind \"change\", ->\n                resetSecondLevelDropdownOptions.call(this, cascadeDropdownMapping)\n\n            newFirstLevelDropdown\n\n        resetSecondLevelDropdownOptions = (cascadeDropdownMapping) ->\n            currentDropdown = $($(this)[0].nextElementSibling)\n            currentDropdown[0].length = 0\n            defaultOptionVal = opts.localeStrings.selectSecondLevelDropdown\n            $(\"<option>\").val(defaultOptionVal).html(defaultOptionVal).appendTo(currentDropdown)\n            secondLevelDropdownVals = cascadeDropdownMapping[this.value]\n            return unless secondLevelDropdownVals\n            for currentDropdownVal in secondLevelDropdownVals\n                $(\"<option>\").val(currentDropdownVal).html(currentDropdownVal).appendTo(currentDropdown)\n\n        try\n            # do a first pass on the data to cache a materialized copy of any\n            # function-valued inputs and to compute dimension cardinalities\n            attrValues = {}\n            materializedInput = []\n            recordsProcessed = 0\n            PivotData.forEachRecord input, opts.derivedAttributes, (record) ->\n                return unless opts.filter(record)\n                materializedInput.push(record)\n                for own attr of record\n                    if not attrValues[attr]?\n                        attrValues[attr] = {}\n                        if recordsProcessed > 0\n                            attrValues[attr][\"null\"] = recordsProcessed\n                for attr of attrValues\n                    value = record[attr] ? \"null\"\n                    attrValues[attr][value] ?= 0\n                    attrValues[attr][value]++\n                recordsProcessed++\n\n            #start building the output\n            uiTable = $(\"<table>\", \"class\": \"pvtUi\").attr(\"cellpadding\", 5)\n\n            #renderer control\n            rendererControl = $(\"<td>\").addClass(\"pvtUiCell\")\n\n            renderer = $(\"<select>\")\n                .addClass('pvtRenderer')\n                .appendTo(rendererControl)\n                .bind \"change\", -> refresh() #capture reference\n            for own x of opts.renderers\n                $(\"<option>\").val(x).html(x).appendTo(renderer)\n\n            # If there are views, build the viewer\n            if opts.views\n                viewer = $(\"<select style='margin: 0 10px;'>\")\n                    .addClass('pvtViewer')\n                    .appendTo(rendererControl)\n\n                # Bind events for view switching when the views in the viewer are switched\n                viewer.bind \"change\", ->\n                    currentView = $(this).val()\n                    currentPvOptions = opts.views[currentView]\n                    copyCurrentPvOptions = if currentPvOptions then JSON.parse(JSON.stringify(currentPvOptions)) else {}\n\n                    # Unnecessary or non-persistent configurations, such as\n                    #  views, currentView, cascadeDropdownMapping, aggregators, renderers\n                    #  need to be append manually\n                    copyCurrentPvOptions['views'] = opts.views\n                    copyCurrentPvOptions['currentView'] = currentView\n                    copyCurrentPvOptions['cascadeDropdownMapping'] = opts.cascadeDropdownMapping\n                    copyCurrentPvOptions['aggregators'] = opts.aggregators\n                    copyCurrentPvOptions['renderers'] = opts.renderers\n\n                    # Drawing the currentView\n                    $(\"#output\").pivotUI(input, copyCurrentPvOptions, true, locale)\n\n                # Append the defaultOptionVal for viewer\n                defaultOptionVal = opts.localeStrings.selectView\n                $(\"<option>\").val(defaultOptionVal).html(defaultOptionVal).appendTo(viewer)\n\n                # Append all persistent views\n                for own viewName of opts.views\n                    $(\"<option>\").val(viewName).html(viewName).appendTo(viewer)\n\n            #axis list, including the double-click menu\n            unused = $(\"<td>\").addClass('pvtAxisContainer pvtUnused pvtUiCell')\n            shownAttributes = (a for a of attrValues when a not in opts.hiddenAttributes)\n            shownInAggregators = (c for c in shownAttributes when c not in opts.hiddenFromAggregators)\n            shownInDragDrop = (c for c in shownAttributes when c not in opts.hiddenFromDragDrop)\n\n\n            unusedAttrsVerticalAutoOverride = false\n            if opts.unusedAttrsVertical == \"auto\"\n                unusedAttrsVerticalAutoCutoff = 120 # legacy support\n            else\n                unusedAttrsVerticalAutoCutoff = parseInt opts.unusedAttrsVertical\n\n            if not isNaN(unusedAttrsVerticalAutoCutoff)\n                attrLength = 0\n                attrLength += a.length for a in shownInDragDrop\n                unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff\n\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\n                unused.addClass('pvtVertList')\n            else\n                unused.addClass('pvtHorizList')\n\n            for own i, attr of shownInDragDrop\n                do (attr) ->\n                    values = (v for v of attrValues[attr])\n                    hasExcludedItem = false\n                    valueList = $(\"<div>\").addClass('pvtFilterBox').hide()\n\n                    valueList.append $(\"<h4>\").append(\n                        $(\"<span>\").text(attr),\n                        $(\"<span>\").addClass(\"count\").text(\"(#{values.length})\"),\n                        )\n                    if values.length > opts.menuLimit\n                        valueList.append $(\"<p>\").html(opts.localeStrings.tooMany)\n                    else\n                        if values.length > 5\n                            controls = $(\"<p>\").appendTo(valueList)\n                            sorter = getSort(opts.sorters, attr)\n                            placeholder = opts.localeStrings.filterResults\n                            $(\"<input>\", {type: \"text\"}).appendTo(controls)\n                                .attr({placeholder: placeholder, class: \"pvtSearch\"})\n                                .bind \"keyup\", ->\n                                    filter = $(this).val().toLowerCase().trim()\n                                    accept_gen = (prefix, accepted) -> (v) ->\n                                        real_filter = filter.substring(prefix.length).trim()\n                                        return true if real_filter.length == 0\n                                        return Math.sign(sorter(v.toLowerCase(), real_filter)) in accepted\n                                    accept =\n                                        if      filter.indexOf(\">=\") == 0 then accept_gen(\">=\", [1,0])\n                                        else if filter.indexOf(\"<=\") == 0 then accept_gen(\"<=\", [-1,0])\n                                        else if filter.indexOf(\">\") == 0  then accept_gen(\">\",  [1])\n                                        else if filter.indexOf(\"<\") == 0  then accept_gen(\"<\",  [-1])\n                                        else if filter.indexOf(\"~\") == 0  then (v) ->\n                                                return true if filter.substring(1).trim().length == 0\n                                                v.toLowerCase().match(filter.substring(1))\n                                        else (v) -> v.toLowerCase().indexOf(filter) != -1\n\n                                    valueList.find('.pvtCheckContainer p label span.value').each ->\n                                        if accept($(this).text())\n                                            $(this).parent().parent().show()\n                                        else\n                                            $(this).parent().parent().hide()\n                            controls.append $(\"<br>\")\n                            $(\"<button>\", {type:\"button\"}).appendTo(controls)\n                                .html(opts.localeStrings.selectAll)\n                                .bind \"click\", ->\n                                    valueList.find(\"input:visible:not(:checked)\")\n                                        .prop(\"checked\", true).toggleClass(\"changed\")\n                                    return false\n                            $(\"<button>\", {type:\"button\"}).appendTo(controls)\n                                .html(opts.localeStrings.selectNone)\n                                .bind \"click\", ->\n                                    valueList.find(\"input:visible:checked\")\n                                        .prop(\"checked\", false).toggleClass(\"changed\")\n                                    return false\n\n                        checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList)\n\n                        for value in values.sort(getSort(opts.sorters, attr))\n                             valueCount = attrValues[attr][value]\n                             filterItem = $(\"<label>\")\n                             filterItemExcluded = false\n                             if opts.inclusions[attr]\n                                filterItemExcluded = (value not in opts.inclusions[attr])\n                             else if opts.exclusions[attr]\n                                filterItemExcluded = (value in opts.exclusions[attr])\n                             hasExcludedItem ||= filterItemExcluded\n                             $(\"<input>\")\n                                .attr(\"type\", \"checkbox\").addClass('pvtFilter')\n                                .attr(\"checked\", !filterItemExcluded).data(\"filter\", [attr,value])\n                                .appendTo(filterItem)\n                                .bind \"change\", -> $(this).toggleClass(\"changed\")\n                             filterItem.append $(\"<span>\").addClass(\"value\").text(value)\n                             filterItem.append $(\"<span>\").addClass(\"count\").text(\"(\"+valueCount+\")\")\n                             checkContainer.append $(\"<p>\").append(filterItem)\n\n                    closeFilterBox = ->\n                        if valueList.find(\"[type='checkbox']\").length >\n                               valueList.find(\"[type='checkbox']:checked\").length\n                                attrElem.addClass \"pvtFilteredAttribute\"\n                            else\n                                attrElem.removeClass \"pvtFilteredAttribute\"\n\n                            valueList.find('.pvtSearch').val('')\n                            valueList.find('.pvtCheckContainer p').show()\n                            valueList.hide()\n\n                    finalButtons = $(\"<p>\").appendTo(valueList)\n\n                    if values.length <= opts.menuLimit\n                        $(\"<button>\", {type: \"button\"}).text(opts.localeStrings.apply)\n                            .appendTo(finalButtons).bind \"click\", ->\n                                if valueList.find(\".changed\").removeClass(\"changed\").length\n                                    refresh()\n                                closeFilterBox()\n\n                    $(\"<button>\", {type: \"button\"}).text(opts.localeStrings.cancel)\n                        .appendTo(finalButtons).bind \"click\", ->\n                            valueList.find(\".changed:checked\")\n                                .removeClass(\"changed\").prop(\"checked\", false)\n                            valueList.find(\".changed:not(:checked)\")\n                                .removeClass(\"changed\").prop(\"checked\", true)\n                            closeFilterBox()\n\n                    triangleLink = $(\"<span>\").addClass('pvtTriangle')\n                        .html(\" &#x25BE;\").bind \"click\", (e) ->\n                            {left, top} = $(e.currentTarget).position()\n                            valueList.css(left: left+10, top: top+10).show()\n\n                    attrElem = $(\"<li>\").addClass(\"axis_#{i}\")\n                        .append $(\"<span>\").addClass('pvtAttr').text(attr).data(\"attrName\", attr).append(triangleLink)\n\n                    attrElem.addClass('pvtFilteredAttribute') if hasExcludedItem\n                    unused.append(attrElem).append(valueList)\n\n            tr1 = $(\"<tr>\").appendTo(uiTable)\n\n            #aggregator menu and value area\n\n            aggregator = $(\"<select>\").addClass('pvtAggregator')\n                .bind \"change\", -> refresh() #capture reference\n            for own x of opts.aggregators\n                aggregator.append $(\"<option>\").val(x).html(x)\n\n            ordering =\n                key_a_to_z:   {rowSymbol: \"&varr;\", colSymbol: \"&harr;\", next: \"value_a_to_z\"}\n                value_a_to_z: {rowSymbol: \"&darr;\", colSymbol: \"&rarr;\", next: \"value_z_to_a\"}\n                value_z_to_a: {rowSymbol: \"&uarr;\", colSymbol: \"&larr;\", next: \"key_a_to_z\"}\n\n            rowOrderArrow = $(\"<a>\", role: \"button\").addClass(\"pvtRowOrder\")\n                .data(\"order\", opts.rowOrder).html(ordering[opts.rowOrder].rowSymbol)\n                .bind \"click\", ->\n                    $(this).data(\"order\", ordering[$(this).data(\"order\")].next)\n                    $(this).html(ordering[$(this).data(\"order\")].rowSymbol)\n                    refresh()\n\n            colOrderArrow = $(\"<a>\", role: \"button\").addClass(\"pvtColOrder\")\n                .data(\"order\", opts.colOrder).html(ordering[opts.colOrder].colSymbol)\n                .bind \"click\", ->\n                    $(this).data(\"order\", ordering[$(this).data(\"order\")].next)\n                    $(this).html(ordering[$(this).data(\"order\")].colSymbol)\n                    refresh()\n\n            $(\"<td>\").addClass('pvtVals pvtUiCell')\n              .appendTo(tr1)\n              .append(aggregator)\n              .append(rowOrderArrow)\n              .append(colOrderArrow)\n              .append($(\"<br>\"))\n\n            #column axes\n            $(\"<td>\").addClass('pvtAxisContainer pvtHorizList pvtCols pvtUiCell').appendTo(tr1)\n\n            tr2 = $(\"<tr>\").appendTo(uiTable)\n\n            #row axes\n            tr2.append $(\"<td>\").addClass('pvtAxisContainer pvtRows pvtUiCell').attr(\"valign\", \"top\")\n\n            #the actual pivot table container\n            pivotTable = $(\"<td>\")\n                .attr(\"valign\", \"top\")\n                .addClass('pvtRendererArea')\n                .appendTo(tr2)\n\n            #finally the renderer dropdown and unused attribs are inserted at the requested location\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\n                uiTable.find('tr:nth-child(1)').prepend rendererControl\n                uiTable.find('tr:nth-child(2)').prepend unused\n            else\n                uiTable.prepend $(\"<tr>\").append(rendererControl).append(unused)\n\n            #render the UI in its default state\n            @html uiTable\n\n            #set up the UI initial state as requested by moving elements around\n\n            for x in opts.cols\n                @find(\".pvtCols\").append @find(\".axis_#{$.inArray(x, shownInDragDrop)}\")\n            for x in opts.rows\n                @find(\".pvtRows\").append @find(\".axis_#{$.inArray(x, shownInDragDrop)}\")\n            if opts.aggregatorName?\n                @find(\".pvtAggregator\").val opts.aggregatorName\n            if opts.rendererName?\n                @find(\".pvtRenderer\").val opts.rendererName\n\n            @find(\".pvtUiCell\").hide() unless opts.showUI\n\n            needResetSecondLevelDropdownOptions = false\n            initialRender = true\n\n            #set up for refreshing\n            refreshDelayed = =>\n                subopts =\n                    derivedAttributes: opts.derivedAttributes\n                    localeStrings: opts.localeStrings\n                    rendererOptions: opts.rendererOptions\n                    sorters: opts.sorters\n                    cols: [], rows: []\n                    dataClass: opts.dataClass\n\n                numInputsToProcess = opts.aggregators[aggregator.val()]([])().numInputs ? 0\n\n                # Check if the current aggregator needs a cascading drop-down box\n                canUseCascadeDropdown = opts.aggregators[aggregator.val()]([])().canUseCascadeDropdown ? false\n                cascadeDropdownMapping = opts.cascadeDropdownMapping ? null\n\n                vals = []\n\n                # Used to store the value of the first level of the cascade dropdown,\n                # so that they can be append after a refresh\n                cascadeDropdownFirstLevelVals = []\n                pvtAttrFirstLevelDropdownName = 'pvtAttrFirstLevelDropdown'\n                pvtAttrBreakName = 'pvtAttrBreak'\n\n                @find(\".pvtRows li span.pvtAttr\").each -> subopts.rows.push $(this).data(\"attrName\")\n                @find(\".pvtCols li span.pvtAttr\").each -> subopts.cols.push $(this).data(\"attrName\")\n                pvtAttrDropdowns = @find(\".pvtVals select.pvtAttrDropdown\")\n                pvtAttrDropdowns.each (index) ->\n                    currentDropdown = $(this)\n                    firstLevelDropdown = $(currentDropdown[0].previousElementSibling)\n                    breakDom = $(currentDropdown[0].nextElementSibling)\n                    if numInputsToProcess == 0\n                        firstLevelDropdown.remove() if firstLevelDropdown.hasClass(pvtAttrFirstLevelDropdownName)\n                        breakDom.remove() if breakDom.hasClass(pvtAttrBreakName)\n                        currentDropdown.remove()\n                    else\n                        numInputsToProcess--\n                        vals.push currentDropdown.val() if currentDropdown.val() != \"\"\n\n                        cascadeDropdownFirstLevelVal = firstLevelDropdown.val()\n                        firstLevelDropdown.remove() if firstLevelDropdown.hasClass(pvtAttrFirstLevelDropdownName)\n                        if canUseCascadeDropdown and cascadeDropdownMapping\n                            newFirstLevelDropdown = buildFirstLevelDropdown(pvtAttrFirstLevelDropdownName, cascadeDropdownMapping)\n\n                            if firstLevelDropdown.hasClass(pvtAttrFirstLevelDropdownName)\n                                newFirstLevelDropdown.val(cascadeDropdownFirstLevelVal || opts.localeStrings.selectFirstLevelDropdown)\n\n                            currentDropdown.before(newFirstLevelDropdown)\n                            currentDropdown.after($(\"<br class='#{pvtAttrBreakName}'>\")) unless breakDom.hasClass(pvtAttrBreakName)\n\n                            if needResetSecondLevelDropdownOptions\n                                resetSecondLevelDropdownOptions.call(newFirstLevelDropdown, cascadeDropdownMapping)\n                                isAllSecondLevelDropdownOptionsResetted = index == pvtAttrDropdowns.length - 1\n                                needResetSecondLevelDropdownOptions = false if isAllSecondLevelDropdownOptionsResetted\n\n                            cascadeDropdownFirstLevelVals.push newFirstLevelDropdown.val() if newFirstLevelDropdown.val() != \"\"\n                        else\n                            breakDom.remove() if breakDom.hasClass(pvtAttrBreakName)\n                            needResetSecondLevelDropdownOptions = true\n                            return if currentDropdown.length > 1\n                            for attr in shownInAggregators\n                              currentDropdown.append($(\"<option>\").val(attr).text(attr))\n\n                if numInputsToProcess != 0\n                    pvtVals = @find(\".pvtVals\")\n                    for x in [0...numInputsToProcess]\n                        newDropdown = $(\"<select>\")\n                            .addClass('pvtAttrDropdown')\n                            .append($(\"<option>#{opts.localeStrings.selectSecondLevelDropdown}</option>\"))\n                            .bind \"change\", -> refresh()\n                        if canUseCascadeDropdown and cascadeDropdownMapping\n                            needResetSecondLevelDropdownOptions = false\n                            newFirstLevelDropdown = buildFirstLevelDropdown(pvtAttrFirstLevelDropdownName, cascadeDropdownMapping)\n                            pvtVals.append(newFirstLevelDropdown).append(newDropdown).append($(\"<br class='#{pvtAttrBreakName}'>\"))\n                        else\n                            needResetSecondLevelDropdownOptions = true\n                            for attr in shownInAggregators\n                                newDropdown.append($(\"<option>\").val(attr).text(attr))\n                            pvtVals.append(newDropdown)\n\n                if initialRender\n                    pvtViewer = @find(\".pvtViewer\")\n                    pvtViewer.val(opts.currentView || defaultOptionVal)\n\n                    vals = opts.vals\n\n                    cascadeDropdownFirstLevelVals = opts.cascadeDropdownFirstLevelVals\n\n                    cascadeDropdownFirstLevelIndex = 0\n                    @find(\".pvtVals select.#{pvtAttrFirstLevelDropdownName}\").each ->\n                        $(this).val cascadeDropdownFirstLevelVals[cascadeDropdownFirstLevelIndex]\n                        $(this).trigger('change')\n                        cascadeDropdownFirstLevelIndex++\n\n                    i = 0\n                    @find(\".pvtVals select.pvtAttrDropdown\").each ->\n                        $(this).val vals[i]\n                        i++\n                    initialRender = false\n\n                subopts.aggregatorName = aggregator.val()\n                subopts.vals = vals\n                subopts.cascadeDropdownFirstLevelVals = cascadeDropdownFirstLevelVals\n                subopts.aggregator = opts.aggregators[aggregator.val()](vals)\n                subopts.renderer = opts.renderers[renderer.val()]\n                subopts.rowOrder = rowOrderArrow.data(\"order\")\n                subopts.colOrder = colOrderArrow.data(\"order\")\n                #construct filter here\n                exclusions = {}\n                @find('input.pvtFilter').not(':checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        exclusions[filter[0]].push( filter[1] )\n                    else\n                        exclusions[filter[0]] = [ filter[1] ]\n                #include inclusions when exclusions present\n                inclusions = {}\n                @find('input.pvtFilter:checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        if inclusions[filter[0]]?\n                            inclusions[filter[0]].push( filter[1] )\n                        else\n                            inclusions[filter[0]] = [ filter[1] ]\n\n                subopts.filter = (record) ->\n                    return false if not opts.filter(record)\n                    for k,excludedItems of exclusions\n                        return false if \"\"+(record[k] ? 'null') in excludedItems\n                    return true\n\n                pivotTable.pivot(materializedInput,subopts)\n                pivotUIOptions = $.extend {}, opts,\n                    cols: subopts.cols\n                    rows: subopts.rows\n                    colOrder: subopts.colOrder\n                    rowOrder: subopts.rowOrder\n                    vals: vals\n                    cascadeDropdownFirstLevelVals: subopts.cascadeDropdownFirstLevelVals\n                    exclusions: exclusions\n                    inclusions: inclusions\n                    inclusionsInfo: inclusions #duplicated for backwards-compatibility\n                    aggregatorName: aggregator.val()\n                    rendererName: renderer.val()\n\n                @data \"pivotUIOptions\", pivotUIOptions\n\n                # if requested make sure unused columns are in alphabetical order\n                if opts.autoSortUnusedAttrs\n                    unusedAttrsContainer = @find(\"td.pvtUnused.pvtAxisContainer\")\n                    $(unusedAttrsContainer).children(\"li\")\n                        .sort((a, b) => naturalSort($(a).text(), $(b).text()))\n                        .appendTo unusedAttrsContainer\n\n                pivotTable.css(\"opacity\", 1)\n                opts.onRefresh(pivotUIOptions) if opts.onRefresh?\n\n            refresh = =>\n                pivotTable.css(\"opacity\", 0.5)\n                setTimeout refreshDelayed, 10\n\n            #the very first refresh will actually display the table\n            refresh()\n\n            @find(\".pvtAxisContainer\").sortable\n                    update: (e, ui) -> refresh() if not ui.sender?\n                    connectWith: @find(\".pvtAxisContainer\")\n                    items: 'li'\n                    placeholder: 'pvtPlaceholder'\n        catch e\n            console.error(e.stack) if console?\n            @html opts.localeStrings.uiRenderError\n        return this\n\n    ###\n    Heatmap post-processing\n    ###\n\n    $.fn.heatmap = (scope = \"heatmap\", opts) ->\n        numRows = @data \"numrows\"\n        numCols = @data \"numcols\"\n\n        # given a series of values\n        # must return a function to map a given value to a CSS color\n        colorScaleGenerator = opts?.heatmap?.colorScaleGenerator\n        colorScaleGenerator ?= (values) ->\n            min = Math.min(values...)\n            max = Math.max(values...)\n            return (x) ->\n                nonRed = 255 - Math.round 255*(x-min)/(max-min)\n                return \"rgb(255,#{nonRed},#{nonRed})\"\n\n        heatmapper = (scope) =>\n            forEachCell = (f) =>\n                @find(scope).each ->\n                    x = $(this).data(\"value\")\n                    f(x, $(this)) if x? and isFinite(x)\n\n            values = []\n            forEachCell (x) -> values.push x\n            colorScale = colorScaleGenerator(values)\n            forEachCell (x, elem) -> elem.css \"background-color\", colorScale(x)\n\n        switch scope\n            when \"heatmap\"    then heatmapper \".pvtVal\"\n            when \"rowheatmap\" then heatmapper \".pvtVal.row#{i}\" for i in [0...numRows]\n            when \"colheatmap\" then heatmapper \".pvtVal.col#{j}\" for j in [0...numCols]\n\n        heatmapper \".pvtTotal.rowTotal\"\n        heatmapper \".pvtTotal.colTotal\"\n\n        return this\n\n    ###\n    Barchart post-processing\n    ###\n\n    $.fn.barchart = (opts) ->\n        numRows = @data \"numrows\"\n        numCols = @data \"numcols\"\n\n        barcharter = (scope) =>\n            forEachCell = (f) =>\n                @find(scope).each ->\n                    x = $(this).data(\"value\")\n                    f(x, $(this)) if x? and isFinite(x)\n\n            values = []\n            forEachCell (x) -> values.push x\n            max = Math.max(values...)\n            if max < 0\n                max = 0\n            range = max;\n            min = Math.min(values...)\n            if min < 0\n                range = max - min\n            scaler = (x) -> 100*x/(1.4*range)\n            forEachCell (x, elem) ->\n                text = elem.text()\n                wrapper = $(\"<div>\").css\n                    \"position\": \"relative\"\n                    \"height\": \"55px\"\n                bgColor = \"gray\"\n                bBase = 0\n                if min < 0\n                    bBase = scaler(-min)\n                if x < 0\n                    bBase += scaler(x)\n                    bgColor = \"darkred\"\n                    x = -x\n                wrapper.append $(\"<div>\").css\n                    \"position\": \"absolute\"\n                    \"bottom\": bBase + \"%\"\n                    \"left\": 0\n                    \"right\": 0\n                    \"height\": scaler(x) + \"%\"\n                    \"background-color\": bgColor\n                wrapper.append $(\"<div>\").text(text).css\n                    \"position\":\"relative\"\n                    \"padding-left\":\"5px\"\n                    \"padding-right\":\"5px\"\n\n                elem.css(\"padding\": 0,\"padding-top\": \"5px\", \"text-align\": \"center\").html wrapper\n\n        barcharter \".pvtVal.row#{i}\" for i in [0...numRows]\n        barcharter \".pvtTotal.colTotal\"\n\n        return this\n","(function() {\n  var callWithJQuery,\n    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },\n    slice = [].slice,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    hasProp = {}.hasOwnProperty;\n\n  callWithJQuery = function(pivotModule) {\n    if (typeof exports === \"object\" && typeof module === \"object\") {\n      return pivotModule(require(\"jquery\"));\n    } else if (typeof define === \"function\" && define.amd) {\n      return define([\"jquery\"], pivotModule);\n    } else {\n      return pivotModule(jQuery);\n    }\n  };\n\n  callWithJQuery(function($) {\n\n    /*\n    Utilities\n     */\n    var PivotData, addSeparators, aggregatorTemplates, aggregators, dayNamesEn, derivers, getSort, locales, mthNamesEn, naturalSort, numberFormat, pivotTableRenderer, rd, renderers, rx, rz, sortAs, usFmt, usFmtInt, usFmtPct, zeroPad;\n    addSeparators = function(nStr, thousandsSep, decimalSep) {\n      var rgx, x, x1, x2;\n      nStr += '';\n      x = nStr.split('.');\n      x1 = x[0];\n      x2 = x.length > 1 ? decimalSep + x[1] : '';\n      rgx = /(\\d+)(\\d{3})/;\n      while (rgx.test(x1)) {\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2');\n      }\n      return x1 + x2;\n    };\n    numberFormat = function(opts) {\n      var defaults;\n      defaults = {\n        digitsAfterDecimal: 2,\n        scaler: 1,\n        thousandsSep: \",\",\n        decimalSep: \".\",\n        prefix: \"\",\n        suffix: \"\"\n      };\n      opts = $.extend({}, defaults, opts);\n      return function(x) {\n        var result;\n        if (isNaN(x) || !isFinite(x)) {\n          return \"\";\n        }\n        result = addSeparators((opts.scaler * x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep);\n        return \"\" + opts.prefix + result + opts.suffix;\n      };\n    };\n    usFmt = numberFormat();\n    usFmtInt = numberFormat({\n      digitsAfterDecimal: 0\n    });\n    usFmtPct = numberFormat({\n      digitsAfterDecimal: 1,\n      scaler: 100,\n      suffix: \"%\"\n    });\n    aggregatorTemplates = {\n      count: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function() {\n          return function(data, rowKey, colKey) {\n            return {\n              count: 0,\n              push: function() {\n                return this.count++;\n              },\n              value: function() {\n                return this.count;\n              },\n              format: formatter\n            };\n          };\n        };\n      },\n      uniques: function(fn, formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              uniq: [],\n              push: function(record) {\n                var ref;\n                if (ref = record[attr], indexOf.call(this.uniq, ref) < 0) {\n                  return this.uniq.push(record[attr]);\n                }\n              },\n              value: function() {\n                return fn(this.uniq);\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1,\n              canUseCascadeDropdown: true\n            };\n          };\n        };\n      },\n      sum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              sum: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[attr]))) {\n                  return this.sum += parseFloat(record[attr]);\n                }\n              },\n              value: function() {\n                return this.sum;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1,\n              canUseCascadeDropdown: true\n            };\n          };\n        };\n      },\n      extremes: function(mode, formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              val: null,\n              sorter: getSort(data != null ? data.sorters : void 0, attr),\n              push: function(record) {\n                var ref, ref1, ref2, x;\n                x = record[attr];\n                if (mode === \"min\" || mode === \"max\") {\n                  x = parseFloat(x);\n                  if (!isNaN(x)) {\n                    this.val = Math[mode](x, (ref = this.val) != null ? ref : x);\n                  }\n                }\n                if (mode === \"first\") {\n                  if (this.sorter(x, (ref1 = this.val) != null ? ref1 : x) <= 0) {\n                    this.val = x;\n                  }\n                }\n                if (mode === \"last\") {\n                  if (this.sorter(x, (ref2 = this.val) != null ? ref2 : x) >= 0) {\n                    return this.val = x;\n                  }\n                }\n              },\n              value: function() {\n                return this.val;\n              },\n              format: function(x) {\n                if (isNaN(x)) {\n                  return x;\n                } else {\n                  return formatter(x);\n                }\n              },\n              numInputs: attr != null ? 0 : 1,\n              canUseCascadeDropdown: true\n            };\n          };\n        };\n      },\n      quantile: function(q, formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              vals: [],\n              push: function(record) {\n                var x;\n                x = parseFloat(record[attr]);\n                if (!isNaN(x)) {\n                  return this.vals.push(x);\n                }\n              },\n              value: function() {\n                var i;\n                if (this.vals.length === 0) {\n                  return null;\n                }\n                this.vals.sort(function(a, b) {\n                  return a - b;\n                });\n                i = (this.vals.length - 1) * q;\n                return (this.vals[Math.floor(i)] + this.vals[Math.ceil(i)]) / 2.0;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1,\n              canUseCascadeDropdown: true\n            };\n          };\n        };\n      },\n      runningStat: function(mode, ddof, formatter) {\n        if (mode == null) {\n          mode = \"mean\";\n        }\n        if (ddof == null) {\n          ddof = 1;\n        }\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              n: 0.0,\n              m: 0.0,\n              s: 0.0,\n              push: function(record) {\n                var m_new, x;\n                x = parseFloat(record[attr]);\n                if (isNaN(x)) {\n                  return;\n                }\n                this.n += 1.0;\n                if (this.n === 1.0) {\n                  return this.m = x;\n                } else {\n                  m_new = this.m + (x - this.m) / this.n;\n                  this.s = this.s + (x - this.m) * (x - m_new);\n                  return this.m = m_new;\n                }\n              },\n              value: function() {\n                if (mode === \"mean\") {\n                  if (this.n === 0) {\n                    return 0 / 0;\n                  } else {\n                    return this.m;\n                  }\n                }\n                if (this.n <= ddof) {\n                  return 0;\n                }\n                switch (mode) {\n                  case \"var\":\n                    return this.s / (this.n - ddof);\n                  case \"stdev\":\n                    return Math.sqrt(this.s / (this.n - ddof));\n                }\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1,\n              canUseCascadeDropdown: true\n            };\n          };\n        };\n      },\n      sumOverSum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var denom, num;\n          num = arg[0], denom = arg[1];\n          return function(data, rowKey, colKey) {\n            return {\n              sumNum: 0,\n              sumDenom: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[num]))) {\n                  this.sumNum += parseFloat(record[num]);\n                }\n                if (!isNaN(parseFloat(record[denom]))) {\n                  return this.sumDenom += parseFloat(record[denom]);\n                }\n              },\n              value: function() {\n                return this.sumNum / this.sumDenom;\n              },\n              format: formatter,\n              numInputs: (num != null) && (denom != null) ? 0 : 2,\n              canUseCascadeDropdown: true\n            };\n          };\n        };\n      },\n      sumOverSumBound80: function(upper, formatter) {\n        if (upper == null) {\n          upper = true;\n        }\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var denom, num;\n          num = arg[0], denom = arg[1];\n          return function(data, rowKey, colKey) {\n            return {\n              sumNum: 0,\n              sumDenom: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[num]))) {\n                  this.sumNum += parseFloat(record[num]);\n                }\n                if (!isNaN(parseFloat(record[denom]))) {\n                  return this.sumDenom += parseFloat(record[denom]);\n                }\n              },\n              value: function() {\n                var sign;\n                sign = upper ? 1 : -1;\n                return (0.821187207574908 / this.sumDenom + this.sumNum / this.sumDenom + 1.2815515655446004 * sign * Math.sqrt(0.410593603787454 / (this.sumDenom * this.sumDenom) + (this.sumNum * (1 - this.sumNum / this.sumDenom)) / (this.sumDenom * this.sumDenom))) / (1 + 1.642374415149816 / this.sumDenom);\n              },\n              format: formatter,\n              numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n          };\n        };\n      },\n      fractionOf: function(wrapped, type, formatter) {\n        if (type == null) {\n          type = \"total\";\n        }\n        if (formatter == null) {\n          formatter = usFmtPct;\n        }\n        return function() {\n          var x;\n          x = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          return function(data, rowKey, colKey) {\n            return {\n              selector: {\n                total: [[], []],\n                row: [rowKey, []],\n                col: [[], colKey]\n              }[type],\n              inner: wrapped.apply(null, x)(data, rowKey, colKey),\n              push: function(record) {\n                return this.inner.push(record);\n              },\n              format: formatter,\n              value: function() {\n                return this.inner.value() / data.getAggregator.apply(data, this.selector).inner.value();\n              },\n              numInputs: wrapped.apply(null, x)().numInputs\n            };\n          };\n        };\n      }\n    };\n    aggregatorTemplates.countUnique = function(f) {\n      return aggregatorTemplates.uniques((function(x) {\n        return x.length;\n      }), f);\n    };\n    aggregatorTemplates.listUnique = function(s) {\n      return aggregatorTemplates.uniques((function(x) {\n        return x.sort(naturalSort).join(s);\n      }), (function(x) {\n        return x;\n      }));\n    };\n    aggregatorTemplates.max = function(f) {\n      return aggregatorTemplates.extremes('max', f);\n    };\n    aggregatorTemplates.min = function(f) {\n      return aggregatorTemplates.extremes('min', f);\n    };\n    aggregatorTemplates.first = function(f) {\n      return aggregatorTemplates.extremes('first', f);\n    };\n    aggregatorTemplates.last = function(f) {\n      return aggregatorTemplates.extremes('last', f);\n    };\n    aggregatorTemplates.median = function(f) {\n      return aggregatorTemplates.quantile(0.5, f);\n    };\n    aggregatorTemplates.average = function(f) {\n      return aggregatorTemplates.runningStat(\"mean\", 1, f);\n    };\n    aggregatorTemplates[\"var\"] = function(ddof, f) {\n      return aggregatorTemplates.runningStat(\"var\", ddof, f);\n    };\n    aggregatorTemplates.stdev = function(ddof, f) {\n      return aggregatorTemplates.runningStat(\"stdev\", ddof, f);\n    };\n    aggregators = (function(tpl) {\n      return {\n        \"Count\": tpl.count(usFmtInt),\n        \"Count Unique Values\": tpl.countUnique(usFmtInt),\n        \"List Unique Values\": tpl.listUnique(\", \"),\n        \"Sum\": tpl.sum(usFmt),\n        \"Integer Sum\": tpl.sum(usFmtInt),\n        \"Average\": tpl.average(usFmt),\n        \"Median\": tpl.median(usFmt),\n        \"Sample Variance\": tpl[\"var\"](1, usFmt),\n        \"Sample Standard Deviation\": tpl.stdev(1, usFmt),\n        \"Minimum\": tpl.min(usFmt),\n        \"Maximum\": tpl.max(usFmt),\n        \"First\": tpl.first(usFmt),\n        \"Last\": tpl.last(usFmt),\n        \"Sum over Sum\": tpl.sumOverSum(usFmt),\n        \"80% Upper Bound\": tpl.sumOverSumBound80(true, usFmt),\n        \"80% Lower Bound\": tpl.sumOverSumBound80(false, usFmt),\n        \"Sum as Fraction of Total\": tpl.fractionOf(tpl.sum(), \"total\", usFmtPct),\n        \"Sum as Fraction of Rows\": tpl.fractionOf(tpl.sum(), \"row\", usFmtPct),\n        \"Sum as Fraction of Columns\": tpl.fractionOf(tpl.sum(), \"col\", usFmtPct),\n        \"Count as Fraction of Total\": tpl.fractionOf(tpl.count(), \"total\", usFmtPct),\n        \"Count as Fraction of Rows\": tpl.fractionOf(tpl.count(), \"row\", usFmtPct),\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\", usFmtPct)\n      };\n    })(aggregatorTemplates);\n    renderers = {\n      \"Table\": function(data, opts) {\n        return pivotTableRenderer(data, opts);\n      },\n      \"Table Barchart\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).barchart();\n      },\n      \"Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"heatmap\", opts);\n      },\n      \"Row Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"rowheatmap\", opts);\n      },\n      \"Col Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"colheatmap\", opts);\n      }\n    };\n    locales = {\n      en: {\n        aggregators: aggregators,\n        renderers: renderers,\n        localeStrings: {\n          renderError: \"An error occurred rendering the PivotTable results.\",\n          computeError: \"An error occurred computing the PivotTable results.\",\n          uiRenderError: \"An error occurred rendering the PivotTable UI.\",\n          selectAll: \"Select All\",\n          selectNone: \"Select None\",\n          tooMany: \"(too many to list)\",\n          filterResults: \"Filter values\",\n          apply: \"Apply\",\n          cancel: \"Cancel\",\n          totals: \"Totals\",\n          vs: \"vs\",\n          by: \"by\",\n          selectView: \"Select View\",\n          selectFirstLevelDropdown: \"Select Category\",\n          selectSecondLevelDropdown: \"Select Field\"\n        }\n      }\n    };\n    mthNamesEn = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    dayNamesEn = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n    zeroPad = function(number) {\n      return (\"0\" + number).substr(-2, 2);\n    };\n    derivers = {\n      bin: function(col, binWidth) {\n        return function(record) {\n          return record[col] - record[col] % binWidth;\n        };\n      },\n      dateFormat: function(col, formatString, utcOutput, mthNames, dayNames) {\n        var utc;\n        if (utcOutput == null) {\n          utcOutput = false;\n        }\n        if (mthNames == null) {\n          mthNames = mthNamesEn;\n        }\n        if (dayNames == null) {\n          dayNames = dayNamesEn;\n        }\n        utc = utcOutput ? \"UTC\" : \"\";\n        return function(record) {\n          var date;\n          date = new Date(Date.parse(record[col]));\n          if (isNaN(date)) {\n            return \"\";\n          }\n          return formatString.replace(/%(.)/g, function(m, p) {\n            switch (p) {\n              case \"y\":\n                return date[\"get\" + utc + \"FullYear\"]();\n              case \"m\":\n                return zeroPad(date[\"get\" + utc + \"Month\"]() + 1);\n              case \"n\":\n                return mthNames[date[\"get\" + utc + \"Month\"]()];\n              case \"d\":\n                return zeroPad(date[\"get\" + utc + \"Date\"]());\n              case \"w\":\n                return dayNames[date[\"get\" + utc + \"Day\"]()];\n              case \"x\":\n                return date[\"get\" + utc + \"Day\"]();\n              case \"H\":\n                return zeroPad(date[\"get\" + utc + \"Hours\"]());\n              case \"M\":\n                return zeroPad(date[\"get\" + utc + \"Minutes\"]());\n              case \"S\":\n                return zeroPad(date[\"get\" + utc + \"Seconds\"]());\n              default:\n                return \"%\" + p;\n            }\n          });\n        };\n      }\n    };\n    rx = /(\\d+)|(\\D+)/g;\n    rd = /\\d/;\n    rz = /^0/;\n    naturalSort = (function(_this) {\n      return function(as, bs) {\n        var a, a1, b, b1, nas, nbs;\n        if ((bs != null) && (as == null)) {\n          return -1;\n        }\n        if ((as != null) && (bs == null)) {\n          return 1;\n        }\n        if (typeof as === \"number\" && isNaN(as)) {\n          return -1;\n        }\n        if (typeof bs === \"number\" && isNaN(bs)) {\n          return 1;\n        }\n        nas = +as;\n        nbs = +bs;\n        if (nas < nbs) {\n          return -1;\n        }\n        if (nas > nbs) {\n          return 1;\n        }\n        if (typeof as === \"number\" && typeof bs !== \"number\") {\n          return -1;\n        }\n        if (typeof bs === \"number\" && typeof as !== \"number\") {\n          return 1;\n        }\n        if (typeof as === \"number\" && typeof bs === \"number\") {\n          return 0;\n        }\n        if (isNaN(nbs) && !isNaN(nas)) {\n          return -1;\n        }\n        if (isNaN(nas) && !isNaN(nbs)) {\n          return 1;\n        }\n        a = String(as);\n        b = String(bs);\n        if (a === b) {\n          return 0;\n        }\n        if (!(rd.test(a) && rd.test(b))) {\n          return (a > b ? 1 : -1);\n        }\n        a = a.match(rx);\n        b = b.match(rx);\n        while (a.length && b.length) {\n          a1 = a.shift();\n          b1 = b.shift();\n          if (a1 !== b1) {\n            if (rd.test(a1) && rd.test(b1)) {\n              return a1.replace(rz, \".0\") - b1.replace(rz, \".0\");\n            } else {\n              return (a1 > b1 ? 1 : -1);\n            }\n          }\n        }\n        return a.length - b.length;\n      };\n    })(this);\n    sortAs = function(order) {\n      var i, l_mapping, mapping, x;\n      mapping = {};\n      l_mapping = {};\n      for (i in order) {\n        x = order[i];\n        mapping[x] = i;\n        if (typeof x === \"string\") {\n          l_mapping[x.toLowerCase()] = i;\n        }\n      }\n      return function(a, b) {\n        if ((mapping[a] != null) && (mapping[b] != null)) {\n          return mapping[a] - mapping[b];\n        } else if (mapping[a] != null) {\n          return -1;\n        } else if (mapping[b] != null) {\n          return 1;\n        } else if ((l_mapping[a] != null) && (l_mapping[b] != null)) {\n          return l_mapping[a] - l_mapping[b];\n        } else if (l_mapping[a] != null) {\n          return -1;\n        } else if (l_mapping[b] != null) {\n          return 1;\n        } else {\n          return naturalSort(a, b);\n        }\n      };\n    };\n    getSort = function(sorters, attr) {\n      var sort;\n      if (sorters != null) {\n        if ($.isFunction(sorters)) {\n          sort = sorters(attr);\n          if ($.isFunction(sort)) {\n            return sort;\n          }\n        } else if (sorters[attr] != null) {\n          return sorters[attr];\n        }\n      }\n      return naturalSort;\n    };\n\n    /*\n    Data Model class\n     */\n    PivotData = (function() {\n      function PivotData(input, opts) {\n        var ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9;\n        if (opts == null) {\n          opts = {};\n        }\n        this.getAggregator = bind(this.getAggregator, this);\n        this.getRowKeys = bind(this.getRowKeys, this);\n        this.getColKeys = bind(this.getColKeys, this);\n        this.sortKeys = bind(this.sortKeys, this);\n        this.arrSort = bind(this.arrSort, this);\n        this.input = input;\n        this.aggregator = (ref = opts.aggregator) != null ? ref : aggregatorTemplates.count()();\n        this.aggregatorName = (ref1 = opts.aggregatorName) != null ? ref1 : \"Count\";\n        this.colAttrs = (ref2 = opts.cols) != null ? ref2 : [];\n        this.rowAttrs = (ref3 = opts.rows) != null ? ref3 : [];\n        this.valAttrs = (ref4 = opts.vals) != null ? ref4 : [];\n        this.sorters = (ref5 = opts.sorters) != null ? ref5 : {};\n        this.rowOrder = (ref6 = opts.rowOrder) != null ? ref6 : \"key_a_to_z\";\n        this.colOrder = (ref7 = opts.colOrder) != null ? ref7 : \"key_a_to_z\";\n        this.derivedAttributes = (ref8 = opts.derivedAttributes) != null ? ref8 : {};\n        this.filter = (ref9 = opts.filter) != null ? ref9 : (function() {\n          return true;\n        });\n        this.tree = {};\n        this.rowKeys = [];\n        this.colKeys = [];\n        this.rowTotals = {};\n        this.colTotals = {};\n        this.allTotal = this.aggregator(this, [], []);\n        this.sorted = false;\n        PivotData.forEachRecord(this.input, this.derivedAttributes, (function(_this) {\n          return function(record) {\n            if (_this.filter(record)) {\n              return _this.processRecord(record);\n            }\n          };\n        })(this));\n      }\n\n      PivotData.forEachRecord = function(input, derivedAttributes, f) {\n        var addRecord, compactRecord, i, j, k, l, len1, record, ref, results, results1, tblCols;\n        if ($.isEmptyObject(derivedAttributes)) {\n          addRecord = f;\n        } else {\n          addRecord = function(record) {\n            var k, ref, v;\n            for (k in derivedAttributes) {\n              v = derivedAttributes[k];\n              record[k] = (ref = v(record)) != null ? ref : record[k];\n            }\n            return f(record);\n          };\n        }\n        if ($.isFunction(input)) {\n          return input(addRecord);\n        } else if ($.isArray(input)) {\n          if ($.isArray(input[0])) {\n            results = [];\n            for (i in input) {\n              if (!hasProp.call(input, i)) continue;\n              compactRecord = input[i];\n              if (!(i > 0)) {\n                continue;\n              }\n              record = {};\n              ref = input[0];\n              for (j in ref) {\n                if (!hasProp.call(ref, j)) continue;\n                k = ref[j];\n                record[k] = compactRecord[j];\n              }\n              results.push(addRecord(record));\n            }\n            return results;\n          } else {\n            results1 = [];\n            for (l = 0, len1 = input.length; l < len1; l++) {\n              record = input[l];\n              results1.push(addRecord(record));\n            }\n            return results1;\n          }\n        } else if (input instanceof $) {\n          tblCols = [];\n          $(\"thead > tr > th\", input).each(function(i) {\n            return tblCols.push($(this).text());\n          });\n          return $(\"tbody > tr\", input).each(function(i) {\n            record = {};\n            $(\"td\", this).each(function(j) {\n              return record[tblCols[j]] = $(this).text();\n            });\n            return addRecord(record);\n          });\n        } else {\n          throw new Error(\"unknown input format\");\n        }\n      };\n\n      PivotData.prototype.forEachMatchingRecord = function(criteria, callback) {\n        return PivotData.forEachRecord(this.input, this.derivedAttributes, (function(_this) {\n          return function(record) {\n            var k, ref, v;\n            if (!_this.filter(record)) {\n              return;\n            }\n            for (k in criteria) {\n              v = criteria[k];\n              if (v !== ((ref = record[k]) != null ? ref : \"null\")) {\n                return;\n              }\n            }\n            return callback(record);\n          };\n        })(this));\n      };\n\n      PivotData.prototype.arrSort = function(attrs) {\n        var a, sortersArr;\n        sortersArr = (function() {\n          var l, len1, results;\n          results = [];\n          for (l = 0, len1 = attrs.length; l < len1; l++) {\n            a = attrs[l];\n            results.push(getSort(this.sorters, a));\n          }\n          return results;\n        }).call(this);\n        return function(a, b) {\n          var comparison, i, sorter;\n          for (i in sortersArr) {\n            if (!hasProp.call(sortersArr, i)) continue;\n            sorter = sortersArr[i];\n            comparison = sorter(a[i], b[i]);\n            if (comparison !== 0) {\n              return comparison;\n            }\n          }\n          return 0;\n        };\n      };\n\n      PivotData.prototype.sortKeys = function() {\n        var v;\n        if (!this.sorted) {\n          this.sorted = true;\n          v = (function(_this) {\n            return function(r, c) {\n              return _this.getAggregator(r, c).value();\n            };\n          })(this);\n          switch (this.rowOrder) {\n            case \"value_a_to_z\":\n              this.rowKeys.sort((function(_this) {\n                return function(a, b) {\n                  return naturalSort(v(a, []), v(b, []));\n                };\n              })(this));\n              break;\n            case \"value_z_to_a\":\n              this.rowKeys.sort((function(_this) {\n                return function(a, b) {\n                  return -naturalSort(v(a, []), v(b, []));\n                };\n              })(this));\n              break;\n            default:\n              this.rowKeys.sort(this.arrSort(this.rowAttrs));\n          }\n          switch (this.colOrder) {\n            case \"value_a_to_z\":\n              return this.colKeys.sort((function(_this) {\n                return function(a, b) {\n                  return naturalSort(v([], a), v([], b));\n                };\n              })(this));\n            case \"value_z_to_a\":\n              return this.colKeys.sort((function(_this) {\n                return function(a, b) {\n                  return -naturalSort(v([], a), v([], b));\n                };\n              })(this));\n            default:\n              return this.colKeys.sort(this.arrSort(this.colAttrs));\n          }\n        }\n      };\n\n      PivotData.prototype.getColKeys = function() {\n        this.sortKeys();\n        return this.colKeys;\n      };\n\n      PivotData.prototype.getRowKeys = function() {\n        this.sortKeys();\n        return this.rowKeys;\n      };\n\n      PivotData.prototype.processRecord = function(record) {\n        var colKey, flatColKey, flatRowKey, l, len1, len2, n, ref, ref1, ref2, ref3, rowKey, x;\n        colKey = [];\n        rowKey = [];\n        ref = this.colAttrs;\n        for (l = 0, len1 = ref.length; l < len1; l++) {\n          x = ref[l];\n          colKey.push((ref1 = record[x]) != null ? ref1 : \"null\");\n        }\n        ref2 = this.rowAttrs;\n        for (n = 0, len2 = ref2.length; n < len2; n++) {\n          x = ref2[n];\n          rowKey.push((ref3 = record[x]) != null ? ref3 : \"null\");\n        }\n        flatRowKey = rowKey.join(String.fromCharCode(0));\n        flatColKey = colKey.join(String.fromCharCode(0));\n        this.allTotal.push(record);\n        if (rowKey.length !== 0) {\n          if (!this.rowTotals[flatRowKey]) {\n            this.rowKeys.push(rowKey);\n            this.rowTotals[flatRowKey] = this.aggregator(this, rowKey, []);\n          }\n          this.rowTotals[flatRowKey].push(record);\n        }\n        if (colKey.length !== 0) {\n          if (!this.colTotals[flatColKey]) {\n            this.colKeys.push(colKey);\n            this.colTotals[flatColKey] = this.aggregator(this, [], colKey);\n          }\n          this.colTotals[flatColKey].push(record);\n        }\n        if (colKey.length !== 0 && rowKey.length !== 0) {\n          if (!this.tree[flatRowKey]) {\n            this.tree[flatRowKey] = {};\n          }\n          if (!this.tree[flatRowKey][flatColKey]) {\n            this.tree[flatRowKey][flatColKey] = this.aggregator(this, rowKey, colKey);\n          }\n          return this.tree[flatRowKey][flatColKey].push(record);\n        }\n      };\n\n      PivotData.prototype.getAggregator = function(rowKey, colKey) {\n        var agg, flatColKey, flatRowKey;\n        flatRowKey = rowKey.join(String.fromCharCode(0));\n        flatColKey = colKey.join(String.fromCharCode(0));\n        if (rowKey.length === 0 && colKey.length === 0) {\n          agg = this.allTotal;\n        } else if (rowKey.length === 0) {\n          agg = this.colTotals[flatColKey];\n        } else if (colKey.length === 0) {\n          agg = this.rowTotals[flatRowKey];\n        } else {\n          agg = this.tree[flatRowKey][flatColKey];\n        }\n        return agg != null ? agg : {\n          value: (function() {\n            return null;\n          }),\n          format: function() {\n            return \"\";\n          }\n        };\n      };\n\n      return PivotData;\n\n    })();\n    $.pivotUtilities = {\n      aggregatorTemplates: aggregatorTemplates,\n      aggregators: aggregators,\n      renderers: renderers,\n      derivers: derivers,\n      locales: locales,\n      naturalSort: naturalSort,\n      numberFormat: numberFormat,\n      sortAs: sortAs,\n      PivotData: PivotData\n    };\n\n    /*\n    Default Renderer for hierarchical table layout\n     */\n    pivotTableRenderer = function(pivotData, opts) {\n      var aggregator, c, colAttrs, colKey, colKeys, defaults, getClickHandler, i, j, r, result, rowAttrs, rowKey, rowKeys, spanSize, tbody, td, th, thead, totalAggregator, tr, txt, val, x;\n      defaults = {\n        table: {\n          clickCallback: null,\n          rowTotals: true,\n          colTotals: true\n        },\n        localeStrings: {\n          totals: \"Totals\"\n        }\n      };\n      opts = $.extend(true, {}, defaults, opts);\n      colAttrs = pivotData.colAttrs;\n      rowAttrs = pivotData.rowAttrs;\n      rowKeys = pivotData.getRowKeys();\n      colKeys = pivotData.getColKeys();\n      if (opts.table.clickCallback) {\n        getClickHandler = function(value, rowValues, colValues) {\n          var attr, filters, i;\n          filters = {};\n          for (i in colAttrs) {\n            if (!hasProp.call(colAttrs, i)) continue;\n            attr = colAttrs[i];\n            if (colValues[i] != null) {\n              filters[attr] = colValues[i];\n            }\n          }\n          for (i in rowAttrs) {\n            if (!hasProp.call(rowAttrs, i)) continue;\n            attr = rowAttrs[i];\n            if (rowValues[i] != null) {\n              filters[attr] = rowValues[i];\n            }\n          }\n          return function(e) {\n            return opts.table.clickCallback(e, value, filters, pivotData);\n          };\n        };\n      }\n      result = document.createElement(\"table\");\n      result.className = \"pvtTable\";\n      spanSize = function(arr, i, j) {\n        var l, len, n, noDraw, ref, ref1, stop, x;\n        if (i !== 0) {\n          noDraw = true;\n          for (x = l = 0, ref = j; 0 <= ref ? l <= ref : l >= ref; x = 0 <= ref ? ++l : --l) {\n            if (arr[i - 1][x] !== arr[i][x]) {\n              noDraw = false;\n            }\n          }\n          if (noDraw) {\n            return -1;\n          }\n        }\n        len = 0;\n        while (i + len < arr.length) {\n          stop = false;\n          for (x = n = 0, ref1 = j; 0 <= ref1 ? n <= ref1 : n >= ref1; x = 0 <= ref1 ? ++n : --n) {\n            if (arr[i][x] !== arr[i + len][x]) {\n              stop = true;\n            }\n          }\n          if (stop) {\n            break;\n          }\n          len++;\n        }\n        return len;\n      };\n      thead = document.createElement(\"thead\");\n      for (j in colAttrs) {\n        if (!hasProp.call(colAttrs, j)) continue;\n        c = colAttrs[j];\n        tr = document.createElement(\"tr\");\n        if (parseInt(j) === 0 && rowAttrs.length !== 0) {\n          th = document.createElement(\"th\");\n          th.setAttribute(\"colspan\", rowAttrs.length);\n          th.setAttribute(\"rowspan\", colAttrs.length);\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        th.className = \"pvtAxisLabel\";\n        th.textContent = c;\n        tr.appendChild(th);\n        for (i in colKeys) {\n          if (!hasProp.call(colKeys, i)) continue;\n          colKey = colKeys[i];\n          x = spanSize(colKeys, parseInt(i), parseInt(j));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtColLabel\";\n            th.textContent = colKey[j];\n            th.setAttribute(\"colspan\", x);\n            if (parseInt(j) === colAttrs.length - 1 && rowAttrs.length !== 0) {\n              th.setAttribute(\"rowspan\", 2);\n            }\n            tr.appendChild(th);\n          }\n        }\n        if (parseInt(j) === 0 && opts.table.rowTotals) {\n          th = document.createElement(\"th\");\n          th.className = \"pvtTotalLabel pvtRowTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n          th.setAttribute(\"rowspan\", colAttrs.length + (rowAttrs.length === 0 ? 0 : 1));\n          tr.appendChild(th);\n        }\n        thead.appendChild(tr);\n      }\n      if (rowAttrs.length !== 0) {\n        tr = document.createElement(\"tr\");\n        for (i in rowAttrs) {\n          if (!hasProp.call(rowAttrs, i)) continue;\n          r = rowAttrs[i];\n          th = document.createElement(\"th\");\n          th.className = \"pvtAxisLabel\";\n          th.textContent = r;\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        if (colAttrs.length === 0) {\n          th.className = \"pvtTotalLabel pvtRowTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n        }\n        tr.appendChild(th);\n        thead.appendChild(tr);\n      }\n      result.appendChild(thead);\n      tbody = document.createElement(\"tbody\");\n      for (i in rowKeys) {\n        if (!hasProp.call(rowKeys, i)) continue;\n        rowKey = rowKeys[i];\n        tr = document.createElement(\"tr\");\n        for (j in rowKey) {\n          if (!hasProp.call(rowKey, j)) continue;\n          txt = rowKey[j];\n          x = spanSize(rowKeys, parseInt(i), parseInt(j));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtRowLabel\";\n            th.textContent = txt;\n            th.setAttribute(\"rowspan\", x);\n            if (parseInt(j) === rowAttrs.length - 1 && colAttrs.length !== 0) {\n              th.setAttribute(\"colspan\", 2);\n            }\n            tr.appendChild(th);\n          }\n        }\n        for (j in colKeys) {\n          if (!hasProp.call(colKeys, j)) continue;\n          colKey = colKeys[j];\n          aggregator = pivotData.getAggregator(rowKey, colKey);\n          val = aggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtVal row\" + i + \" col\" + j;\n          td.textContent = aggregator.format(val);\n          td.setAttribute(\"data-value\", val);\n          if (getClickHandler != null) {\n            td.onclick = getClickHandler(val, rowKey, colKey);\n          }\n          tr.appendChild(td);\n        }\n        if (opts.table.rowTotals || colAttrs.length === 0) {\n          totalAggregator = pivotData.getAggregator(rowKey, []);\n          val = totalAggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtTotal rowTotal\";\n          td.textContent = totalAggregator.format(val);\n          td.setAttribute(\"data-value\", val);\n          if (getClickHandler != null) {\n            td.onclick = getClickHandler(val, rowKey, []);\n          }\n          td.setAttribute(\"data-for\", \"row\" + i);\n          tr.appendChild(td);\n        }\n        tbody.appendChild(tr);\n      }\n      if (opts.table.colTotals || rowAttrs.length === 0) {\n        tr = document.createElement(\"tr\");\n        if (opts.table.colTotals || rowAttrs.length === 0) {\n          th = document.createElement(\"th\");\n          th.className = \"pvtTotalLabel pvtColTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n          th.setAttribute(\"colspan\", rowAttrs.length + (colAttrs.length === 0 ? 0 : 1));\n          tr.appendChild(th);\n        }\n        for (j in colKeys) {\n          if (!hasProp.call(colKeys, j)) continue;\n          colKey = colKeys[j];\n          totalAggregator = pivotData.getAggregator([], colKey);\n          val = totalAggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtTotal colTotal\";\n          td.textContent = totalAggregator.format(val);\n          td.setAttribute(\"data-value\", val);\n          if (getClickHandler != null) {\n            td.onclick = getClickHandler(val, [], colKey);\n          }\n          td.setAttribute(\"data-for\", \"col\" + j);\n          tr.appendChild(td);\n        }\n        if (opts.table.rowTotals || colAttrs.length === 0) {\n          totalAggregator = pivotData.getAggregator([], []);\n          val = totalAggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtGrandTotal\";\n          td.textContent = totalAggregator.format(val);\n          td.setAttribute(\"data-value\", val);\n          if (getClickHandler != null) {\n            td.onclick = getClickHandler(val, [], []);\n          }\n          tr.appendChild(td);\n        }\n        tbody.appendChild(tr);\n      }\n      result.appendChild(tbody);\n      result.setAttribute(\"data-numrows\", rowKeys.length);\n      result.setAttribute(\"data-numcols\", colKeys.length);\n      return result;\n    };\n\n    /*\n    Pivot Table core: create PivotData object and call Renderer on it\n     */\n    $.fn.pivot = function(input, inputOpts, locale) {\n      var defaults, e, localeDefaults, localeStrings, opts, pivotData, result, x;\n      if (locale == null) {\n        locale = \"en\";\n      }\n      if (locales[locale] == null) {\n        locale = \"en\";\n      }\n      defaults = {\n        cols: [],\n        rows: [],\n        vals: [],\n        rowOrder: \"key_a_to_z\",\n        colOrder: \"key_a_to_z\",\n        dataClass: PivotData,\n        filter: function() {\n          return true;\n        },\n        aggregator: aggregatorTemplates.count()(),\n        aggregatorName: \"Count\",\n        sorters: {},\n        derivedAttributes: {},\n        renderer: pivotTableRenderer\n      };\n      localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings);\n      localeDefaults = {\n        rendererOptions: {\n          localeStrings: localeStrings\n        },\n        localeStrings: localeStrings\n      };\n      opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts));\n      result = null;\n      try {\n        pivotData = new opts.dataClass(input, opts);\n        try {\n          result = opts.renderer(pivotData, opts.rendererOptions);\n        } catch (error) {\n          e = error;\n          if (typeof console !== \"undefined\" && console !== null) {\n            console.error(e.stack);\n          }\n          result = $(\"<span>\").html(opts.localeStrings.renderError);\n        }\n      } catch (error) {\n        e = error;\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        result = $(\"<span>\").html(opts.localeStrings.computeError);\n      }\n      x = this[0];\n      while (x.hasChildNodes()) {\n        x.removeChild(x.lastChild);\n      }\n      return this.append(result);\n    };\n\n    /*\n    Pivot Table UI: calls Pivot Table core above with options set by user\n     */\n    $.fn.pivotUI = function(input, inputOpts, overwrite, locale) {\n      var a, aggregator, attr, attrLength, attrValues, buildFirstLevelDropdown, c, colOrderArrow, defaultOptionVal, defaults, e, existingOpts, fn1, i, initialRender, l, len1, len2, len3, localeDefaults, localeStrings, materializedInput, n, needResetSecondLevelDropdownOptions, o, opts, ordering, pivotTable, recordsProcessed, ref, ref1, ref2, ref3, ref4, refresh, refreshDelayed, renderer, rendererControl, resetSecondLevelDropdownOptions, rowOrderArrow, shownAttributes, shownInAggregators, shownInDragDrop, tr1, tr2, uiTable, unused, unusedAttrsVerticalAutoCutoff, unusedAttrsVerticalAutoOverride, viewName, viewer, x;\n      if (overwrite == null) {\n        overwrite = false;\n      }\n      if (locale == null) {\n        locale = \"en\";\n      }\n      if (locales[locale] == null) {\n        locale = \"en\";\n      }\n      defaults = {\n        derivedAttributes: {},\n        aggregators: locales[locale].aggregators,\n        renderers: locales[locale].renderers,\n        hiddenAttributes: [],\n        hiddenFromAggregators: [],\n        hiddenFromDragDrop: [],\n        menuLimit: 500,\n        cols: [],\n        rows: [],\n        vals: [],\n        rowOrder: \"key_a_to_z\",\n        colOrder: \"key_a_to_z\",\n        dataClass: PivotData,\n        exclusions: {},\n        inclusions: {},\n        unusedAttrsVertical: 85,\n        autoSortUnusedAttrs: false,\n        onRefresh: null,\n        showUI: true,\n        filter: function() {\n          return true;\n        },\n        sorters: {},\n        cascadeDropdownFirstLevelVals: [],\n        cascadeDropdownMapping: null,\n        views: {},\n        currentView: null\n      };\n      localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings);\n      localeDefaults = {\n        rendererOptions: {\n          localeStrings: localeStrings\n        },\n        localeStrings: localeStrings\n      };\n      existingOpts = this.data(\"pivotUIOptions\");\n      if ((existingOpts == null) || overwrite) {\n        opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts));\n      } else {\n        opts = existingOpts;\n      }\n      buildFirstLevelDropdown = function(pvtAttrFirstLevelDropdownName, cascadeDropdownMapping) {\n        var defaultOptionVal, firstLevelVal, newFirstLevelDropdown;\n        defaultOptionVal = opts.localeStrings.selectFirstLevelDropdown;\n        newFirstLevelDropdown = $(\"<select>\").addClass(pvtAttrFirstLevelDropdownName).append($(\"<option>\").val(defaultOptionVal).html(defaultOptionVal));\n        for (firstLevelVal in cascadeDropdownMapping) {\n          $(\"<option>\").val(firstLevelVal).html(firstLevelVal).appendTo(newFirstLevelDropdown);\n        }\n        newFirstLevelDropdown.bind(\"change\", function() {\n          return resetSecondLevelDropdownOptions.call(this, cascadeDropdownMapping);\n        });\n        return newFirstLevelDropdown;\n      };\n      resetSecondLevelDropdownOptions = function(cascadeDropdownMapping) {\n        var currentDropdown, currentDropdownVal, defaultOptionVal, l, len1, results, secondLevelDropdownVals;\n        currentDropdown = $($(this)[0].nextElementSibling);\n        currentDropdown[0].length = 0;\n        defaultOptionVal = opts.localeStrings.selectSecondLevelDropdown;\n        $(\"<option>\").val(defaultOptionVal).html(defaultOptionVal).appendTo(currentDropdown);\n        secondLevelDropdownVals = cascadeDropdownMapping[this.value];\n        if (!secondLevelDropdownVals) {\n          return;\n        }\n        results = [];\n        for (l = 0, len1 = secondLevelDropdownVals.length; l < len1; l++) {\n          currentDropdownVal = secondLevelDropdownVals[l];\n          results.push($(\"<option>\").val(currentDropdownVal).html(currentDropdownVal).appendTo(currentDropdown));\n        }\n        return results;\n      };\n      try {\n        attrValues = {};\n        materializedInput = [];\n        recordsProcessed = 0;\n        PivotData.forEachRecord(input, opts.derivedAttributes, function(record) {\n          var attr, base, ref, value;\n          if (!opts.filter(record)) {\n            return;\n          }\n          materializedInput.push(record);\n          for (attr in record) {\n            if (!hasProp.call(record, attr)) continue;\n            if (attrValues[attr] == null) {\n              attrValues[attr] = {};\n              if (recordsProcessed > 0) {\n                attrValues[attr][\"null\"] = recordsProcessed;\n              }\n            }\n          }\n          for (attr in attrValues) {\n            value = (ref = record[attr]) != null ? ref : \"null\";\n            if ((base = attrValues[attr])[value] == null) {\n              base[value] = 0;\n            }\n            attrValues[attr][value]++;\n          }\n          return recordsProcessed++;\n        });\n        uiTable = $(\"<table>\", {\n          \"class\": \"pvtUi\"\n        }).attr(\"cellpadding\", 5);\n        rendererControl = $(\"<td>\").addClass(\"pvtUiCell\");\n        renderer = $(\"<select>\").addClass('pvtRenderer').appendTo(rendererControl).bind(\"change\", function() {\n          return refresh();\n        });\n        ref = opts.renderers;\n        for (x in ref) {\n          if (!hasProp.call(ref, x)) continue;\n          $(\"<option>\").val(x).html(x).appendTo(renderer);\n        }\n        if (opts.views) {\n          viewer = $(\"<select style='margin: 0 10px;'>\").addClass('pvtViewer').appendTo(rendererControl);\n          viewer.bind(\"change\", function() {\n            var copyCurrentPvOptions, currentPvOptions, currentView;\n            currentView = $(this).val();\n            currentPvOptions = opts.views[currentView];\n            copyCurrentPvOptions = currentPvOptions ? JSON.parse(JSON.stringify(currentPvOptions)) : {};\n            copyCurrentPvOptions['views'] = opts.views;\n            copyCurrentPvOptions['currentView'] = currentView;\n            copyCurrentPvOptions['cascadeDropdownMapping'] = opts.cascadeDropdownMapping;\n            copyCurrentPvOptions['aggregators'] = opts.aggregators;\n            copyCurrentPvOptions['renderers'] = opts.renderers;\n            return $(\"#output\").pivotUI(input, copyCurrentPvOptions, true, locale);\n          });\n          defaultOptionVal = opts.localeStrings.selectView;\n          $(\"<option>\").val(defaultOptionVal).html(defaultOptionVal).appendTo(viewer);\n          ref1 = opts.views;\n          for (viewName in ref1) {\n            if (!hasProp.call(ref1, viewName)) continue;\n            $(\"<option>\").val(viewName).html(viewName).appendTo(viewer);\n          }\n        }\n        unused = $(\"<td>\").addClass('pvtAxisContainer pvtUnused pvtUiCell');\n        shownAttributes = (function() {\n          var results;\n          results = [];\n          for (a in attrValues) {\n            if (indexOf.call(opts.hiddenAttributes, a) < 0) {\n              results.push(a);\n            }\n          }\n          return results;\n        })();\n        shownInAggregators = (function() {\n          var l, len1, results;\n          results = [];\n          for (l = 0, len1 = shownAttributes.length; l < len1; l++) {\n            c = shownAttributes[l];\n            if (indexOf.call(opts.hiddenFromAggregators, c) < 0) {\n              results.push(c);\n            }\n          }\n          return results;\n        })();\n        shownInDragDrop = (function() {\n          var l, len1, results;\n          results = [];\n          for (l = 0, len1 = shownAttributes.length; l < len1; l++) {\n            c = shownAttributes[l];\n            if (indexOf.call(opts.hiddenFromDragDrop, c) < 0) {\n              results.push(c);\n            }\n          }\n          return results;\n        })();\n        unusedAttrsVerticalAutoOverride = false;\n        if (opts.unusedAttrsVertical === \"auto\") {\n          unusedAttrsVerticalAutoCutoff = 120;\n        } else {\n          unusedAttrsVerticalAutoCutoff = parseInt(opts.unusedAttrsVertical);\n        }\n        if (!isNaN(unusedAttrsVerticalAutoCutoff)) {\n          attrLength = 0;\n          for (l = 0, len1 = shownInDragDrop.length; l < len1; l++) {\n            a = shownInDragDrop[l];\n            attrLength += a.length;\n          }\n          unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff;\n        }\n        if (opts.unusedAttrsVertical === true || unusedAttrsVerticalAutoOverride) {\n          unused.addClass('pvtVertList');\n        } else {\n          unused.addClass('pvtHorizList');\n        }\n        fn1 = function(attr) {\n          var attrElem, checkContainer, closeFilterBox, controls, filterItem, filterItemExcluded, finalButtons, hasExcludedItem, len2, n, placeholder, ref2, sorter, triangleLink, v, value, valueCount, valueList, values;\n          values = (function() {\n            var results;\n            results = [];\n            for (v in attrValues[attr]) {\n              results.push(v);\n            }\n            return results;\n          })();\n          hasExcludedItem = false;\n          valueList = $(\"<div>\").addClass('pvtFilterBox').hide();\n          valueList.append($(\"<h4>\").append($(\"<span>\").text(attr), $(\"<span>\").addClass(\"count\").text(\"(\" + values.length + \")\")));\n          if (values.length > opts.menuLimit) {\n            valueList.append($(\"<p>\").html(opts.localeStrings.tooMany));\n          } else {\n            if (values.length > 5) {\n              controls = $(\"<p>\").appendTo(valueList);\n              sorter = getSort(opts.sorters, attr);\n              placeholder = opts.localeStrings.filterResults;\n              $(\"<input>\", {\n                type: \"text\"\n              }).appendTo(controls).attr({\n                placeholder: placeholder,\n                \"class\": \"pvtSearch\"\n              }).bind(\"keyup\", function() {\n                var accept, accept_gen, filter;\n                filter = $(this).val().toLowerCase().trim();\n                accept_gen = function(prefix, accepted) {\n                  return function(v) {\n                    var real_filter, ref2;\n                    real_filter = filter.substring(prefix.length).trim();\n                    if (real_filter.length === 0) {\n                      return true;\n                    }\n                    return ref2 = Math.sign(sorter(v.toLowerCase(), real_filter)), indexOf.call(accepted, ref2) >= 0;\n                  };\n                };\n                accept = filter.indexOf(\">=\") === 0 ? accept_gen(\">=\", [1, 0]) : filter.indexOf(\"<=\") === 0 ? accept_gen(\"<=\", [-1, 0]) : filter.indexOf(\">\") === 0 ? accept_gen(\">\", [1]) : filter.indexOf(\"<\") === 0 ? accept_gen(\"<\", [-1]) : filter.indexOf(\"~\") === 0 ? function(v) {\n                  if (filter.substring(1).trim().length === 0) {\n                    return true;\n                  }\n                  return v.toLowerCase().match(filter.substring(1));\n                } : function(v) {\n                  return v.toLowerCase().indexOf(filter) !== -1;\n                };\n                return valueList.find('.pvtCheckContainer p label span.value').each(function() {\n                  if (accept($(this).text())) {\n                    return $(this).parent().parent().show();\n                  } else {\n                    return $(this).parent().parent().hide();\n                  }\n                });\n              });\n              controls.append($(\"<br>\"));\n              $(\"<button>\", {\n                type: \"button\"\n              }).appendTo(controls).html(opts.localeStrings.selectAll).bind(\"click\", function() {\n                valueList.find(\"input:visible:not(:checked)\").prop(\"checked\", true).toggleClass(\"changed\");\n                return false;\n              });\n              $(\"<button>\", {\n                type: \"button\"\n              }).appendTo(controls).html(opts.localeStrings.selectNone).bind(\"click\", function() {\n                valueList.find(\"input:visible:checked\").prop(\"checked\", false).toggleClass(\"changed\");\n                return false;\n              });\n            }\n            checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList);\n            ref2 = values.sort(getSort(opts.sorters, attr));\n            for (n = 0, len2 = ref2.length; n < len2; n++) {\n              value = ref2[n];\n              valueCount = attrValues[attr][value];\n              filterItem = $(\"<label>\");\n              filterItemExcluded = false;\n              if (opts.inclusions[attr]) {\n                filterItemExcluded = (indexOf.call(opts.inclusions[attr], value) < 0);\n              } else if (opts.exclusions[attr]) {\n                filterItemExcluded = (indexOf.call(opts.exclusions[attr], value) >= 0);\n              }\n              hasExcludedItem || (hasExcludedItem = filterItemExcluded);\n              $(\"<input>\").attr(\"type\", \"checkbox\").addClass('pvtFilter').attr(\"checked\", !filterItemExcluded).data(\"filter\", [attr, value]).appendTo(filterItem).bind(\"change\", function() {\n                return $(this).toggleClass(\"changed\");\n              });\n              filterItem.append($(\"<span>\").addClass(\"value\").text(value));\n              filterItem.append($(\"<span>\").addClass(\"count\").text(\"(\" + valueCount + \")\"));\n              checkContainer.append($(\"<p>\").append(filterItem));\n            }\n          }\n          closeFilterBox = function() {\n            if (valueList.find(\"[type='checkbox']\").length > valueList.find(\"[type='checkbox']:checked\").length) {\n              attrElem.addClass(\"pvtFilteredAttribute\");\n            } else {\n              attrElem.removeClass(\"pvtFilteredAttribute\");\n            }\n            valueList.find('.pvtSearch').val('');\n            valueList.find('.pvtCheckContainer p').show();\n            return valueList.hide();\n          };\n          finalButtons = $(\"<p>\").appendTo(valueList);\n          if (values.length <= opts.menuLimit) {\n            $(\"<button>\", {\n              type: \"button\"\n            }).text(opts.localeStrings.apply).appendTo(finalButtons).bind(\"click\", function() {\n              if (valueList.find(\".changed\").removeClass(\"changed\").length) {\n                refresh();\n              }\n              return closeFilterBox();\n            });\n          }\n          $(\"<button>\", {\n            type: \"button\"\n          }).text(opts.localeStrings.cancel).appendTo(finalButtons).bind(\"click\", function() {\n            valueList.find(\".changed:checked\").removeClass(\"changed\").prop(\"checked\", false);\n            valueList.find(\".changed:not(:checked)\").removeClass(\"changed\").prop(\"checked\", true);\n            return closeFilterBox();\n          });\n          triangleLink = $(\"<span>\").addClass('pvtTriangle').html(\" &#x25BE;\").bind(\"click\", function(e) {\n            var left, ref3, top;\n            ref3 = $(e.currentTarget).position(), left = ref3.left, top = ref3.top;\n            return valueList.css({\n              left: left + 10,\n              top: top + 10\n            }).show();\n          });\n          attrElem = $(\"<li>\").addClass(\"axis_\" + i).append($(\"<span>\").addClass('pvtAttr').text(attr).data(\"attrName\", attr).append(triangleLink));\n          if (hasExcludedItem) {\n            attrElem.addClass('pvtFilteredAttribute');\n          }\n          return unused.append(attrElem).append(valueList);\n        };\n        for (i in shownInDragDrop) {\n          if (!hasProp.call(shownInDragDrop, i)) continue;\n          attr = shownInDragDrop[i];\n          fn1(attr);\n        }\n        tr1 = $(\"<tr>\").appendTo(uiTable);\n        aggregator = $(\"<select>\").addClass('pvtAggregator').bind(\"change\", function() {\n          return refresh();\n        });\n        ref2 = opts.aggregators;\n        for (x in ref2) {\n          if (!hasProp.call(ref2, x)) continue;\n          aggregator.append($(\"<option>\").val(x).html(x));\n        }\n        ordering = {\n          key_a_to_z: {\n            rowSymbol: \"&varr;\",\n            colSymbol: \"&harr;\",\n            next: \"value_a_to_z\"\n          },\n          value_a_to_z: {\n            rowSymbol: \"&darr;\",\n            colSymbol: \"&rarr;\",\n            next: \"value_z_to_a\"\n          },\n          value_z_to_a: {\n            rowSymbol: \"&uarr;\",\n            colSymbol: \"&larr;\",\n            next: \"key_a_to_z\"\n          }\n        };\n        rowOrderArrow = $(\"<a>\", {\n          role: \"button\"\n        }).addClass(\"pvtRowOrder\").data(\"order\", opts.rowOrder).html(ordering[opts.rowOrder].rowSymbol).bind(\"click\", function() {\n          $(this).data(\"order\", ordering[$(this).data(\"order\")].next);\n          $(this).html(ordering[$(this).data(\"order\")].rowSymbol);\n          return refresh();\n        });\n        colOrderArrow = $(\"<a>\", {\n          role: \"button\"\n        }).addClass(\"pvtColOrder\").data(\"order\", opts.colOrder).html(ordering[opts.colOrder].colSymbol).bind(\"click\", function() {\n          $(this).data(\"order\", ordering[$(this).data(\"order\")].next);\n          $(this).html(ordering[$(this).data(\"order\")].colSymbol);\n          return refresh();\n        });\n        $(\"<td>\").addClass('pvtVals pvtUiCell').appendTo(tr1).append(aggregator).append(rowOrderArrow).append(colOrderArrow).append($(\"<br>\"));\n        $(\"<td>\").addClass('pvtAxisContainer pvtHorizList pvtCols pvtUiCell').appendTo(tr1);\n        tr2 = $(\"<tr>\").appendTo(uiTable);\n        tr2.append($(\"<td>\").addClass('pvtAxisContainer pvtRows pvtUiCell').attr(\"valign\", \"top\"));\n        pivotTable = $(\"<td>\").attr(\"valign\", \"top\").addClass('pvtRendererArea').appendTo(tr2);\n        if (opts.unusedAttrsVertical === true || unusedAttrsVerticalAutoOverride) {\n          uiTable.find('tr:nth-child(1)').prepend(rendererControl);\n          uiTable.find('tr:nth-child(2)').prepend(unused);\n        } else {\n          uiTable.prepend($(\"<tr>\").append(rendererControl).append(unused));\n        }\n        this.html(uiTable);\n        ref3 = opts.cols;\n        for (n = 0, len2 = ref3.length; n < len2; n++) {\n          x = ref3[n];\n          this.find(\".pvtCols\").append(this.find(\".axis_\" + ($.inArray(x, shownInDragDrop))));\n        }\n        ref4 = opts.rows;\n        for (o = 0, len3 = ref4.length; o < len3; o++) {\n          x = ref4[o];\n          this.find(\".pvtRows\").append(this.find(\".axis_\" + ($.inArray(x, shownInDragDrop))));\n        }\n        if (opts.aggregatorName != null) {\n          this.find(\".pvtAggregator\").val(opts.aggregatorName);\n        }\n        if (opts.rendererName != null) {\n          this.find(\".pvtRenderer\").val(opts.rendererName);\n        }\n        if (!opts.showUI) {\n          this.find(\".pvtUiCell\").hide();\n        }\n        needResetSecondLevelDropdownOptions = false;\n        initialRender = true;\n        refreshDelayed = (function(_this) {\n          return function() {\n            var canUseCascadeDropdown, cascadeDropdownFirstLevelIndex, cascadeDropdownFirstLevelVals, cascadeDropdownMapping, exclusions, inclusions, len4, newDropdown, newFirstLevelDropdown, numInputsToProcess, pivotUIOptions, pvtAttrBreakName, pvtAttrDropdowns, pvtAttrFirstLevelDropdownName, pvtVals, pvtViewer, ref5, ref6, ref7, ref8, subopts, t, u, unusedAttrsContainer, vals;\n            subopts = {\n              derivedAttributes: opts.derivedAttributes,\n              localeStrings: opts.localeStrings,\n              rendererOptions: opts.rendererOptions,\n              sorters: opts.sorters,\n              cols: [],\n              rows: [],\n              dataClass: opts.dataClass\n            };\n            numInputsToProcess = (ref5 = opts.aggregators[aggregator.val()]([])().numInputs) != null ? ref5 : 0;\n            canUseCascadeDropdown = (ref6 = opts.aggregators[aggregator.val()]([])().canUseCascadeDropdown) != null ? ref6 : false;\n            cascadeDropdownMapping = (ref7 = opts.cascadeDropdownMapping) != null ? ref7 : null;\n            vals = [];\n            cascadeDropdownFirstLevelVals = [];\n            pvtAttrFirstLevelDropdownName = 'pvtAttrFirstLevelDropdown';\n            pvtAttrBreakName = 'pvtAttrBreak';\n            _this.find(\".pvtRows li span.pvtAttr\").each(function() {\n              return subopts.rows.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtCols li span.pvtAttr\").each(function() {\n              return subopts.cols.push($(this).data(\"attrName\"));\n            });\n            pvtAttrDropdowns = _this.find(\".pvtVals select.pvtAttrDropdown\");\n            pvtAttrDropdowns.each(function(index) {\n              var breakDom, cascadeDropdownFirstLevelVal, currentDropdown, firstLevelDropdown, isAllSecondLevelDropdownOptionsResetted, len4, newFirstLevelDropdown, results, t;\n              currentDropdown = $(this);\n              firstLevelDropdown = $(currentDropdown[0].previousElementSibling);\n              breakDom = $(currentDropdown[0].nextElementSibling);\n              if (numInputsToProcess === 0) {\n                if (firstLevelDropdown.hasClass(pvtAttrFirstLevelDropdownName)) {\n                  firstLevelDropdown.remove();\n                }\n                if (breakDom.hasClass(pvtAttrBreakName)) {\n                  breakDom.remove();\n                }\n                return currentDropdown.remove();\n              } else {\n                numInputsToProcess--;\n                if (currentDropdown.val() !== \"\") {\n                  vals.push(currentDropdown.val());\n                }\n                cascadeDropdownFirstLevelVal = firstLevelDropdown.val();\n                if (firstLevelDropdown.hasClass(pvtAttrFirstLevelDropdownName)) {\n                  firstLevelDropdown.remove();\n                }\n                if (canUseCascadeDropdown && cascadeDropdownMapping) {\n                  newFirstLevelDropdown = buildFirstLevelDropdown(pvtAttrFirstLevelDropdownName, cascadeDropdownMapping);\n                  if (firstLevelDropdown.hasClass(pvtAttrFirstLevelDropdownName)) {\n                    newFirstLevelDropdown.val(cascadeDropdownFirstLevelVal || opts.localeStrings.selectFirstLevelDropdown);\n                  }\n                  currentDropdown.before(newFirstLevelDropdown);\n                  if (!breakDom.hasClass(pvtAttrBreakName)) {\n                    currentDropdown.after($(\"<br class='\" + pvtAttrBreakName + \"'>\"));\n                  }\n                  if (needResetSecondLevelDropdownOptions) {\n                    resetSecondLevelDropdownOptions.call(newFirstLevelDropdown, cascadeDropdownMapping);\n                    isAllSecondLevelDropdownOptionsResetted = index === pvtAttrDropdowns.length - 1;\n                    if (isAllSecondLevelDropdownOptionsResetted) {\n                      needResetSecondLevelDropdownOptions = false;\n                    }\n                  }\n                  if (newFirstLevelDropdown.val() !== \"\") {\n                    return cascadeDropdownFirstLevelVals.push(newFirstLevelDropdown.val());\n                  }\n                } else {\n                  if (breakDom.hasClass(pvtAttrBreakName)) {\n                    breakDom.remove();\n                  }\n                  needResetSecondLevelDropdownOptions = true;\n                  if (currentDropdown.length > 1) {\n                    return;\n                  }\n                  results = [];\n                  for (t = 0, len4 = shownInAggregators.length; t < len4; t++) {\n                    attr = shownInAggregators[t];\n                    results.push(currentDropdown.append($(\"<option>\").val(attr).text(attr)));\n                  }\n                  return results;\n                }\n              }\n            });\n            if (numInputsToProcess !== 0) {\n              pvtVals = _this.find(\".pvtVals\");\n              for (x = t = 0, ref8 = numInputsToProcess; 0 <= ref8 ? t < ref8 : t > ref8; x = 0 <= ref8 ? ++t : --t) {\n                newDropdown = $(\"<select>\").addClass('pvtAttrDropdown').append($(\"<option>\" + opts.localeStrings.selectSecondLevelDropdown + \"</option>\")).bind(\"change\", function() {\n                  return refresh();\n                });\n                if (canUseCascadeDropdown && cascadeDropdownMapping) {\n                  needResetSecondLevelDropdownOptions = false;\n                  newFirstLevelDropdown = buildFirstLevelDropdown(pvtAttrFirstLevelDropdownName, cascadeDropdownMapping);\n                  pvtVals.append(newFirstLevelDropdown).append(newDropdown).append($(\"<br class='\" + pvtAttrBreakName + \"'>\"));\n                } else {\n                  needResetSecondLevelDropdownOptions = true;\n                  for (u = 0, len4 = shownInAggregators.length; u < len4; u++) {\n                    attr = shownInAggregators[u];\n                    newDropdown.append($(\"<option>\").val(attr).text(attr));\n                  }\n                  pvtVals.append(newDropdown);\n                }\n              }\n            }\n            if (initialRender) {\n              pvtViewer = _this.find(\".pvtViewer\");\n              pvtViewer.val(opts.currentView || defaultOptionVal);\n              vals = opts.vals;\n              cascadeDropdownFirstLevelVals = opts.cascadeDropdownFirstLevelVals;\n              cascadeDropdownFirstLevelIndex = 0;\n              _this.find(\".pvtVals select.\" + pvtAttrFirstLevelDropdownName).each(function() {\n                $(this).val(cascadeDropdownFirstLevelVals[cascadeDropdownFirstLevelIndex]);\n                $(this).trigger('change');\n                return cascadeDropdownFirstLevelIndex++;\n              });\n              i = 0;\n              _this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n                $(this).val(vals[i]);\n                return i++;\n              });\n              initialRender = false;\n            }\n            subopts.aggregatorName = aggregator.val();\n            subopts.vals = vals;\n            subopts.cascadeDropdownFirstLevelVals = cascadeDropdownFirstLevelVals;\n            subopts.aggregator = opts.aggregators[aggregator.val()](vals);\n            subopts.renderer = opts.renderers[renderer.val()];\n            subopts.rowOrder = rowOrderArrow.data(\"order\");\n            subopts.colOrder = colOrderArrow.data(\"order\");\n            exclusions = {};\n            _this.find('input.pvtFilter').not(':checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                return exclusions[filter[0]].push(filter[1]);\n              } else {\n                return exclusions[filter[0]] = [filter[1]];\n              }\n            });\n            inclusions = {};\n            _this.find('input.pvtFilter:checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                if (inclusions[filter[0]] != null) {\n                  return inclusions[filter[0]].push(filter[1]);\n                } else {\n                  return inclusions[filter[0]] = [filter[1]];\n                }\n              }\n            });\n            subopts.filter = function(record) {\n              var excludedItems, k, ref10, ref9;\n              if (!opts.filter(record)) {\n                return false;\n              }\n              for (k in exclusions) {\n                excludedItems = exclusions[k];\n                if (ref9 = \"\" + ((ref10 = record[k]) != null ? ref10 : 'null'), indexOf.call(excludedItems, ref9) >= 0) {\n                  return false;\n                }\n              }\n              return true;\n            };\n            pivotTable.pivot(materializedInput, subopts);\n            pivotUIOptions = $.extend({}, opts, {\n              cols: subopts.cols,\n              rows: subopts.rows,\n              colOrder: subopts.colOrder,\n              rowOrder: subopts.rowOrder,\n              vals: vals,\n              cascadeDropdownFirstLevelVals: subopts.cascadeDropdownFirstLevelVals,\n              exclusions: exclusions,\n              inclusions: inclusions,\n              inclusionsInfo: inclusions,\n              aggregatorName: aggregator.val(),\n              rendererName: renderer.val()\n            });\n            _this.data(\"pivotUIOptions\", pivotUIOptions);\n            if (opts.autoSortUnusedAttrs) {\n              unusedAttrsContainer = _this.find(\"td.pvtUnused.pvtAxisContainer\");\n              $(unusedAttrsContainer).children(\"li\").sort(function(a, b) {\n                return naturalSort($(a).text(), $(b).text());\n              }).appendTo(unusedAttrsContainer);\n            }\n            pivotTable.css(\"opacity\", 1);\n            if (opts.onRefresh != null) {\n              return opts.onRefresh(pivotUIOptions);\n            }\n          };\n        })(this);\n        refresh = (function(_this) {\n          return function() {\n            pivotTable.css(\"opacity\", 0.5);\n            return setTimeout(refreshDelayed, 10);\n          };\n        })(this);\n        refresh();\n        this.find(\".pvtAxisContainer\").sortable({\n          update: function(e, ui) {\n            if (ui.sender == null) {\n              return refresh();\n            }\n          },\n          connectWith: this.find(\".pvtAxisContainer\"),\n          items: 'li',\n          placeholder: 'pvtPlaceholder'\n        });\n      } catch (error) {\n        e = error;\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        this.html(opts.localeStrings.uiRenderError);\n      }\n      return this;\n    };\n\n    /*\n    Heatmap post-processing\n     */\n    $.fn.heatmap = function(scope, opts) {\n      var colorScaleGenerator, heatmapper, i, j, l, n, numCols, numRows, ref, ref1, ref2;\n      if (scope == null) {\n        scope = \"heatmap\";\n      }\n      numRows = this.data(\"numrows\");\n      numCols = this.data(\"numcols\");\n      colorScaleGenerator = opts != null ? (ref = opts.heatmap) != null ? ref.colorScaleGenerator : void 0 : void 0;\n      if (colorScaleGenerator == null) {\n        colorScaleGenerator = function(values) {\n          var max, min;\n          min = Math.min.apply(Math, values);\n          max = Math.max.apply(Math, values);\n          return function(x) {\n            var nonRed;\n            nonRed = 255 - Math.round(255 * (x - min) / (max - min));\n            return \"rgb(255,\" + nonRed + \",\" + nonRed + \")\";\n          };\n        };\n      }\n      heatmapper = (function(_this) {\n        return function(scope) {\n          var colorScale, forEachCell, values;\n          forEachCell = function(f) {\n            return _this.find(scope).each(function() {\n              var x;\n              x = $(this).data(\"value\");\n              if ((x != null) && isFinite(x)) {\n                return f(x, $(this));\n              }\n            });\n          };\n          values = [];\n          forEachCell(function(x) {\n            return values.push(x);\n          });\n          colorScale = colorScaleGenerator(values);\n          return forEachCell(function(x, elem) {\n            return elem.css(\"background-color\", colorScale(x));\n          });\n        };\n      })(this);\n      switch (scope) {\n        case \"heatmap\":\n          heatmapper(\".pvtVal\");\n          break;\n        case \"rowheatmap\":\n          for (i = l = 0, ref1 = numRows; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {\n            heatmapper(\".pvtVal.row\" + i);\n          }\n          break;\n        case \"colheatmap\":\n          for (j = n = 0, ref2 = numCols; 0 <= ref2 ? n < ref2 : n > ref2; j = 0 <= ref2 ? ++n : --n) {\n            heatmapper(\".pvtVal.col\" + j);\n          }\n      }\n      heatmapper(\".pvtTotal.rowTotal\");\n      heatmapper(\".pvtTotal.colTotal\");\n      return this;\n    };\n\n    /*\n    Barchart post-processing\n     */\n    return $.fn.barchart = function(opts) {\n      var barcharter, i, l, numCols, numRows, ref;\n      numRows = this.data(\"numrows\");\n      numCols = this.data(\"numcols\");\n      barcharter = (function(_this) {\n        return function(scope) {\n          var forEachCell, max, min, range, scaler, values;\n          forEachCell = function(f) {\n            return _this.find(scope).each(function() {\n              var x;\n              x = $(this).data(\"value\");\n              if ((x != null) && isFinite(x)) {\n                return f(x, $(this));\n              }\n            });\n          };\n          values = [];\n          forEachCell(function(x) {\n            return values.push(x);\n          });\n          max = Math.max.apply(Math, values);\n          if (max < 0) {\n            max = 0;\n          }\n          range = max;\n          min = Math.min.apply(Math, values);\n          if (min < 0) {\n            range = max - min;\n          }\n          scaler = function(x) {\n            return 100 * x / (1.4 * range);\n          };\n          return forEachCell(function(x, elem) {\n            var bBase, bgColor, text, wrapper;\n            text = elem.text();\n            wrapper = $(\"<div>\").css({\n              \"position\": \"relative\",\n              \"height\": \"55px\"\n            });\n            bgColor = \"gray\";\n            bBase = 0;\n            if (min < 0) {\n              bBase = scaler(-min);\n            }\n            if (x < 0) {\n              bBase += scaler(x);\n              bgColor = \"darkred\";\n              x = -x;\n            }\n            wrapper.append($(\"<div>\").css({\n              \"position\": \"absolute\",\n              \"bottom\": bBase + \"%\",\n              \"left\": 0,\n              \"right\": 0,\n              \"height\": scaler(x) + \"%\",\n              \"background-color\": bgColor\n            }));\n            wrapper.append($(\"<div>\").text(text).css({\n              \"position\": \"relative\",\n              \"padding-left\": \"5px\",\n              \"padding-right\": \"5px\"\n            }));\n            return elem.css({\n              \"padding\": 0,\n              \"padding-top\": \"5px\",\n              \"text-align\": \"center\"\n            }).html(wrapper);\n          });\n        };\n      })(this);\n      for (i = l = 0, ref = numRows; 0 <= ref ? l < ref : l > ref; i = 0 <= ref ? ++l : --l) {\n        barcharter(\".pvtVal.row\" + i);\n      }\n      barcharter(\".pvtTotal.colTotal\");\n      return this;\n    };\n  });\n\n}).call(this);\n\n//# sourceMappingURL=pivot.js.map\n"]}