{"version":3,"sources":["pivot.coffee","pivot.min.js"],"names":["callWithJQuery","indexOf","item","i","l","this","length","slice","bind","fn","me","apply","arguments","hasProp","hasOwnProperty","pivotModule","exports","module","require","define","amd","jQuery","$","PivotData","addSeparators","aggregatorTemplates","aggregators","cellRenderers","dayNamesEn","derivers","getSort","locales","mthNamesEn","naturalSort","numberFormat","pivotTableRenderer","rd","renderers","rx","rz","sortAs","usFmt","usFmtInt","usFmtPct","zeroPad","nStr","thousandsSep","decimalSep","rgx","x","x1","x2","split","test","replace","opts","defaults","digitsAfterDecimal","scaler","prefix","suffix","extend","result","isNaN","isFinite","toFixed","count","formatter","data","rowKey","colKey","push","value","format","uniques","arg","attr","uniq","record","ref","call","numInputs","sum","parseFloat","extremes","mode","val","sorter","sorters","ref1","ref2","Math","quantile","q","vals","sort","a","b","floor","ceil","runningStat","ddof","n","m","s","m_new","sqrt","sumOverSum","denom","num","sumNum","sumDenom","sumOverSumBound80","upper","sign","fractionOf","wrapped","type","selector","total","row","col","inner","getAggregator","countUnique","f","listUnique","join","max","min","first","last","median","average","stdev","tpl","Count","Count Unique Values","List Unique Values","Sum","Integer Sum","Average","Median","Sample Variance","Sample Standard Deviation","Minimum","Maximum","First","Last","Sum over Sum","80% Upper Bound","80% Lower Bound","Sum as Fraction of Total","Sum as Fraction of Rows","Sum as Fraction of Columns","Count as Fraction of Total","Count as Fraction of Rows","Count as Fraction of Columns","Table","Table Barchart","barchart","Heatmap","heatmap","Row Heatmap","Col Heatmap","text","document","createTextNode","byType","def","en","localeStrings","renderError","computeError","uiRenderError","selectAll","selectNone","tooMany","filterResults","cancel","totals","vs","by","number","substr","bin","binWidth","dateFormat","formatString","utcOutput","mthNames","dayNames","utc","date","Date","parse","p","_this","as","bs","a1","b1","nas","nbs","String","match","shift","order","l_mapping","mapping","toLowerCase","isFunction","input","ref3","ref4","ref5","ref6","ref7","ref8","ref9","getRowKeys","getColKeys","sortKeys","arrSort","aggregator","aggregatorName","colAttrs","cols","rowAttrs","rows","valAttrs","rowOrder","colOrder","derivedAttributes","filter","tree","rowKeys","colKeys","rowTotals","colTotals","allTotal","sorted","forEachRecord","processRecord","addRecord","compactRecord","j","k","len1","results","results1","tblCols","isEmptyObject","v","isArray","each","Error","prototype","forEachMatchingRecord","criteria","callback","attrs","sortersArr","comparison","r","c","flatColKey","flatRowKey","len2","fromCharCode","agg","pivotUtilities","pivotData","getClickHandler","spanSize","tbody","td","th","thead","totalAggregator","tr","txt","table","clickCallback","typeCellRenderer","headCellRenderer","dataCellRenderer","rowValues","colValues","filters","e","createElement","className","arr","len","noDraw","stop","parseInt","setAttribute","appendChild","innerHTML","onclick","textContent","pivot","inputOpts","locale","localeDefaults","dataClass","renderer","rendererOptions","error","console","stack","html","hasChildNodes","removeChild","lastChild","append","pivotUI","overwrite","attrLength","attrValues","colOrderArrow","existingOpts","fn1","initialRender","len3","materializedInput","o","ordering","pivotTable","recordsProcessed","refresh","refreshDelayed","rendererControl","rowOrderArrow","shownAttributes","tr1","tr2","uiTable","unused","unusedAttrsVerticalAutoCutoff","unusedAttrsVerticalAutoOverride","hiddenAttributes","menuLimit","exclusions","inclusions","unusedAttrsVertical","autoSortUnusedAttrs","onRefresh","base","class","addClass","appendTo","attrElem","checkContainer","closeFilterBox","controls","filterItem","filterItemExcluded","finalButtons","hasExcludedItem","placeholder","triangleLink","valueCount","valueList","values","hide","accept","accept_gen","trim","accepted","real_filter","substring","startsWith","find","parent","show","prop","toggleClass","removeClass","left","top","currentTarget","position","css","key_a_to_z","rowSymbol","colSymbol","next","value_a_to_z","value_z_to_a","role","prepend","inArray","rendererName","len4","newDropdown","numInputsToProcess","pivotUIOptions","pvtVals","subopts","t","u","unusedAttrsContainer","remove","not","excludedItems","inclusionsInfo","children","setTimeout","sortable","update","ui","sender","connectWith","items","scope","colorScaleGenerator","heatmapper","numCols","numRows","nonRed","round","colorScale","forEachCell","elem","barcharter","wrapper","height","bottom","right","background-color","padding-left","padding-right","padding","padding-top","text-align"],"mappings":"CAAA,WAAA,GAAAA,GAAAC,KAAAA,SAAA,SAAAC,GAAA,IAAA,GAAAC,GAAA,EAAAC,EAAAC,KAAAC,OAAAH,EAAAC,EAAAD,IAAA,GAAAA,IAAAE,OAAAA,KAAAF,KAAAD,EAAA,MAAAC,EAAA,WCGII,KAAWA,MACXC,EAAO,SAASC,EAAIC,GAAK,MAAO,YAAY,MAAOD,GAAGE,MAAMD,EAAIE,aAChEC,KAAaC,gBDLjBd,EAAiB,SAACe,GACd,MAAqB,gBAAXC,UAAyC,gBAAVC,QACrCF,EAAYG,QAAQ,WACC,kBAAVC,SAAyBA,OAAOC,IAC3CD,QAAQ,UAAWJ,GAGnBA,EAAYM,UAEL,SAACC,GAEZ,GAAAC,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,CC2rDA,ODvrDApB,GAAgB,SAACqB,EAAMC,EAAcC,GACjC,GAAAC,GAAAC,EAAAC,EAAAC,CAKiD,KALjDN,GAAQ,GACRI,EAAIJ,EAAKO,MAAM,KACfF,EAAKD,EAAE,GACPE,EAAQF,EAAE3C,OAAS,EAAQyC,EAAaE,EAAE,GAAQ,GAClDD,EAAM,eACiDA,EAAIK,KAAKH,IAAhEA,EAAKA,EAAGI,QAAQN,EAAK,KAAOF,EAAe,KAC3C,OAAOI,GAAKC,GAEhBjB,EAAe,SAACqB,GACZ,GAAAC,ECqBF,ODrBEA,IACIC,mBAAoB,EAAGC,OAAQ,EAC/BZ,aAAc,IAAKC,WAAY,IAC/BY,OAAQ,GAAIC,OAAQ,IACxBL,EAAOjC,EAAEuC,UAAWL,EAAUD,GAC9B,SAACN,GACG,GAAAa,EAAA,OAAaC,OAAMd,KAAUe,SAASf,GAA/B,IACPa,EAAStC,GAAe+B,EAAKG,OAAOT,GAAGgB,QAAQV,EAAKE,oBAAqBF,EAAKT,aAAcS,EAAKR,YAC1F,GAAGQ,EAAKI,OAAOG,EAAOP,EAAKK,UAG1CnB,EAAQP,IACRQ,EAAWR,GAAauB,mBAAoB,IAC5Cd,EAAWT,GAAauB,mBAAmB,EAAGC,OAAQ,IAAKE,OAAQ,MAEnEnC,GACIyC,MAAO,SAACC,GC4BR,MAHiB,OAAbA,IDzBIA,EAAUzB,GAAa,WC6B7B,MD7BmC,UAAC0B,EAAMC,EAAQC,GC8BhD,OD7BAJ,MAAO,EACPK,KAAO,WC+BH,MD/BMlE,MAAC6D,SACXM,MAAO,WCiCH,MDjCMnE,MAAC6D,OACXO,OAAQN,MAEZO,QAAS,SAACjE,EAAI0D,GCyCd,MAHiB,OAAbA,IDtCUA,EAAUzB,GAAa,SAACiC,GAAW,GAAAC,EC4C/C,OD5CqCA,GAADD,EAAA,GAAW,SAACP,EAAMC,EAAQC,GC6C5D,OD5CAO,QACAN,KAAM,SAACO,GAAW,GAAAC,EAAA,IAAAA,EAA4BD,EAAOF,GAAP3E,EAAA+E,KAAoB3E,KAACwE,KAArBE,GAAA,ECgDxC,MDhDY1E,MAACwE,KAAKN,KAAKO,EAAOF,KACpCJ,MAAO,WCmDH,MDnDM/D,GAAGJ,KAACwE,OACdJ,OAAQN,EACRc,UAAc,MAAAL,EAAW,EAAO,MAEpCM,IAAK,SAACf,GC2DN,MAHiB,OAAbA,IDxDEA,EAAU1B,GAAU,SAACkC,GAAW,GAAAC,EC8DpC,OD9D0BA,GAADD,EAAA,GAAW,SAACP,EAAMC,EAAQC,GC+DjD,OD9DAY,IAAK,EACLX,KAAM,SAACO,GAAW,IAAwCf,MAAMoB,WAAWL,EAAOF,KCiE5E,MDjEYvE,MAAC6E,KAAOC,WAAWL,EAAOF,KAC5CJ,MAAO,WCoEH,MDpEMnE,MAAC6E,KACXT,OAAQN,EACRc,UAAc,MAAAL,EAAW,EAAO,MAEpCQ,SAAU,SAACC,EAAMlB,GC4EjB,MAHiB,OAAbA,IDzEaA,EAAU1B,GAAU,SAACkC,GAAW,GAAAC,EC+E/C,OD/EqCA,GAADD,EAAA,GAAW,SAACP,EAAMC,EAAQC,GCgF5D,OD/EAgB,IAAK,KACLC,OAAQzD,EAAA,MAAAsC,EAAQA,EAAMoB,QAAA,OAASZ,GAC/BL,KAAM,SAACO,GACH,GAAAC,GAAAU,EAAAC,EAAAzC,CAKA,IALAA,EAAI6B,EAAOF,GACC,QAATS,GAAgB,QAAhBA,IACCpC,EAAIkC,WAAWlC,GACRc,MAAMd,KAAO5C,KAACiF,IAAMK,KAAKN,GAAMpC,EAAX,OAAA8B,EAAA1E,KAAAiF,KAAAP,EAAqB9B,KACzC,UAARoC,GAAiChF,KAACkF,OAAOtC,EAAR,OAAAwC,EAAApF,KAAAiF,KAAAG,EAAkBxC,IAAM,IAApC5C,KAACiF,IAAMrC,GACpB,SAARoC,GAAiChF,KAACkF,OAAOtC,EAAR,OAAAyC,EAAArF,KAAAiF,KAAAI,EAAkBzC,IAAM,EC0FxD,MD1FoB5C,MAACiF,IAAMrC,GACnCuB,MAAO,WC8FH,MD9FMnE,MAACiF,KACXb,OAAQ,SAACxB,GAAM,MAAGc,OAAMd,GAAQA,EAAOkB,EAAUlB,IACjDgC,UAAc,MAAAL,EAAW,EAAO,MAEpCgB,SAAU,SAACC,EAAG1B,GC4Gd,MAHiB,OAAbA,IDzGUA,EAAU1B,GAAU,SAACkC,GAAW,GAAAC,EC+G5C,OD/GkCA,GAADD,EAAA,GAAW,SAACP,EAAMC,EAAQC,GCgHzD,OD/GAwB,QACAvB,KAAM,SAACO,GACH,GAAA7B,EACA,IADAA,EAAIkC,WAAWL,EAAOF,KACDb,MAAMd,GCkHzB,MDlHF5C,MAACyF,KAAKvB,KAAKtB,IACfuB,MAAO,WACH,GAAArE,EAAA,OAA+B,KAAhBE,KAACyF,KAAKxF,OAAd,MACPD,KAACyF,KAAKC,KAAK,SAACC,EAAEC,GCwHZ,MDxHkBD,GAAEC,IACtB9F,GAAKE,KAACyF,KAAKxF,OAAO,GAAGuF,GACbxF,KAACyF,KAAKH,KAAKO,MAAM/F,IAAME,KAACyF,KAAKH,KAAKQ,KAAKhG,KAAK,IACxDsE,OAAQN,EACRc,UAAc,MAAAL,EAAW,EAAO,MAEpCwB,YAAa,SAACf,EAAagB,EAAQlC,GCuInC,MATY,OAARkB,ID9HUA,EAAK,QCiIP,MAARgB,IDjIuBA,EAAK,GCoIf,MAAblC,IDpI+BA,EAAU1B,GAAU,SAACkC,GAAW,GAAAC,EC0IjE,OD1IuDA,GAADD,EAAA,GAAW,SAACP,EAAMC,EAAQC,GC2I9E,OD1IAgC,EAAG,EAAKC,EAAG,EAAKC,EAAG,EACnBjC,KAAM,SAACO,GACH,GAAA2B,GAAAxD,CACA,IADAA,EAAIkC,WAAWL,EAAOF,KACZb,MAAMd,GAEhB,MADA5C,MAACiG,GAAK,EACG,IAANjG,KAACiG,EACAjG,KAACkG,EAAItD,GAELwD,EAAQpG,KAACkG,GAAKtD,EAAI5C,KAACkG,GAAGlG,KAACiG,EACvBjG,KAACmG,EAAInG,KAACmG,GAAKvD,EAAI5C,KAACkG,IAAItD,EAAIwD,GACxBpG,KAACkG,EAAIE,IACbjC,MAAO,WACH,GAAW,SAARa,EACQ,MAAS,KAANhF,KAACiG,EAAY,IAASjG,KAACkG,CACrC,IAAYlG,KAACiG,GAAKD,EAAlB,MAAO,EACP,QAAOhB,GAAP,IACS,MC0JL,MD1JkBhF,MAACmG,GAAGnG,KAACiG,EAAED,EAD7B,KAES,QC2JL,MD3JkBV,MAAKe,KAAKrG,KAACmG,GAAGnG,KAACiG,EAAED,MAC3C5B,OAAQN,EACRc,UAAc,MAAAL,EAAW,EAAO,MAEpC+B,WAAY,SAACxC,GCoKb,MAHiB,OAAbA,IDjKSA,EAAU1B,GAAU,SAACkC,GAAiB,GAAAiC,GAAAC,CCuKjD,ODvKiCA,GAAAlC,EAAA,GAAKiC,EAAAjC,EAAA,GAAW,SAACP,EAAMC,EAAQC,GCwK9D,ODvKAwC,OAAQ,EACRC,SAAU,EACVxC,KAAM,SAACO,GAEH,GAD8Cf,MAAMoB,WAAWL,EAAO+B,OAAtExG,KAACyG,QAAY3B,WAAWL,EAAO+B,MACe9C,MAAMoB,WAAWL,EAAO8B,KC2KpE,MD3KFvG,MAAC0G,UAAY5B,WAAWL,EAAO8B,KACnCpC,MAAO,WC8KH,MD9KMnE,MAACyG,OAAOzG,KAAC0G,UACnBtC,OAAQN,EACRc,UAAc,MAAA4B,GAAS,MAAAD,EAAY,EAAO,MAE9CI,kBAAmB,SAACC,EAAY9C,GCyLhC,MANa,OAAT8C,IDnLgBA,GAAM,GCsLT,MAAb9C,IDtL4BA,EAAU1B,GAAU,SAACkC,GAAiB,GAAAiC,GAAAC,CC4LpE,OD5LoDA,GAAAlC,EAAA,GAAKiC,EAAAjC,EAAA,GAAW,SAACP,EAAMC,EAAQC,GC6LjF,OD5LAwC,OAAQ,EACRC,SAAU,EACVxC,KAAM,SAACO,GAEH,GAD8Cf,MAAMoB,WAAWL,EAAO+B,OAAtExG,KAACyG,QAAY3B,WAAWL,EAAO+B,MACe9C,MAAMoB,WAAWL,EAAO8B,KCgMpE,MDhMFvG,MAAC0G,UAAY5B,WAAWL,EAAO8B,KACnCpC,MAAO,WACH,GAAA0C,ECoMA,ODpMAA,GAAUD,EAAW,MACpB,iBAAkB5G,KAAC0G,SAAW1G,KAACyG,OAAOzG,KAAC0G,SAAW,mBAAmBG,EAClEvB,KAAKe,KAAK,kBAAoBrG,KAAC0G,SAAS1G,KAAC0G,UAAa1G,KAACyG,QAAQ,EAAIzG,KAACyG,OAAQzG,KAAC0G,WAAa1G,KAAC0G,SAAS1G,KAAC0G,aACpG,EAAI,kBAAkB1G,KAAC0G,WAChCtC,OAAQN,EACRc,UAAc,MAAA4B,GAAS,MAAAD,EAAY,EAAO,MAE9CO,WAAY,SAACC,EAASC,EAAclD,GC4MpC,MANY,OAARkD,IDtMkBA,EAAK,SCyMV,MAAblD,IDzMgCA,EAAUxB,GAAa,WAAU,GAAAM,EC+MnE,OD/M0DA,GAAA,GAAArC,UAAAN,OAAAC,EAAAyE,KAAApE,UAAA,MAAS,SAACwD,EAAMC,EAAQC,GCgNhF,OD/MAgD,UAAWC,cAAcC,KAAKnD,MAAWoD,QAAQnD,IAAS+C,GAC1DK,MAAON,EAAAzG,MAAA,KAAQsC,GAAMmB,EAAMC,EAAQC,GACnCC,KAAM,SAACO,GCqNH,MDrNczE,MAACqH,MAAMnD,KAAKO,IAC9BL,OAAQN,EACRK,MAAO,WCuNH,MDvNMnE,MAACqH,MAAMlD,QAAUJ,EAAKuD,cAALhH,MAAAyD,EAAmB/D,KAACiH,UAAaI,MAAMlD,SAClES,UAAWmC,EAAAzG,MAAA,KAAQsC,KAAQgC,eAEnCxD,EAAoBmG,YAAc,SAACC,GC6NjC,MD7NuCpG,GAAoBiD,QAAQ,SAAEzB,GC8NnE,MD9NyEA,GAAE3C,QAASuH,IACxFpG,EAAoBqG,WAAc,SAACtB,GCiOjC,MDjOuC/E,GAAoBiD,QAAQ,SAAEzB,GCkOnE,MDlOyEA,GAAE8E,KAAKvB,IAAK,SAAEvD,GCoOvF,MDpO2FA,MAC/FxB,EAAoBuG,IAAc,SAACH,GCuOjC,MDvOuCpG,GAAoB2D,SAAS,MAAOyC,IAC7EpG,EAAoBwG,IAAc,SAACJ,GCyOjC,MDzOuCpG,GAAoB2D,SAAS,MAAOyC,IAC7EpG,EAAoByG,MAAc,SAACL,GC2OjC,MD3OuCpG,GAAoB2D,SAAS,QAASyC,IAC/EpG,EAAoB0G,KAAc,SAACN,GC6OjC,MD7OuCpG,GAAoB2D,SAAS,OAAQyC,IAC9EpG,EAAoB2G,OAAc,SAACP,GC+OjC,MD/OuCpG,GAAoBmE,SAAS,GAAKiC,IAC3EpG,EAAoB4G,QAAc,SAACR,GCiPjC,MDjPuCpG,GAAoB2E,YAAY,OAAQ,EAAGyB,IACpFpG,EAAmB,OAAe,SAAC4E,EAAMwB,GCmPvC,MDnP6CpG,GAAoB2E,YAAY,MAAOC,EAAMwB,IAC5FpG,EAAoB6G,MAAc,SAACjC,EAAMwB,GCqPvC,MDrP6CpG,GAAoB2E,YAAY,QAASC,EAAMwB,IAG9FnG,EAAiB,SAAC6G,GCqPhB,ODpPEC,MAAwBD,EAAIrE,MAAMxB,GAClC+F,sBAAwBF,EAAIX,YAAYlF,GACxCgG,qBAAwBH,EAAIT,WAAW,MACvCa,IAAwBJ,EAAIrD,IAAIzC,GAChCmG,cAAwBL,EAAIrD,IAAIxC,GAChCmG,QAAwBN,EAAIF,QAAQ5F,GACpCqG,OAAwBP,EAAIH,OAAO3F,GACnCsG,kBAAwBR,EAAG,OAAK,EAAG9F,GACnCuG,4BAA6BT,EAAID,MAAM,EAAG7F,GAC1CwG,QAAwBV,EAAIN,IAAIxF,GAChCyG,QAAwBX,EAAIP,IAAIvF,GAChC0G,MAAwBZ,EAAIL,MAAMzF,GAClC2G,KAAwBb,EAAIJ,KAAK1F,GACjC4G,eAAwBd,EAAI5B,WAAWlE,GACvC6G,kBAAwBf,EAAIvB,mBAAkB,EAAMvE,GACpD8G,kBAAwBhB,EAAIvB,mBAAkB,EAAOvE,GACrD+G,2BAAgCjB,EAAIpB,WAAWoB,EAAIrD,MAAS,QAASvC,GACrE8G,0BAAgClB,EAAIpB,WAAWoB,EAAIrD,MAAS,MAASvC,GACrE+G,6BAAgCnB,EAAIpB,WAAWoB,EAAIrD,MAAS,MAASvC,GACrEgH,6BAAgCpB,EAAIpB,WAAWoB,EAAIrE,QAAS,QAASvB,GACrEiH,4BAAgCrB,EAAIpB,WAAWoB,EAAIrE,QAAS,MAASvB,GACrEkH,+BAAgCtB,EAAIpB,WAAWoB,EAAIrE,QAAS,MAASvB,KAtBjDlB,GAwBxBY,GACIyH,MAAkB,SAAC1F,EAAMb,GCuPzB,MDvPoCpB,GAAmBiC,EAAMb,IAC7DwG,iBAAkB,SAAC3F,EAAMb,GCyPzB,MDzPkCjC,GAAEa,EAAmBiC,EAAMb,IAAOyG,YACpEC,QAAkB,SAAC7F,EAAMb,GC2PzB,MD3PkCjC,GAAEa,EAAmBiC,EAAMb,IAAO2G,QAAQ,UAAc3G,IAC1F4G,cAAkB,SAAC/F,EAAMb,GC6PzB,MD7PkCjC,GAAEa,EAAmBiC,EAAMb,IAAO2G,QAAQ,aAAc3G,IAC1F6G,cAAkB,SAAChG,EAAMb,GC+PzB,MD/PkCjC,GAAEa,EAAmBiC,EAAMb,IAAO2G,QAAQ,aAAc3G,KAG9F5B,GACI0I,KAAM,SAAC7F,GCgQP,MDhQiB8F,UAASC,eAAe/F,IACzCgG,OAAQ,SAACjH,EAAMkH,GCkQf,MDlQuB,UAACjG,EAAO6C,GCmQ7B,ODnQuC9D,EAAK8D,IAASoD,GAAO9I,EAAc0I,MAAM1J,MAAMN,KAAMO,cAElGmB,GACI2I,IACIhJ,YAAaA,EACbW,UAAWA,EACXsI,eACIC,YAAa,sDACbC,aAAc,sDACdC,cAAe,iDACfC,UAAW,aACXC,WAAY,cACZC,QAAS,qBACTC,cAAe,gBACfvK,MAAO,QACPwK,OAAQ,SACRC,OAAQ,SACRC,GAAI,KACJC,GAAI,QAGhBtJ,GAAc,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,OAChFJ,GAAc,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,OAClDgB,EAAU,SAAC2I,GCuQT,ODvQqB,IAAIA,GAAQC,UAAU,IAE7C3J,GACI4J,IAAK,SAAChE,EAAKiE,GCwQX,MDxQwB,UAAC5G,GCyQvB,MDzQkCA,GAAO2C,GAAO3C,EAAO2C,GAAOiE,IAChEC,WAAY,SAAClE,EAAKmE,EAAcC,EAAiBC,EAAqBC,GAClE,GAAAC,ECsRJ,OAViB,OAAbH,ID7Q4BA,GAAU,GCgR1B,MAAZC,IDhR6CA,EAAS9J,GCmR1C,MAAZ+J,IDnRkEA,EAASnK,GAC3EoK,EAASH,EAAe,MAAW,GACnC,SAAC/G,GACG,GAAAmH,EACA,OADAA,GAAO,GAAIC,MAAKA,KAAKC,MAAMrH,EAAO2C,KAC/B1D,MAAMkI,GAAkB,GAC3BL,EAAatI,QAAQ,QAAS,SAACiD,EAAG6F,GAC9B,OAAOA,GAAP,IACS,ICyRb,MDzRsBH,GAAK,MAAMD,EAAI,aADjC,KAES,IC0Rb,MD1RsBpJ,GAAQqJ,EAAK,MAAMD,EAAI,WAAU,EAFnD,KAGS,IC2Rb,MD3RsBF,GAASG,EAAK,MAAMD,EAAI,WAH1C,KAIS,IC4Rb,MD5RsBpJ,GAAQqJ,EAAK,MAAMD,EAAI,UAJzC,KAKS,IC6Rb,MD7RsBD,GAASE,EAAK,MAAMD,EAAI,SAL1C,KAMS,IC8Rb,MD9RsBC,GAAK,MAAMD,EAAI,QANjC,KAOS,IC+Rb,MD/RsBpJ,GAAQqJ,EAAK,MAAMD,EAAI,WAPzC,KAQS,ICgSb,MDhSsBpJ,GAAQqJ,EAAK,MAAMD,EAAI,aARzC,KASS,ICiSb,MDjSsBpJ,GAAQqJ,EAAK,MAAMD,EAAI,aATzC,SC4SJ,MDlSa,IAAMI,QAE/B9J,EAAK,eACLF,EAAK,KACLG,EAAK,KACLN,EAAc,SAAAoK,GCuSZ,MDvSY,UAACC,EAAIC,GAEf,GAAAvG,GAAAwG,EAAAvG,EAAAwG,EAAAC,EAAAC,CAAA,IAAa,MAAAJ,GAAY,MAAAD,EAAzB,QACA,IAAa,MAAAA,GAAY,MAAAC,EAAzB,MAAQ,EAGR,IAA0B,gBAAND,IAAmBvI,MAAMuI,GAA7C,QACA,IAA0B,gBAANC,IAAmBxI,MAAMwI,GAA7C,MAAQ,EAKR,IAFAG,GAAOJ,EACPK,GAAOJ,EACMG,EAAMC,EAAnB,QACA,IAAaD,EAAMC,EAAnB,MAAQ,EAGR,IAA0B,gBAANL,IAAgC,gBAANC,GAA9C,QACA,IAA0B,gBAANA,IAAgC,gBAAND,GAA9C,MAAQ,EACR,IAA0B,gBAANA,IAAgC,gBAANC,GAA9C,MAAQ,EAGR,IAAaxI,MAAM4I,KAAa5I,MAAM2I,GAAtC,QACA,IAAa3I,MAAM2I,KAAa3I,MAAM4I,GAAtC,MAAQ,EAKR,IAFA3G,EAAI4G,OAAON,GACXrG,EAAI2G,OAAOL,GACCvG,IAAKC,EAAjB,MAAO,EACP,KAAwC7D,EAAGiB,KAAK2C,KAAO5D,EAAGiB,KAAK4C,GAA/D,MAAWD,GAAIC,EAAO,IAKtB,KAFAD,EAAIA,EAAE6G,MAAMvK,GACZ2D,EAAIA,EAAE4G,MAAMvK,GACN0D,EAAE1F,QAAW2F,EAAE3F,QAGjB,GAFAkM,EAAKxG,EAAE8G,QACPL,EAAKxG,EAAE6G,QACJN,IAAMC,EACL,MAAGrK,GAAGiB,KAAKmJ,IAAQpK,EAAGiB,KAAKoJ,GAChBD,EAAGlJ,QAAQf,EAAI,MAAQkK,EAAGnJ,QAAQf,EAAI,MAElCiK,EAAKC,EAAQ,IACpC,OAAOzG,GAAE1F,OAAS2F,EAAE3F,SAzCVD,MA2CdmC,EAAS,SAACuK,GACN,GAAA5M,GAAA6M,EAAAC,EAAAhK,CAAAgK,MACAD,IACA,KAAA7M,IAAA4M,GC2TA9J,EAAI8J,EAAM5M,GD1TN8M,EAAQhK,GAAK9C,EACiC,gBAAL8C,KAAzC+J,EAAU/J,EAAEiK,eAAiB/M,EC+TnC,OD9TE,UAAC6F,EAAGC,GACA,MAAG,OAAAgH,EAAAjH,IAAgB,MAAAiH,EAAAhH,GAAiBgH,EAAQjH,GAAKiH,EAAQhH,GACjD,MAAAgH,EAAAjH,MACA,MAAAiH,EAAAhH,GAAiB,EACjB,MAAA+G,EAAAhH,IAAkB,MAAAgH,EAAA/G,GAAmB+G,EAAUhH,GAAKgH,EAAU/G,GAC9D,MAAA+G,EAAAhH,MACA,MAAAgH,EAAA/G,GAAmB,EACtBhE,EAAY+D,EAAEC,KAE3BnE,EAAU,SAAC0D,EAASZ,GAChB,GAAAmB,EAAA,IAAG,MAAAP,EACC,GAAGlE,EAAE6L,WAAW3H,IAEZ,GADAO,EAAOP,EAAQZ,GACAtD,EAAE6L,WAAWpH,GAA5B,MAAOA,OACN,IAAG,MAAAP,EAAAZ,GACJ,MAAOY,GAAQZ,EACvB,OAAO3C,IAMLV,EAAA,WACW,QAAAA,GAAC6L,EAAO7J,GACjB,GAAAwB,GAAAU,EAAAC,EAAA2H,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,CC6UQ,OAARpK,ID9UiBA,MCiVrBlD,KAAKsH,cAAgBnH,EAAKH,KAAKsH,cAAetH,MAC9CA,KAAKuN,WAAapN,EAAKH,KAAKuN,WAAYvN,MACxCA,KAAKwN,WAAarN,EAAKH,KAAKwN,WAAYxN,MACxCA,KAAKyN,SAAWtN,EAAKH,KAAKyN,SAAUzN,MACpCA,KAAK0N,QAAUvN,EAAKH,KAAK0N,QAAS1N,MDpV9BA,KAAC+M,MAAQA,EACT/M,KAAC2N,WAAD,OAAAjJ,EAAAxB,EAAAyK,YAAAjJ,EAAgCtD,EAAoByC,UACpD7D,KAAC4N,eAAD,OAAAxI,EAAAlC,EAAA0K,gBAAAxI,EAAwC,QACxCpF,KAAC6N,SAAD,OAAAxI,EAAAnC,EAAA4K,MAAAzI,KACArF,KAAC+N,SAAD,OAAAf,EAAA9J,EAAA8K,MAAAhB,KACAhN,KAACiO,SAAD,OAAAhB,EAAA/J,EAAAuC,MAAAwH,KACAjN,KAACmF,QAAD,OAAA+H,EAAAhK,EAAAiC,SAAA+H,KACAlN,KAACkO,SAAD,OAAAf,EAAAjK,EAAAgL,UAAAf,EAA4B,aAC5BnN,KAACmO,SAAD,OAAAf,EAAAlK,EAAAiL,UAAAf,EAA4B,aAC5BpN,KAACoO,kBAAD,OAAAf,EAAAnK,EAAAkL,mBAAAf,KACArN,KAACqO,OAAD,OAAAf,EAAApK,EAAAmL,QAAAf,EAAwB,WCsV1B,ODtV8B,GAC5BtN,KAACsO,QACDtO,KAACuO,WACDvO,KAACwO,WACDxO,KAACyO,aACDzO,KAAC0O,aACD1O,KAAC2O,SAAW3O,KAAC2N,WAAW3N,YACxBA,KAAC4O,QAAS,EAGV1N,EAAU2N,cAAc7O,KAAC+M,MAAO/M,KAACoO,kBAAmB,SAAApC,GCsVtD,MDtVsD,UAACvH,GACjD,GAA0BuH,EAACqC,OAAO5J,GCuVpC,MDvVEuH,GAAC8C,cAAcrK,KADiCzE,OC8jB1D,MD1jBEkB,GAAC2N,cAAgB,SAAC9B,EAAOqB,EAAmB5G,GACxC,GAAAuH,GAAAC,EAAAlP,EAAAmP,EAAAC,EAAAnP,EAAAoP,EAAA1K,EAAAC,EAAA0K,EAAAC,EAAAC,CAQA,IAPIP,EADD9N,EAAEsO,cAAcnB,GACH5G,EAEA,SAAC/C,GACT,GAAAyK,GAAAxK,EAAA8K,CAAA,KAAAN,IAAAd,GC6VNoB,EAAIpB,EAAkBc,GD7VhBzK,EAAOyK,GAAP,OAAAxK,EAAA8K,EAAA/K,IAAAC,EAAwBD,EAAOyK,ECgWvC,OD/VQ1H,GAAE/C,IAGPxD,EAAE6L,WAAWC,GCgWlB,MD/VMA,GAAMgC,EACL,IAAG9N,EAAEwO,QAAQ1C,GAAb,CACD,GAAG9L,EAAEwO,QAAQ1C,EAAM,IAAnB,CACIqC,ICgWR,KDhWQtP,IAAAiN,GCiWN,GAAKvM,EAAQmE,KAAKoI,EAAOjN,KACzBkP,EAAgBjC,EAAMjN,GDlWuBA,EAAI,GCmWjD,CDlWU2E,KACAC,EAAAqI,EAAA,EAAA,KAAAkC,IAAAvK,GCuWHlE,EAAQmE,KAAKD,EAAKuK,KACvBC,EAAIxK,EAAIuK,GDxWAxK,EAAOyK,GAAKF,EAAcC,GC2WpCG,GAAQlL,KD1WE6K,EAAUtK,IC4WtB,MAAO2K,GAGP,ID7WQC,KAAAtP,EAAA,EAAAoP,EAAApC,EAAA9M,OAAAF,EAAAoP,EAAApP,IC8WN0E,EAASsI,EAAMhN,GACfsP,EAASnL,KD/WH6K,EAAUtK,GCiXlB,OAAO4K,GDhXF,GAAGtC,YAAiB/L,QCuX3B,MDtXMsO,MACArO,EAAE,kBAAmB8L,GAAO2C,KAAK,SAAC5P,GCmXtC,MDnX4CwP,GAAQpL,KAAKjD,EAAEjB,MAAMgK,UAC7D/I,EAAE,aAAc8L,GAAO2C,KAAK,SAAC5P,GCyXjC,MDxXQ2E,MACAxD,EAAE,KAAMjB,MAAM0P,KAAK,SAACT,GCqX1B,MDrXgCxK,GAAO6K,EAAQL,IAAMhO,EAAEjB,MAAMgK,SACvD+E,EAAUtK,IAEd,MAAM,IAAIkL,OAAM,yBC2X1BzO,EAAU0O,UDzXRC,sBAAuB,SAACC,EAAUC,GC0XlC,MDzXI7O,GAAU2N,cAAc7O,KAAC+M,MAAO/M,KAACoO,kBAAmB,SAAApC,GC0XtD,MD1XsD,UAACvH,GACjD,GAAAyK,GAAAxK,EAAA8K,CAAA,IAAcxD,EAACqC,OAAO5J,GAAtB,CACA,IAAAyK,IAAAY,GACI,GC6XNN,EAAIM,EAASZ,GD7XGM,KAAK,OAAA9K,EAAAD,EAAAyK,IAAAxK,EAAa,QAA5B,MCkYR,ODjYIqL,GAAStL,MAJuCzE,QC0Y1DkB,EAAU0O,UDpYRlC,QAAS,SAACsC,GACN,GAAArK,GAAAsK,CC8YJ,OD9YIA,GAAA,WCsYF,GAAIlQ,GAAGoP,EAAMC,CAEb,KDxYgBA,KAAArP,EAAA,EAAAoP,EAAAa,EAAA/P,OAAAF,EAAAoP,EAAApP,ICyYd4F,EAAIqK,EAAMjQ,GACVqP,EAAQlL,KD1YMzC,EAAQzB,KAACmF,QAASQ,GC4YlC,OAAOyJ,IACNzK,KAAK3E,MD5YJ,SAAC2F,EAAEC,GACC,GAAAsK,GAAApQ,EAAAoF,CAAA,KAAApF,IAAAmQ,GC+YJ,GAAKzP,EAAQmE,KAAKsL,EAAYnQ,KAC9BoF,EAAS+K,EAAWnQ,GD/YZoQ,EAAahL,EAAOS,EAAE7F,GAAI8F,EAAE9F,IACO,IAAdoQ,GAArB,MAAOA,EACX,OAAO,KCuZjBhP,EAAU0O,UDrZRnC,SAAU,WACN,GAAA+B,EAAA,KAAOxP,KAAC4O,OAAR,CAGI,OAFA5O,KAAC4O,QAAS,EACVY,EAAI,SAAAxD,GCuZR,MDvZQ,UAACmE,EAAEC,GCwZT,MDxZepE,GAAC1E,cAAc6I,EAAEC,GAAGjM,UAA7BnE,MACGA,KAACkO,UAAR,IACS,eAAqBlO,KAACuO,QAAQ7I,KAAK,SAAAsG,GC4Z5C,MD5Z4C,UAACrG,EAAEC,GC6Z7C,MD7ZoDhE,GAAY4N,EAAE7J,MAAO6J,EAAE5J,SAAjC5F,MAAnC,MADT,KAES,eAAoBA,KAACuO,QAAQ7I,KAAK,SAAAsG,GCka3C,MDla2C,UAACrG,EAAEC,GCma5C,ODnamDhE,EAAY4N,EAAE7J,MAAO6J,EAAE5J,SAAjC5F,MAAlC,MAFT,SAGqBA,KAACuO,QAAQ7I,KAAK1F,KAAC0N,QAAQ1N,KAAC+N,WAC7C,OAAO/N,KAACmO,UAAR,IACS,eCyaX,MDzagCnO,MAACwO,QAAQ9I,KAAK,SAAAsG,GC0a5C,MD1a4C,UAACrG,EAAEC,GC2a7C,MD3aoDhE,GAAY4N,KAAK7J,GAAI6J,KAAK5J,MAApC5F,MAD5C,KAES,eC8aX,MD9a+BA,MAACwO,QAAQ9I,KAAK,SAAAsG,GC+a3C,MD/a2C,UAACrG,EAAEC,GCgb5C,ODhbmDhE,EAAY4N,KAAK7J,GAAI6J,KAAK5J,MAApC5F,MAF3C,SCsbF,MDnbuBA,MAACwO,QAAQ9I,KAAK1F,KAAC0N,QAAQ1N,KAAC6N,cCwbvD3M,EAAU0O,UDtbRpC,WAAY,WAER,MADAxN,MAACyN,WACMzN,KAACwO,SCybdtN,EAAU0O,UDvbRrC,WAAY,WAER,MADAvN,MAACyN,WACMzN,KAACuO,SC0bdrN,EAAU0O,UDxbRd,cAAe,SAACrK,GACZ,GAAAR,GAAAoM,EAAAC,EAAAvQ,EAAAoP,EAAAoB,EAAAtK,EAAAvB,EAAAU,EAAAC,EAAA2H,EAAAhJ,EAAApB,CAEA,KAFAqB,KACAD,KACAU,EAAA1E,KAAA6N,SAAA9N,EAAA,EAAAoP,EAAAzK,EAAAzE,OAAAF,EAAAoP,EAAApP,IC2bF6C,EAAI8B,EAAI3E,GD3bNkE,EAAOC,KAAP,OAAAkB,EAAAX,EAAA7B,IAAAwC,EAAwB,OACxB,KAAAC,EAAArF,KAAA+N,SAAA9H,EAAA,EAAAsK,EAAAlL,EAAApF,OAAAgG,EAAAsK,EAAAtK,IC+bFrD,EAAIyC,EAAKY,GD/bPjC,EAAOE,KAAP,OAAA8I,EAAAvI,EAAA7B,IAAAoK,EAAwB,OAkBxB,IAjBAsD,EAAatM,EAAO0D,KAAK6E,OAAOiE,aAAa,IAC7CH,EAAapM,EAAOyD,KAAK6E,OAAOiE,aAAa,IAE7CxQ,KAAC2O,SAASzK,KAAKO,GAEK,IAAjBT,EAAO/D,SACCD,KAACyO,UAAU6B,KACdtQ,KAACuO,QAAQrK,KAAKF,GACdhE,KAACyO,UAAU6B,GAActQ,KAAC2N,WAAW3N,KAAMgE,OAC/ChE,KAACyO,UAAU6B,GAAYpM,KAAKO,IAEZ,IAAjBR,EAAOhE,SACCD,KAAC0O,UAAU2B,KACdrQ,KAACwO,QAAQtK,KAAKD,GACdjE,KAAC0O,UAAU2B,GAAcrQ,KAAC2N,WAAW3N,QAAUiE,IACnDjE,KAAC0O,UAAU2B,GAAYnM,KAAKO,IAEZ,IAAjBR,EAAOhE,QAAiC,IAAjB+D,EAAO/D,OCwcnC,MDvcaD,MAACsO,KAAKgC,KACTtQ,KAACsO,KAAKgC,OACHtQ,KAACsO,KAAKgC,GAAYD,KACrBrQ,KAACsO,KAAKgC,GAAYD,GAAcrQ,KAAC2N,WAAW3N,KAAMgE,EAAQC,IAC9DjE,KAACsO,KAAKgC,GAAYD,GAAYnM,KAAKO,ICuc7CvD,EAAU0O,UDrcRtI,cAAe,SAACtD,EAAQC,GACpB,GAAAwM,GAAAJ,EAAAC,CAUA,OAVAA,GAAatM,EAAO0D,KAAK6E,OAAOiE,aAAa,IAC7CH,EAAapM,EAAOyD,KAAK6E,OAAOiE,aAAa,IAEzCC,EADgB,IAAjBzM,EAAO/D,QAAiC,IAAjBgE,EAAOhE,OACvBD,KAAC2O,SACc,IAAjB3K,EAAO/D,OACLD,KAAC0O,UAAU2B,GACI,IAAjBpM,EAAOhE,OACLD,KAACyO,UAAU6B,GAEXtQ,KAACsO,KAAKgC,GAAYD,GAC5B,MAAAI,EAAOA,GAAOtM,MAAO,WCycrB,MDzcyB,OAAOC,OAAQ,WC4cxC,MD5c2C,MCid1ClD,KD9cTD,EAAEyP,gBAAkBtP,oBAAAA,EAAqBC,YAAAA,EAAaW,UAAAA,EAAWV,cAAAA,EAAeE,SAAAA,EAAUE,QAAAA,EACtFE,YAAAA,EAAaC,aAAAA,EAAcM,OAAAA,EAAQjB,UAAAA,GAMvCY,EAAqB,SAAC6O,EAAWzN,GAE7B,GAAAyK,GAAAyC,EAAAvC,EAAA5J,EAAAuK,EAAArL,EAAAyN,EAAA9Q,EAAAmP,EAAAkB,EAAA1M,EAAAsK,EAAA/J,EAAAuK,EAAAsC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAnM,EAAArC,CAAAO,IACIkO,OAAOC,cAAe,MACtBhH,eAAeS,OAAQ,UACvBwG,iBAAkBjQ,EAAc0I,KAChCwH,iBAAkBlQ,EAAc0I,KAChCyH,iBAAkBnQ,EAAc0I,MAEpC9G,EAAOjC,EAAEuC,QAAO,KAAUL,EAAUD,GAEpC2K,EAAW8C,EAAU9C,SACrBE,EAAW4C,EAAU5C,SACrBQ,EAAUoC,EAAUpD,aACpBiB,EAAUmC,EAAUnD,aAEjBtK,EAAKmO,MAAMC,gBACVV,EAAkB,SAACzM,EAAOuN,EAAWC,GACjC,GAAApN,GAAAqN,EAAA9R,CAAA8R,KACA,KAAA9R,IAAA+N,GC8dCrN,EAAQmE,KAAKkJ,EAAU/N,KAC5ByE,EAAOsJ,EAAS/N,GD/dkD,MAAA6R,EAAA7R,KAA9D8R,EAAQrN,GAAQoN,EAAU7R,IAC1B,KAAAA,IAAAiO,GCoeCvN,EAAQmE,KAAKoJ,EAAUjO,KAC5ByE,EAAOwJ,EAASjO,GDrekD,MAAA4R,EAAA5R,KAA9D8R,EAAQrN,GAAQmN,EAAU5R,IAC1B,OAAO,UAAC+R,GC0eZ,MD1ekB3O,GAAKmO,MAAMC,cAAcO,EAAG1N,EAAOyN,EAASjB,MAGlElN,EAASwG,SAAS6H,cAAc,SAChCrO,EAAOsO,UAAY,WAGnBlB,EAAW,SAACmB,EAAKlS,EAAGmP,GAChB,GAAAlP,GAAAkS,EAAAhM,EAAAiM,EAAAxN,EAAAU,EAAA+M,EAAAvP,CAAA,IAAQ,IAAL9C,EAAH,CAEI,IADAoS,GAAS,EACAtP,EAAA7C,EAAA,EAAA2E,EAAAuK,EAAA,GAAAvK,EAAA3E,GAAA2E,EAAA3E,GAAA2E,EAAA9B,EAAA,GAAA8B,IAAA3E,IAAAA,EACFiS,EAAIlS,EAAE,GAAG8C,KAAMoP,EAAIlS,GAAG8C,KACrBsP,GAAS,EACjB,IAAGA,EACD,SAEN,IADAD,EAAM,EACAnS,EAAEmS,EAAMD,EAAI/R,QAAlB,CAEI,IADAkS,GAAO,EACEvP,EAAAqD,EAAA,EAAAb,EAAA6J,EAAA,GAAA7J,EAAAa,GAAAb,EAAAa,GAAAb,EAAAxC,EAAA,GAAAwC,IAAAa,IAAAA,EACU+L,EAAIlS,GAAG8C,KAAMoP,EAAIlS,EAAEmS,GAAKrP,KAAvCuP,GAAO,EACX,IAASA,EAAT,KACAF,KACJ,MAAOA,IAGXhB,EAAQhH,SAAS6H,cAAc,QAC/B,KAAA7C,IAAApB,GCofA,GAAKrN,EAAQmE,KAAKkJ,EAAUoB,GAA5B,CACAmB,EAAIvC,EAASoB,GDpfTkC,EAAKlH,SAAS6H,cAAc,MACV,IAAfM,SAASnD,IAA+B,IAAnBlB,EAAS9N,SAC7B+Q,EAAK/G,SAAS6H,cAAc,MAC5Bd,EAAGqB,aAAa,UAAWtE,EAAS9N,QACpC+Q,EAAGqB,aAAa,UAAWxE,EAAS5N,QACpCkR,EAAGmB,YAAYtB,IACnBA,EAAK/G,SAAS6H,cAAc,MAC5Bd,EAAGe,UAAY,eACff,EAAGsB,YAAYpP,EAAKqO,iBAAiBnB,IACrCe,EAAGmB,YAAYtB,EACf,KAAAlR,IAAA0O,GCufGhO,EAAQmE,KAAK6J,EAAS1O,KAC3BmE,EAASuK,EAAQ1O,GDvfX8C,EAAIiO,EAASrC,EAAS4D,SAAStS,GAAIsS,SAASnD,IACzCrM,SACCoO,EAAK/G,SAAS6H,cAAc,MAC5Bd,EAAGe,UAAY,cACff,EAAGsB,YAAYpP,EAAKsO,iBAAiBvN,EAAOgL,GAAImB,IAChDY,EAAGqB,aAAa,UAAWzP,GACxBwP,SAASnD,KAAMpB,EAAS5N,OAAO,GAAyB,IAAnB8N,EAAS9N,QAC7C+Q,EAAGqB,aAAa,UAAW,GAC/BlB,EAAGmB,YAAYtB,IACL,KAAfoB,SAASnD,KACR+B,EAAK/G,SAAS6H,cAAc,MAC5Bd,EAAGe,UAAY,gBACff,EAAGuB,UAAYrP,EAAKoH,cAAcS,OAClCiG,EAAGqB,aAAa,UAAWxE,EAAS5N,QAA+B,IAAlB8N,EAAS9N,OAAgB,EAAO,IACjFkR,EAAGmB,YAAYtB,IACnBC,EAAMqB,YAAYnB,GAGtB,GAAqB,IAAlBpD,EAAS9N,OAAZ,CACIkR,EAAKlH,SAAS6H,cAAc,KAC5B,KAAAhS,IAAAiO,GC4fGvN,EAAQmE,KAAKoJ,EAAUjO,KAC5BqQ,EAAIpC,EAASjO,GD5fPkR,EAAK/G,SAAS6H,cAAc,MAC5Bd,EAAGe,UAAY,eACff,EAAGsB,YAAYpP,EAAKqO,iBAAiBpB,IACrCgB,EAAGmB,YAAYtB,GACnBA,GAAK/G,SAAS6H,cAAc,MACP,IAAlBjE,EAAS5N,SACR+Q,EAAGe,UAAY,gBACff,EAAGuB,UAAYrP,EAAKoH,cAAcS,QACtCoG,EAAGmB,YAAYtB,GACfC,EAAMqB,YAAYnB,GACtB1N,EAAO6O,YAAYrB,GAGnBH,EAAQ7G,SAAS6H,cAAc,QAC/B,KAAAhS,IAAAyO,GC+fA,GAAK/N,EAAQmE,KAAK4J,EAASzO,GAA3B,CACAkE,EAASuK,EAAQzO,GD/fbqR,EAAKlH,SAAS6H,cAAc,KAC5B,KAAA7C,IAAAjL,GCigBGxD,EAAQmE,KAAKX,EAAQiL,KAC1BmC,EAAMpN,EAAOiL,GDjgBPrM,EAAIiO,EAAStC,EAAS6D,SAAStS,GAAIsS,SAASnD,IACzCrM,SACCoO,EAAK/G,SAAS6H,cAAc,MAC5Bd,EAAGe,UAAY,cACff,EAAGsB,YAAYpP,EAAKsO,iBAAiBJ,EAAKrD,EAASkB,KACnD+B,EAAGqB,aAAa,UAAWzP,GACxBwP,SAASnD,KAAMlB,EAAS9N,OAAO,GAAwB,IAAlB4N,EAAS5N,QAC7C+Q,EAAGqB,aAAa,UAAU,GAC9BlB,EAAGmB,YAAYtB,IACvB,KAAA/B,IAAAT,GCsgBGhO,EAAQmE,KAAK6J,EAASS,KAC3BhL,EAASuK,EAAQS,GDtgBXtB,EAAagD,EAAUrJ,cAActD,EAAQC,GAC7CgB,EAAM0I,EAAWxJ,QACjB4M,EAAK9G,SAAS6H,cAAc,MAC5Bf,EAAGgB,UAAY,aAAajS,EAAE,OAAMmP,EACpC8B,EAAGuB,YAAYpP,EAAKuO,iBAAiB9D,EAAWvJ,OAAOa,GAAMjB,EAAQC,IACrE8M,EAAGsB,aAAa,aAAcpN,GAC3B,MAAA2L,IACCG,EAAGyB,QAAU5B,EAAgB3L,EAAKjB,EAAQC,IAC9CkN,EAAGmB,YAAYvB,GAEnBG,GAAkBP,EAAUrJ,cAActD,MAC1CiB,EAAMiM,EAAgB/M,QACtB4M,EAAK9G,SAAS6H,cAAc,MAC5Bf,EAAGgB,UAAY,oBACfhB,EAAG0B,YAAcvB,EAAgB9M,OAAOa,GACxC8L,EAAGsB,aAAa,aAAcpN,GAC3B,MAAA2L,IACCG,EAAGyB,QAAU5B,EAAgB3L,EAAKjB,OACtC+M,EAAGsB,aAAa,WAAY,MAAMvS,GAClCqR,EAAGmB,YAAYvB,GACfD,EAAMwB,YAAYnB,GAGtBA,EAAKlH,SAAS6H,cAAc,MAC5Bd,EAAK/G,SAAS6H,cAAc,MAC5Bd,EAAGe,UAAY,gBACff,EAAGuB,UAAYrP,EAAKoH,cAAcS,OAClCiG,EAAGqB,aAAa,UAAWtE,EAAS9N,QAAgC,IAAnB4N,EAAS5N,OAAiB,EAAO,IAClFkR,EAAGmB,YAAYtB,EACf,KAAA/B,IAAAT,GCygBKhO,EAAQmE,KAAK6J,EAASS,KAC3BhL,EAASuK,EAAQS,GDzgBbiC,EAAkBP,EAAUrJ,iBAAkBrD,GAC9CgB,EAAMiM,EAAgB/M,QACtB4M,EAAK9G,SAAS6H,cAAc,MAC5Bf,EAAGgB,UAAY,oBACfhB,EAAG0B,YAAcvB,EAAgB9M,OAAOa,GACxC8L,EAAGsB,aAAa,aAAcpN,GAC3B,MAAA2L,IACCG,EAAGyB,QAAU5B,EAAgB3L,KAAShB,IAC1C8M,EAAGsB,aAAa,WAAY,MAAMpD,GAClCkC,EAAGmB,YAAYvB,GAiBnB,OAhBAG,GAAkBP,EAAUrJ,qBAC5BrC,EAAMiM,EAAgB/M,QACtB4M,EAAK9G,SAAS6H,cAAc,MAC5Bf,EAAGgB,UAAY,gBACfhB,EAAG0B,YAAcvB,EAAgB9M,OAAOa,GACxC8L,EAAGsB,aAAa,aAAcpN,GAC3B,MAAA2L,IACCG,EAAGyB,QAAU5B,EAAgB3L,UACjCkM,EAAGmB,YAAYvB,GACfD,EAAMwB,YAAYnB,GAClB1N,EAAO6O,YAAYxB,GAGnBrN,EAAO4O,aAAa,eAAgB9D,EAAQtO,QAC5CwD,EAAO4O,aAAa,eAAgB7D,EAAQvO,QAErCwD,GAMXxC,EAAEb,GAAGsS,MAAQ,SAAC3F,EAAO4F,EAAWC,GAC5B,GAAAzP,GAAA0O,EAAAgB,EAAAvI,EAAApH,EAAAyN,EAAAlN,EAAAb,CC2gBY,OAAVgQ,ID5gB0BA,EAAO,MACd,MAAAlR,EAAAkR,KAArBA,EAAS,MACTzP,GACI2K,QAAWE,QAAUvI,QACrByI,SAAU,aAAcC,SAAU,aAClC2E,UAAW5R,EACXmN,OAAQ,WCohBV,ODphBa,GACXV,WAAYvM,EAAoByC,UAChC+J,eAAgB,QAChBzI,WACAiJ,qBACA2E,SAAUjR,GAEdwI,EAAgBrJ,EAAEuC,QAAO,KAAU9B,EAAQ2I,GAAGC,cAAe5I,EAAQkR,GAAQtI,eAC7EuI,GACIG,iBAAkB1I,cAAAA,GAClBA,cAAeA,GAEnBpH,EAAOjC,EAAEuC,QAAO,KAAUqP,EAAgB5R,EAAEuC,UAAWL,EAAUwP,IAEjElP,EAAS,IACT,KACIkN,EAAY,GAAIzN,GAAK4P,UAAU/F,EAAO7J,EACtC,KACIO,EAASP,EAAK6P,SAASpC,EAAWzN,EAAK8P,iBAD3C,MAAAC,GAEMpB,EAAAoB,EACwB,mBAAAC,UAAA,OAAAA,SAA1BA,QAAQD,MAAMpB,EAAEsB,OAChB1P,EAASxC,EAAE,UAAUmS,KAAKlQ,EAAKoH,cAAcC,cANrD,MAAA0I,GAOMpB,EAAAoB,EACwB,mBAAAC,UAAA,OAAAA,SAA1BA,QAAQD,MAAMpB,EAAEsB,OAChB1P,EAASxC,EAAE,UAAUmS,KAAKlQ,EAAKoH,cAAcE,cAGtB,IAD3B5H,EAAI5C,KAAK,GACwB4C,EAAEyQ,iBAAnCzQ,EAAE0Q,YAAY1Q,EAAE2Q,UAChB,OAAOvT,MAACwT,OAAO/P,IAOnBxC,EAAEb,GAAGqT,QAAU,SAAC1G,EAAO4F,EAAWe,EAAmBd,GACjD,GAAAjN,GAAAgI,EAAApJ,EAAAoP,EAAAC,EAAAC,EAAA1Q,EAAA0O,EAAAiC,EAAAC,EAAAjU,EAAAkU,EAAAjU,EAAAoP,EAAAoB,EAAA0D,EAAApB,EAAAvI,EAAA4J,EAAAjO,EAAAkO,EAAAjR,EAAAkR,EAAAC,EAAAC,EAAA5P,EAAAU,EAAAC,EAAA2H,EAAAuH,EAAAC,EAAAzB,EAAA0B,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAArS,CC+hBe,OAAb8Q,IDhiB4BA,GAAY,GCmiB9B,MAAVd,IDniB+CA,EAAO,MACnC,MAAAlR,EAAAkR,KAArBA,EAAS,MACTzP,GACIiL,qBACA/M,YAAaK,EAAQkR,GAAQvR,YAC7BW,UAAWN,EAAQkR,GAAQ5Q,UAC3BkT,oBACAC,UAAW,IACXrH,QAAUE,QAAUvI,QACpByI,SAAU,aAAcC,SAAU,aAClC2E,UAAW5R,EACXkU,cACAC,cACAC,oBAAqB,GACrBC,qBAAqB,EACrBC,UAAW,KACXnH,OAAQ,WC2iBV,OD3iBa,GACXlJ,YAEJmF,EAAgBrJ,EAAEuC,QAAO,KAAU9B,EAAQ2I,GAAGC,cAAe5I,EAAQkR,GAAQtI,eAC7EuI,GACIG,iBAAkB1I,cAAAA,GAClBA,cAAeA,GAEnBwJ,EAAe9T,KAAC+D,KAAK,kBAEjBb,EADG,MAAA4Q,GAAiBJ,EACbzS,EAAEuC,QAAO,KAAUqP,EAAgB5R,EAAEuC,UAAWL,EAAUwP,IAE1DmB,CAEX,KAGIF,KACAM,KACAI,EAAmB,EACnBpT,EAAU2N,cAAc9B,EAAO7J,EAAKkL,kBAAmB,SAAC3J,GACpD,GAAAF,GAAAkR,EAAA/Q,EAAAP,CAAA,IAAcjB,EAAKmL,OAAO5J,GAA1B,CACAyP,EAAkBhQ,KAAKO,EACvB,KAAAF,IAAAE,GCgjBCjE,EAAQmE,KAAKF,EAAQF,ID/iBX,MAAAqP,EAAArP,KACHqP,EAAWrP,MACR+P,EAAmB,IAClBV,EAAWrP,GAAM,QAAU+P,GACvC,KAAA/P,IAAAqP,GACIzP,EAAA,OAAAO,EAAAD,EAAAF,IAAAG,EAAuB,OCojBS,OAAnC+Q,EAAO7B,EAAWrP,IAAOJ,KAC5BsR,EDpjBuBtR,GAAU,GAC3ByP,EAAWrP,GAAMJ,ICujB3B,ODtjBMmQ,QAGJQ,EAAU7T,EAAE,WAAWyU,QAAS,UAASnR,KAAK,cAAe,GAG7DkQ,EAAkBxT,EAAE,QAEpB8R,EAAW9R,EAAE,YACR0U,SAAS,eACTC,SAASnB,GACTtU,KAAK,SAAU,WCkjBtB,MDljByBoU,OACvB7P,EAAAxB,EAAAlB,SAAA,KAAAY,IAAA8B,GCqjBGlE,EAAQmE,KAAKD,EAAK9B,IDpjBjB3B,EAAE,YAAYgE,IAAIrC,GAAGwQ,KAAKxQ,GAAGgT,SAAS7C,EAa1C,IATAgC,EAAS9T,EAAE,QAAQ0U,SAAS,8BAC5BhB,EAAA,WCojBF,GAAIvF,EDpjBiBA,KCsjBrB,KDtjBqBzJ,IAAAiO,GAA2BhU,EAAA+E,KAASzB,EAAKgS,iBAAdvP,GAAA,GCwjB5CyJ,EAAQlL,KDxjBSyB,EC2jBrB,OAAOyJ,MDzjBL6F,GAAkC,EAE9BD,EAD2B,SAA5B9R,EAAKoS,oBAC4B,IAEAlD,SAASlP,EAAKoS,sBAE3C5R,MAAMsR,GAAb,CAEI,IADArB,EAAa,EACb5T,EAAA,EAAAoP,EAAAwF,EAAA1U,OAAAF,EAAAoP,EAAApP,IC4jBJ4F,EAAIgP,EAAgB5U,GD5jBhB4T,GAAchO,EAAE1F,MAChBgV,GAAkCtB,EAAaqB,EAEhD9R,EAAKoS,uBAAuB,GAAQL,EACnCF,EAAOY,SAAS,eAEhBZ,EAAOY,SAAS,gBCgkBxB5B,ED7jBW,SAACxP,GACA,GAAAsR,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA7F,EAAAtK,EAAAoQ,EAAAjR,EAAAF,EAAAoR,EAAA9G,EAAArL,EAAAoS,EAAAC,EAAAC,CAQA,IARAA,EAAA,WC+jBR,GAAIrH,ED/jBcA,KCikBlB,KDjkBkBI,IAAAoE,GAAArP,GCkkBhB6K,EAAQlL,KDlkBQsL,ECokBlB,OAAOJ,MDnkBCgH,GAAkB,EAClBI,EAAYvV,EAAE,SAAS0U,SAAS,gBAAgBe,OAEhDF,EAAUhD,OAAOvS,EAAE,QAAQuS,OACvBvS,EAAE,UAAU+I,KAAKzF,GACjBtD,EAAE,UAAU0U,SAAS,SAAS3L,KAAK,IAAIyM,EAAOxW,OAAO,OAEtDwW,EAAOxW,OAASiD,EAAKiS,UACpBqB,EAAUhD,OAAOvS,EAAE,OAAOmS,KAAKlQ,EAAKoH,cAAcM,cA6ClD,KA3CG6L,EAAOxW,OAAS,IACf+V,EAAW/U,EAAE,OAAO2U,SAASY,GAC7BtR,EAASzD,EAAQyB,EAAKiC,QAASZ,GAC/B8R,EAAcnT,EAAKoH,cAAcO,cACjC5J,EAAE,WAAY+F,KAAM,SAAS4O,SAASI,GACjCzR,MAAM8R,YAAaA,EAAaX,QAAO,cACvCvV,KAAK,QAAS,WACX,GAAAwW,GAAAC,EAAAvI,CCwlBpB,ODxlBoBA,GAASpN,EAAEjB,MAAMiF,MAAM4H,cAAcgK,OACrCD,EAAa,SAACtT,EAAQwT,GCskBxC,MDtkBqD,UAACtH,GAChC,GAAAuH,GAAA3R,CACA,OADA2R,GAAc1I,EAAO2I,UAAU1T,EAAOrD,QAAQ4W,OACT,IAAtBE,EAAY9W,SAC3BmF,EAAOE,KAAKuB,KAAK3B,EAAOsK,EAAE3C,cAAekK,IAAlCnX,EAAA+E,KAAmDmS,EAAnD1R,IAAA,KACXuR,EACYtI,EAAO4I,WAAW,MAAWL,EAAW,MAAO,EAAE,IACjDvI,EAAO4I,WAAW,MAAWL,EAAW,SAAU,IAClDvI,EAAO4I,WAAW,KAAWL,EAAW,KAAO,IAC/CvI,EAAO4I,WAAW,KAAWL,EAAW,UACxCvI,EAAO4I,WAAW,KAAW,SAACzH,GAC9B,MAAoD,KAArCnB,EAAO2I,UAAU,GAAGH,OAAO5W,QAC1CuP,EAAE3C,cAAcL,MAAM6B,EAAO2I,UAAU,KAC1C,SAACxH,GCykB5B,MDzkBkCA,GAAE3C,cAAcjN,QAAQyO,SAExCmI,EAAUU,KAAK,yCAAyCxH,KAAK,WACzD,MAAGiH,GAAO1V,EAAEjB,MAAMgK,QACd/I,EAAEjB,MAAMmX,SAASA,SAASC,OAE1BnW,EAAEjB,MAAMmX,SAASA,SAAST,WAC1CV,EAASxC,OAAOvS,EAAE,SAClBA,EAAE,YAAa+F,KAAK,WAAW4O,SAASI,GACnC5C,KAAKlQ,EAAKoH,cAAcI,WACxBvK,KAAK,QAAS,WAGX,MAFAqW,GAAUU,KAAK,+BACVG,KAAK,WAAW,GAAMC,YAAY,YAChC,IACfrW,EAAE,YAAa+F,KAAK,WAAW4O,SAASI,GACnC5C,KAAKlQ,EAAKoH,cAAcK,YACxBxK,KAAK,QAAS,WAGX,MAFAqW,GAAUU,KAAK,yBACVG,KAAK,WAAW,GAAOC,YAAY,YACjC,KAEnBxB,EAAiB7U,EAAE,SAAS0U,SAAS,qBAAqBC,SAASY,GAEnEpR,EAAAqR,EAAA/Q,KAAAjE,EAAAyB,EAAAiC,QAAAZ,IAAA0B,EAAA,EAAAsK,EAAAnL,EAAAnF,OAAAgG,EAAAsK,EAAAtK,IC6kBV9B,EAAQiB,EAAKa,GD5kBEsQ,EAAa3C,EAAWrP,GAAMJ,GAC9B8R,EAAahV,EAAE,WACfiV,GAAqB,EAClBhT,EAAKmS,WAAW9Q,GAChB2R,EAAsBtW,EAAA+E,KAAazB,EAAKmS,WAAW9Q,GAA7BJ,GAAA,EACjBjB,EAAKkS,WAAW7Q,KACrB2R,EAAsBtW,EAAA+E,KAASzB,EAAKkS,WAAW7Q,GAAzBJ,IAAA,GACzBiS,IAAAA,EAAoBF,GACpBjV,EAAE,WACEsD,KAAK,OAAQ,YAAYoR,SAAS,aAClCpR,KAAK,WAAY2R,GAAoBnS,KAAK,UAAWQ,EAAKJ,IAC1DyR,SAASK,GACT9V,KAAK,SAAU,WC2kBhC,MD3kBmCc,GAAEjB,MAAMsX,YAAY,aAC1CrB,EAAWzC,OAAOvS,EAAE,UAAU0U,SAAS,SAAS3L,KAAK7F,IACrD8R,EAAWzC,OAAOvS,EAAE,UAAU0U,SAAS,SAAS3L,KAAK,IAAIuM,EAAW,MACpET,EAAetC,OAAOvS,EAAE,OAAOuS,OAAOyC,GCunBzD,ODrnBUF,GAAiB,WCqlBzB,MDplBeS,GAAUU,KAAK,qBAAqBjX,OAChCuW,EAAUU,KAAK,6BAA6BjX,OAC3C4V,EAASF,SAAS,wBAElBE,EAAS0B,YAAY,wBAEzBf,EAAUU,KAAK,cAAcjS,IAAI,IACjCuR,EAAUU,KAAK,wBAAwBE,OACvCZ,EAAUE,QAElBP,EAAelV,EAAE,OAAO2U,SAASY,GAE9BC,EAAOxW,QAAUiD,EAAKiS,WACrBlU,EAAE,YAAa+F,KAAM,WAAWgD,KAAK9G,EAAKoH,cAAchK,OACnDsV,SAASO,GAAchW,KAAK,QAAS,WCglBpD,MD/kBqBqW,GAAUU,KAAK,YAAYK,YAAY,WAAWtX,QACjDsU,IACJwB,MAEZ9U,EAAE,YAAa+F,KAAM,WAAWgD,KAAK9G,EAAKoH,cAAcQ,QACnD8K,SAASO,GAAchW,KAAK,QAAS,WCklBlD,MDjlBgBqW,GAAUU,KAAK,oBACVK,YAAY,WAAWF,KAAK,WAAW,GAC5Cb,EAAUU,KAAK,0BACVK,YAAY,WAAWF,KAAK,WAAW,GAC5CtB,MAERO,EAAerV,EAAE,UAAU0U,SAAS,eAC/BvC,KAAK,aAAajT,KAAK,QAAS,SAAC0R,GAC9B,GAAA2F,GAAAnS,EAAAoS,CC8kBhB,OD9kBgBpS,GAAcpE,EAAE4Q,EAAE6F,eAAeC,WAAhCH,EAAAnS,EAAAmS,KAAMC,EAAApS,EAAAoS,IACPjB,EAAUoB,KAAIJ,KAAMA,EAAK,GAAIC,IAAKA,EAAI,KAAIL,SAElDvB,EAAW5U,EAAE,QAAQ0U,SAAS,QAAQ7V,GACjC0T,OAAOvS,EAAE,UAAU0U,SAAS,WAAW3L,KAAKzF,GAAMR,KAAK,WAAYQ,GAAMiP,OAAO8C,IAExCF,GAA7CP,EAASF,SAAS,wBAClBZ,EAAOvB,OAAOqC,GAAUrC,OAAOgD,GA/GvC,KAAA1W,IAAA6U,GCksBGnU,EAAQmE,KAAKgQ,EAAiB7U,KACnCyE,EAAOoQ,EAAgB7U,GACvBiU,EDnsBUxP,GAgHRqQ,GAAM3T,EAAE,QAAQ2U,SAASd,GAIzBnH,EAAa1M,EAAE,YAAY0U,SAAS,iBAC/BxV,KAAK,SAAU,WCklBtB,MDllByBoU,OACvBnP,EAAAlC,EAAA7B,WAAA,KAAAuB,IAAAwC,GCqlBG5E,EAAQmE,KAAKS,EAAMxC,IDplBlB+K,EAAW6F,OAAOvS,EAAE,YAAYgE,IAAIrC,GAAGwQ,KAAKxQ,GAsDhD,KApDAwR,GACIyD,YAAeC,UAAW,SAAUC,UAAW,SAAUC,KAAM,gBAC/DC,cAAeH,UAAW,SAAUC,UAAW,SAAUC,KAAM,gBAC/DE,cAAeJ,UAAW,SAAUC,UAAW,SAAUC,KAAM,eAEnEtD,EAAgBzT,EAAE,OAAOkX,KAAM,WAAUxC,SAAS,eAC7C5R,KAAK,QAASb,EAAKgL,UAAUkF,KAAKgB,EAASlR,EAAKgL,UAAU4J,WAC1D3X,KAAK,QAAS,WComBrB,MDnmBUc,GAAEjB,MAAM+D,KAAK,QAASqQ,EAASnT,EAAEjB,MAAM+D,KAAK,UAAUiU,MACtD/W,EAAEjB,MAAMoT,KAAKgB,EAASnT,EAAEjB,MAAM+D,KAAK,UAAU+T,WAC7CvD,MAERV,EAAgB5S,EAAE,OAAOkX,KAAM,WAAUxC,SAAS,eAC7C5R,KAAK,QAASb,EAAKiL,UAAUiF,KAAKgB,EAASlR,EAAKiL,UAAU4J,WAC1D5X,KAAK,QAAS,WComBrB,MDnmBUc,GAAEjB,MAAM+D,KAAK,QAASqQ,EAASnT,EAAEjB,MAAM+D,KAAK,UAAUiU,MACtD/W,EAAEjB,MAAMoT,KAAKgB,EAASnT,EAAEjB,MAAM+D,KAAK,UAAUgU,WAC7CxD,MAERtT,EAAE,QAAQ0U,SAAS,WAChBC,SAAShB,GACTpB,OAAO7F,GACP6F,OAAOkB,GACPlB,OAAOK,GACPL,OAAOvS,EAAE,SAGZA,EAAE,QAAQ0U,SAAS,yCAAyCC,SAAShB,GAErEC,EAAM5T,EAAE,QAAQ2U,SAASd,GAGzBD,EAAIrB,OAAOvS,EAAE,QAAQ0U,SAAS,4BAA4BpR,KAAK,SAAU,QAGzE8P,EAAapT,EAAE,QACVsD,KAAK,SAAU,OACfoR,SAAS,mBACTC,SAASf,GAGX3R,EAAKoS,uBAAuB,GAAQL,GACnCH,EAAQoC,KAAK,mBAAmBkB,QAAQ3D,GACxCK,EAAQoC,KAAK,mBAAmBkB,QAAQrD,IAExCD,EAAQsD,QAAQnX,EAAE,QAAQuS,OAAOiB,GAAiBjB,OAAOuB,IAG7D/U,KAACoT,KAAK0B,GAINzP,EAAAnC,EAAA4K,KAAA7H,EAAA,EAAAsK,EAAAlL,EAAApF,OAAAgG,EAAAsK,EAAAtK,IC8kBFrD,EAAIyC,EAAKY,GD7kBHjG,KAACkX,KAAK,YAAY1D,OAAOxT,KAACkX,KAAK,SAASjW,EAAEoX,QAAQzV,EAAG+R,IACzD,KAAA3H,EAAA9J,EAAA8K,KAAAmG,EAAA,EAAAF,EAAAjH,EAAA/M,OAAAkU,EAAAF,EAAAE,ICilBFvR,EAAIoK,EAAKmH,GDhlBHnU,KAACkX,KAAK,YAAY1D,OAAOxT,KAACkX,KAAK,SAASjW,EAAEoX,QAAQzV,EAAG+R,IACtD,OAAAzR,EAAA0K,gBACC5N,KAACkX,KAAK,kBAAkBjS,IAAI/B,EAAK0K,gBAClC,MAAA1K,EAAAoV,cACCtY,KAACkX,KAAK,gBAAgBjS,IAAI/B,EAAKoV,cAEnCtE,GAAgB,EAGhBQ,EAAiB,SAAAxI,GCklBnB,MDllBmB,YACb,GAAAoJ,GAAAC,EAAAkD,EAAAC,EAAAC,EAAAC,EAAAC,EAAA1L,EAAAC,EAAA0L,EAAAC,EAAAC,EAAAC,EAAAtT,CAmBA,IAnBAmT,GACIxK,kBAAmBlL,EAAKkL,kBACxB9D,cAAepH,EAAKoH,cACpB0I,gBAAiB9P,EAAK8P,gBACtB7N,QAASjC,EAAKiC,QACd2I,QAAUE,QACV8E,UAAW5P,EAAK4P,WAEpB2F,EAAA,OAAAxL,EAAA/J,EAAA7B,YAAAsM,EAAA1I,aAAAL,WAAAqI,EAA0E,EAC1ExH,KACAuG,EAACkL,KAAK,4BAA4BxH,KAAK,WCqlBzC,MDrlB4CkJ,GAAQ5K,KAAK9J,KAAKjD,EAAEjB,MAAM+D,KAAK,eACzEiI,EAACkL,KAAK,4BAA4BxH,KAAK,WCulBzC,MDvlB4CkJ,GAAQ9K,KAAK5J,KAAKjD,EAAEjB,MAAM+D,KAAK,eACzEiI,EAACkL,KAAK,mCAAmCxH,KAAK,WAC1C,MAAyB,KAAtB+I,EACCxX,EAAEjB,MAAMgZ,UAERP,IAC4C,KAAjBxX,EAAEjB,MAAMiF,MAAnCQ,EAAKvB,KAAKjD,EAAEjB,MAAMiF,OAAlB,UAEiB,IAAtBwT,EAEC,IADAE,EAAU3M,EAACkL,KAAK,YACPtU,EAAAiW,EAAA,EAAA3L,EAAAuL,EAAA,GAAAvL,EAAA2L,EAAA3L,EAAA2L,EAAA3L,EAAAtK,EAAA,GAAAsK,IAAA2L,IAAAA,EAAT,CAKI,IAJAL,EAAcvX,EAAE,YACX0U,SAAS,mBACTnC,OAAOvS,EAAE,aACTd,KAAK,SAAU,WCylB1B,MDzlB6BoU,OACvBuE,EAAA,EAAAP,EAAA5D,EAAA1U,OAAA6Y,EAAAP,EAAAO,IC2lBNvU,EAAOoQ,EAAgBmE,GD1lBbN,EAAYhF,OAAOvS,EAAE,YAAYgE,IAAIV,GAAMyF,KAAKzF,GACpDoU,GAAQnF,OAAOgF,GA+DvB,GA7DGxE,IACCvO,EAAOvC,EAAKuC,KACZ3F,EAAI,EACJkM,EAACkL,KAAK,mCAAmCxH,KAAK,WC+lBlD,MD9lBQzO,GAAEjB,MAAMiF,IAAIQ,EAAK3F,IACjBA,MACJkU,GAAgB,GAEpB4E,EAAQhL,eAAiBD,EAAW1I,MACpC2T,EAAQnT,KAAOA,EACfmT,EAAQjL,WAAazK,EAAK7B,YAAYsM,EAAW1I,OAAOQ,GACxDmT,EAAQ7F,SAAW7P,EAAKlB,UAAU+Q,EAAS9N,OAC3C2T,EAAQ1K,SAAWwG,EAAc3Q,KAAK,SACtC6U,EAAQzK,SAAW0F,EAAc9P,KAAK,SAEtCqR,KACApJ,EAACkL,KAAK,mBAAmB+B,IAAI,YAAYvJ,KAAK,WAC1C,GAAArB,EACA,OADAA,GAASpN,EAAEjB,MAAM+D,KAAK,UACnB,MAAAqR,EAAA/G,EAAA,IACC+G,EAAW/G,EAAO,IAAInK,KAAMmK,EAAO,IAEnC+G,EAAW/G,EAAO,KAAQA,EAAO,MAEzCgH,KACArJ,EAACkL,KAAK,2BAA2BxH,KAAK,WAClC,GAAArB,EACA,IADAA,EAASpN,EAAEjB,MAAM+D,KAAK,UACnB,MAAAqR,EAAA/G,EAAA,IACC,MAAG,OAAAgH,EAAAhH,EAAA,IACCgH,EAAWhH,EAAO,IAAInK,KAAMmK,EAAO,IAEnCgH,EAAWhH,EAAO,KAAQA,EAAO,MAE7CuK,EAAQvK,OAAS,SAAC5J,GACd,GAAAyU,GAAAhK,EAAA/B,EAAAC,CAAA,KAAoBlK,EAAKmL,OAAO5J,GAAhC,OAAO,CACP,KAAAyK,IAAAkG,GACI,GCqmBR8D,EAAgB9D,EAAWlG,GDrmBnB/B,EAAgB,IAAG,OAAAC,EAAA3I,EAAAyK,IAAA9B,EAAa,QAAhBxN,EAAA+E,KAA2BuU,EAA3B/L,IAAA,EAAhB,OAAO,CACX,QAAO,GAEXkH,EAAW3B,MAAMwB,EAAkB0E,GACnCF,EAAiBzX,EAAEuC,UAAWN,GAC1B4K,KAAM8K,EAAQ9K,KACdE,KAAM4K,EAAQ5K,KACdG,SAAUyK,EAAQzK,SAClBD,SAAU0K,EAAQ1K,SAClBzI,KAAMA,EACN2P,WAAYA,EACZC,WAAYA,EACZ8D,eAAgB9D,EAChBzH,eAAgBD,EAAW1I,MAC3BqT,aAAcvF,EAAS9N,QAE3B+G,EAACjI,KAAK,iBAAkB2U,GAGrBxV,EAAKqS,sBACJwD,EAAuB/M,EAACkL,KAAK,iCAC7BjW,EAAE8X,GAAsBK,SAAS,MAC5B1T,KAAK,SAACC,EAAGC,GCumBlB,MDvmBwBhE,GAAYX,EAAE0E,GAAGqE,OAAQ/I,EAAE2E,GAAGoE,UAC7C4L,SAASmD,IAElB1E,EAAWuD,IAAI,UAAW,GACQ,MAAA1U,EAAAsS,UCwmBpC,MDxmBEtS,GAAKsS,UAAUkD,KA5FF1Y,MA8FjBuU,EAAU,SAAAvI,GC2mBZ,MD3mBY,YC6mBV,MD5mBIqI,GAAWuD,IAAI,UAAW,IAC1ByB,WAAW7E,EAAgB,MAFrBxU,MAKVuU,IAEAvU,KAACkX,KAAK,qBAAqBoC,UACnBC,OAAQ,SAAC1H,EAAG2H,GAAO,GAAiB,MAAAA,EAAAC,OC4mB1C,MD5mByBlF,MACnBmF,YAAa1Z,KAACkX,KAAK,qBACnByC,MAAO,KACPtD,YAAa,mBAzVzB,MAAApD,GA0VMpB,EAAAoB,EACwB,mBAAAC,UAAA,OAAAA,SAA1BA,QAAQD,MAAMpB,EAAEsB,OAChBnT,KAACoT,KAAKlQ,EAAKoH,cAAcG,eAC7B,MAAOzK,OAMXiB,EAAEb,GAAGyJ,QAAU,SAAC+P,EAAmB1W,GAC/B,GAAA2W,GAAAC,EAAAha,EAAAmP,EAAAlP,EAAAkG,EAAA8T,EAAAC,EAAAtV,EAAAU,EAAAC,CAwBA,QC4lBW,MAATuU,IDrnBUA,EAAQ,WACpBI,EAAUha,KAAC+D,KAAK,WAChBgW,EAAU/Z,KAAC+D,KAAK,WAIhB8V,EAAA,MAAA3W,GAAA,OAAAwB,EAAAxB,EAAA2G,SAAAnF,EAAqCmV,oBAAA,OCqnBZ,MAAvBA,IDpnBFA,EAAuB,SAACpD,GACpB,GAAA9O,GAAAC,CAEA,OAFAA,GAAMtC,KAAKsC,IAALtH,MAAAgF,KAASmR,GACf9O,EAAMrC,KAAKqC,IAALrH,MAAAgF,KAASmR,GACR,SAAC7T,GACJ,GAAAqX,EACA,OADAA,GAAS,IAAM3U,KAAK4U,MAAM,KAAKtX,EAAEgF,IAAMD,EAAIC,IACpC,WAAWqS,EAAO,IAAGA,EAAO,OAE3CH,EAAa,SAAA9N,GC0nBb,MD1nBa,UAAC4N,GACV,GAAAO,GAAAC,EAAA3D,CCyoBF,ODzoBE2D,GAAc,SAAC5S,GC4nBf,MD3nBIwE,GAACkL,KAAK0C,GAAOlK,KAAK,WACd,GAAA9M,EACA,IADAA,EAAI3B,EAAEjB,MAAM+D,KAAK,SACA,MAAAnB,GAAOe,SAASf,GC6nBrC,MD7nBI4E,GAAE5E,EAAG3B,EAAEjB,UAEfyW,KACA2D,EAAY,SAACxX,GCgoBb,MDhoBmB6T,GAAOvS,KAAKtB,KAC/BuX,EAAaN,EAAoBpD,GACjC2D,EAAY,SAACxX,EAAGyX,GCkoBhB,MDloByBA,GAAKzC,IAAI,mBAAoBuC,EAAWvX,QATxD5C,MAWN4Z,GAAP,IACS,UAAkBE,EAAW,UAA7B,MADT,KAES,aAAkB,IAAsCha,EAAAC,EAAA,EAAAqF,EAAA4U,EAAA,GAAA5U,EAAArF,EAAAqF,EAAArF,EAAAqF,EAAAtF,EAAA,GAAAsF,IAAArF,IAAAA,EAAtC+Z,EAAW,cAAcha,EAA3C,MAFT,KAGS,aAAkB,IAAsCmP,EAAAhJ,EAAA,EAAAZ,EAAA0U,EAAA,GAAA1U,EAAAY,EAAAZ,EAAAY,EAAAZ,EAAA4J,EAAA,GAAA5J,IAAAY,IAAAA,EAAtC6T,EAAW,cAAc7K,GAKpD,MAHA6K,GAAW,sBACXA,EAAW,sBAEJ9Z,MAMXiB,EAAEb,GAAGuJ,SAAY,WACb,GAAA2Q,GAAAxa,EAAAC,EAAAga,EAAAC,EAAAtV,CAgCA,KAhCAsV,EAAUha,KAAC+D,KAAK,WAChBgW,EAAU/Z,KAAC+D,KAAK,WAEhBuW,EAAa,SAAAtO,GC6oBb,MD7oBa,UAAC4N,GACV,GAAAQ,GAAAzS,EAAAtE,EAAAoT,CC+pBF,OD/pBE2D,GAAc,SAAC5S,GC+oBf,MD9oBIwE,GAACkL,KAAK0C,GAAOlK,KAAK,WACd,GAAA9M,EACA,IADAA,EAAI3B,EAAEjB,MAAM+D,KAAK,SACA,MAAAnB,GAAOe,SAASf,GCgpBrC,MDhpBI4E,GAAE5E,EAAG3B,EAAEjB,UAEfyW,KACA2D,EAAY,SAACxX,GCmpBb,MDnpBmB6T,GAAOvS,KAAKtB,KAC/B+E,EAAMrC,KAAKqC,IAALrH,MAAAgF,KAASmR,GACfpT,EAAS,SAACT,GCqpBV,MDrpBgB,KAAIA,GAAG,IAAI+E,IAC3ByS,EAAY,SAACxX,EAAGyX,GACZ,GAAArQ,GAAAuQ,CCyqBJ,ODzqBIvQ,GAAOqQ,EAAKrQ,OACZuQ,EAAUtZ,EAAE,SAAS2W,KACjBD,SAAY,WACZ6C,OAAU,SACdD,EAAQ/G,OAAOvS,EAAE,SAAS2W,KACtBD,SAAY,WACZ8C,OAAU,EACVjD,KAAQ,EACRkD,MAAS,EACTF,OAAUnX,EAAOT,GAAK,IACtB+X,mBAAoB,UACxBJ,EAAQ/G,OAAOvS,EAAE,SAAS+I,KAAKA,GAAM4N,KACjCD,SAAW,WACXiD,eAAe,MACfC,gBAAgB,SAEpBR,EAAKzC,KAAIkD,QAAW,EAAEC,cAAe,MAAOC,aAAc,WAAU5H,KAAKmH,OA3BpEva,MA6ByBF,EAAAC,EAAA,EAAA2E,EAAAsV,EAAA,GAAAtV,EAAA3E,EAAA2E,EAAA3E,EAAA2E,EAAA5E,EAAA,GAAA4E,IAAA3E,IAAAA,EAAtCua,EAAW,cAAcxa,EAGzB,OAFAwa,GAAW,sBAEJta,UCoqBZ2E,KAAK3E","file":"pivot.min.js","sourcesContent":["callWithJQuery = (pivotModule) ->\n    if typeof exports is \"object\" and typeof module is \"object\" # CommonJS\n        pivotModule require(\"jquery\")\n    else if typeof define is \"function\" and define.amd # AMD\n        define [\"jquery\"], pivotModule\n    # Plain browser env\n    else\n        pivotModule jQuery\n\ncallWithJQuery ($) ->\n\n    ###\n    Utilities\n    ###\n\n    addSeparators = (nStr, thousandsSep, decimalSep) ->\n        nStr += ''\n        x = nStr.split('.')\n        x1 = x[0]\n        x2 = if x.length > 1 then  decimalSep + x[1] else ''\n        rgx = /(\\d+)(\\d{3})/\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2') while rgx.test(x1)\n        return x1 + x2\n\n    numberFormat = (opts) ->\n        defaults =\n            digitsAfterDecimal: 2, scaler: 1,\n            thousandsSep: \",\", decimalSep: \".\"\n            prefix: \"\", suffix: \"\"\n        opts = $.extend({}, defaults, opts)\n        (x) ->\n            return \"\" if isNaN(x) or not isFinite(x)\n            result = addSeparators (opts.scaler*x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep\n            return \"\"+opts.prefix+result+opts.suffix\n\n    #aggregator templates default to US number formatting but this is overrideable\n    usFmt = numberFormat()\n    usFmtInt = numberFormat(digitsAfterDecimal: 0)\n    usFmtPct = numberFormat(digitsAfterDecimal:1, scaler: 100, suffix: \"%\")\n\n    aggregatorTemplates =\n        count: (formatter=usFmtInt) -> () -> (data, rowKey, colKey) ->\n            count: 0\n            push:  -> @count++\n            value: -> @count\n            format: formatter\n\n        uniques: (fn, formatter=usFmtInt) -> ([attr]) -> (data, rowKey, colKey) ->\n            uniq: []\n            push: (record) -> @uniq.push(record[attr]) if record[attr] not in @uniq\n            value: -> fn(@uniq)\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        sum: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            sum: 0\n            push: (record) -> @sum += parseFloat(record[attr]) if not isNaN parseFloat(record[attr])\n            value: -> @sum\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        extremes: (mode, formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            val: null\n            sorter: getSort(data?.sorters, attr)\n            push: (record) ->\n                x = record[attr]\n                if mode in [\"min\", \"max\"]\n                    x = parseFloat(x)\n                    if not isNaN x then @val = Math[mode](x, @val ? x)\n                if mode == \"first\" then @val = x if @sorter(x, @val ? x) <= 0\n                if mode == \"last\"  then @val = x if @sorter(x, @val ? x) >= 0\n            value: -> @val\n            format: (x) -> if isNaN(x) then x else formatter(x)\n            numInputs: if attr? then 0 else 1\n\n        quantile: (q, formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            vals: []\n            push: (record) ->\n                x = parseFloat(record[attr])\n                @vals.push(x) if not isNaN(x)\n            value: ->\n                return null if @vals.length == 0\n                @vals.sort((a,b) -> a-b)\n                i = (@vals.length-1)*q\n                return (@vals[Math.floor(i)] + @vals[Math.ceil(i)])/2.0\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        runningStat: (mode=\"mean\", ddof=1, formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            n: 0.0, m: 0.0, s: 0.0\n            push: (record) ->\n                x = parseFloat(record[attr])\n                return if isNaN(x)\n                @n += 1.0\n                if @n == 1.0\n                    @m = x\n                else\n                    m_new = @m + (x - @m)/@n\n                    @s = @s + (x - @m)*(x - m_new)\n                    @m = m_new\n            value: ->\n                if mode == \"mean\"\n                    return if @n == 0 then 0/0 else @m\n                return 0 if @n <= ddof\n                switch mode\n                    when \"var\"   then @s/(@n-ddof)\n                    when \"stdev\" then Math.sqrt(@s/(@n-ddof))\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        sumOverSum: (formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\n            sumNum: 0\n            sumDenom: 0\n            push: (record) ->\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\n            value: -> @sumNum/@sumDenom\n            format: formatter\n            numInputs: if num? and denom? then 0 else 2\n\n        sumOverSumBound80: (upper=true, formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\n            sumNum: 0\n            sumDenom: 0\n            push: (record) ->\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\n            value: ->\n                sign = if upper then 1 else -1\n                (0.821187207574908/@sumDenom + @sumNum/@sumDenom + 1.2815515655446004*sign*\n                    Math.sqrt(0.410593603787454/ (@sumDenom*@sumDenom) + (@sumNum*(1 - @sumNum/ @sumDenom))/ (@sumDenom*@sumDenom)))/\n                    (1 + 1.642374415149816/@sumDenom)\n            format: formatter\n            numInputs: if num? and denom? then 0 else 2\n\n        fractionOf: (wrapped, type=\"total\", formatter=usFmtPct) -> (x...) -> (data, rowKey, colKey) ->\n            selector: {total:[[],[]],row:[rowKey,[]],col:[[],colKey]}[type]\n            inner: wrapped(x...)(data, rowKey, colKey)\n            push: (record) -> @inner.push record\n            format: formatter\n            value: -> @inner.value() / data.getAggregator(@selector...).inner.value()\n            numInputs: wrapped(x...)().numInputs\n\n    aggregatorTemplates.countUnique = (f) -> aggregatorTemplates.uniques(((x) -> x.length), f)\n    aggregatorTemplates.listUnique =  (s) -> aggregatorTemplates.uniques(((x) -> x.join(s)), ((x)->x))\n    aggregatorTemplates.max =         (f) -> aggregatorTemplates.extremes('max', f)\n    aggregatorTemplates.min =         (f) -> aggregatorTemplates.extremes('min', f)\n    aggregatorTemplates.first =       (f) -> aggregatorTemplates.extremes('first', f)\n    aggregatorTemplates.last =        (f) -> aggregatorTemplates.extremes('last', f)\n    aggregatorTemplates.median =      (f) -> aggregatorTemplates.quantile(0.5, f)\n    aggregatorTemplates.average =     (f) -> aggregatorTemplates.runningStat(\"mean\", 1, f)\n    aggregatorTemplates.var =         (ddof, f) -> aggregatorTemplates.runningStat(\"var\", ddof, f)\n    aggregatorTemplates.stdev =       (ddof, f) -> aggregatorTemplates.runningStat(\"stdev\", ddof, f)\n\n    #default aggregators & renderers use US naming and number formatting\n    aggregators = do (tpl = aggregatorTemplates) ->\n        \"Count\":                tpl.count(usFmtInt)\n        \"Count Unique Values\":  tpl.countUnique(usFmtInt)\n        \"List Unique Values\":   tpl.listUnique(\", \")\n        \"Sum\":                  tpl.sum(usFmt)\n        \"Integer Sum\":          tpl.sum(usFmtInt)\n        \"Average\":              tpl.average(usFmt)\n        \"Median\":               tpl.median(usFmt)\n        \"Sample Variance\":      tpl.var(1, usFmt)\n        \"Sample Standard Deviation\": tpl.stdev(1, usFmt)\n        \"Minimum\":              tpl.min(usFmt)\n        \"Maximum\":              tpl.max(usFmt)\n        \"First\":                tpl.first(usFmt)\n        \"Last\":                 tpl.last(usFmt)\n        \"Sum over Sum\":         tpl.sumOverSum(usFmt)\n        \"80% Upper Bound\":      tpl.sumOverSumBound80(true, usFmt)\n        \"80% Lower Bound\":      tpl.sumOverSumBound80(false, usFmt)\n        \"Sum as Fraction of Total\":     tpl.fractionOf(tpl.sum(),   \"total\", usFmtPct)\n        \"Sum as Fraction of Rows\":      tpl.fractionOf(tpl.sum(),   \"row\",   usFmtPct)\n        \"Sum as Fraction of Columns\":   tpl.fractionOf(tpl.sum(),   \"col\",   usFmtPct)\n        \"Count as Fraction of Total\":   tpl.fractionOf(tpl.count(), \"total\", usFmtPct)\n        \"Count as Fraction of Rows\":    tpl.fractionOf(tpl.count(), \"row\",   usFmtPct)\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\",   usFmtPct)\n\n    renderers =\n        \"Table\":          (data, opts) ->   pivotTableRenderer(data, opts)\n        \"Table Barchart\": (data, opts) -> $(pivotTableRenderer(data, opts)).barchart()\n        \"Heatmap\":        (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"heatmap\",    opts)\n        \"Row Heatmap\":    (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"rowheatmap\", opts)\n        \"Col Heatmap\":    (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"colheatmap\", opts)\n\n    \n    cellRenderers =\n        text: (value) -> document.createTextNode(value)\n        byType: (opts, def) -> (value, type) -> (opts[type] || def || cellRenderers.text).apply(this, arguments)\n\n    locales =\n        en:\n            aggregators: aggregators\n            renderers: renderers\n            localeStrings:\n                renderError: \"An error occurred rendering the PivotTable results.\"\n                computeError: \"An error occurred computing the PivotTable results.\"\n                uiRenderError: \"An error occurred rendering the PivotTable UI.\"\n                selectAll: \"Select All\"\n                selectNone: \"Select None\"\n                tooMany: \"(too many to list)\"\n                filterResults: \"Filter values\"\n                apply: \"Apply\"\n                cancel: \"Cancel\"\n                totals: \"Totals\" #for table renderer\n                vs: \"vs\" #for gchart renderer\n                by: \"by\" #for gchart renderer\n\n    #dateFormat deriver l10n requires month and day names to be passed in directly\n    mthNamesEn = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]\n    dayNamesEn = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"]\n    zeroPad = (number) -> (\"0\"+number).substr(-2,2)\n\n    derivers =\n        bin: (col, binWidth) -> (record) -> record[col] - record[col] % binWidth\n        dateFormat: (col, formatString, utcOutput=false, mthNames=mthNamesEn, dayNames=dayNamesEn) ->\n            utc = if utcOutput then \"UTC\" else \"\"\n            (record) -> #thanks http://stackoverflow.com/a/12213072/112871\n                date = new Date(Date.parse(record[col]))\n                if isNaN(date) then return \"\"\n                formatString.replace /%(.)/g, (m, p) ->\n                    switch p\n                        when \"y\" then date[\"get#{utc}FullYear\"]()\n                        when \"m\" then zeroPad(date[\"get#{utc}Month\"]()+1)\n                        when \"n\" then mthNames[date[\"get#{utc}Month\"]()]\n                        when \"d\" then zeroPad(date[\"get#{utc}Date\"]())\n                        when \"w\" then dayNames[date[\"get#{utc}Day\"]()]\n                        when \"x\" then date[\"get#{utc}Day\"]()\n                        when \"H\" then zeroPad(date[\"get#{utc}Hours\"]())\n                        when \"M\" then zeroPad(date[\"get#{utc}Minutes\"]())\n                        when \"S\" then zeroPad(date[\"get#{utc}Seconds\"]())\n                        else \"%\" + p\n\n    rx = /(\\d+)|(\\D+)/g\n    rd = /\\d/\n    rz = /^0/\n    naturalSort = (as, bs) =>\n        #nulls first\n        return -1 if bs? and not as?\n        return  1 if as? and not bs?\n\n        #then raw NaNs\n        return -1 if typeof as == \"number\" and isNaN(as)\n        return  1 if typeof bs == \"number\" and isNaN(bs)\n\n        #numbers and numbery strings group together\n        nas = +as\n        nbs = +bs\n        return -1 if nas < nbs\n        return  1 if nas > nbs\n\n        #within that, true numbers before numbery strings\n        return -1 if typeof as == \"number\" and typeof bs != \"number\"\n        return  1 if typeof bs == \"number\" and typeof as != \"number\"\n        return  0 if typeof as == \"number\" and typeof bs == \"number\"\n\n        # 'Infinity' is a textual number, so less than 'A'\n        return -1 if isNaN(nbs) and not isNaN(nas)\n        return  1 if isNaN(nas) and not isNaN(nbs)\n\n        #finally, \"smart\" string sorting per http://stackoverflow.com/a/4373421/112871\n        a = String(as)\n        b = String(bs)\n        return 0 if a == b\n        return (if a > b then 1 else -1) unless rd.test(a) and rd.test(b)\n\n        #special treatment for strings containing digits\n        a = a.match(rx) #create digits vs non-digit chunks and iterate through\n        b = b.match(rx)\n        while a.length and b.length\n            a1 = a.shift()\n            b1 = b.shift()\n            if a1 != b1\n                if rd.test(a1) and rd.test(b1) #both are digit chunks\n                    return a1.replace(rz, \".0\") - b1.replace(rz, \".0\")\n                else\n                    return (if a1 > b1 then 1 else -1)\n        return a.length - b.length\n\n    sortAs = (order) ->\n        mapping = {}\n        l_mapping = {} # sort lowercased keys similarly\n        for i, x of order\n            mapping[x] = i\n            l_mapping[x.toLowerCase()] = i if typeof x == \"string\"\n        (a, b) ->\n            if mapping[a]? and mapping[b]? then mapping[a] - mapping[b]\n            else if mapping[a]? then -1\n            else if mapping[b]? then 1\n            else if l_mapping[a]? and l_mapping[b]? then l_mapping[a] - l_mapping[b]\n            else if l_mapping[a]? then -1\n            else if l_mapping[b]? then 1\n            else naturalSort(a,b)\n\n    getSort = (sorters, attr) ->\n        if sorters?\n            if $.isFunction(sorters)\n                sort = sorters(attr)\n                return sort if $.isFunction(sort)\n            else if sorters[attr]?\n                return sorters[attr]\n        return naturalSort\n\n    ###\n    Data Model class\n    ###\n\n    class PivotData\n        constructor: (input, opts = {}) ->\n            @input = input\n            @aggregator = opts.aggregator ? aggregatorTemplates.count()()\n            @aggregatorName = opts.aggregatorName ? \"Count\"\n            @colAttrs = opts.cols ? []\n            @rowAttrs = opts.rows ? []\n            @valAttrs = opts.vals ? []\n            @sorters = opts.sorters ? {}\n            @rowOrder = opts.rowOrder ? \"key_a_to_z\"\n            @colOrder = opts.colOrder ? \"key_a_to_z\"\n            @derivedAttributes = opts.derivedAttributes ? {}\n            @filter = opts.filter ? (-> true)\n            @tree = {}\n            @rowKeys = []\n            @colKeys = []\n            @rowTotals = {}\n            @colTotals = {}\n            @allTotal = @aggregator(this, [], [])\n            @sorted = false\n\n            # iterate through input, accumulating data for cells\n            PivotData.forEachRecord @input, @derivedAttributes, (record) =>\n                @processRecord(record) if @filter(record)\n\n        #can handle arrays or jQuery selections of tables\n        @forEachRecord = (input, derivedAttributes, f) ->\n            if $.isEmptyObject derivedAttributes\n                addRecord = f\n            else\n                addRecord = (record) ->\n                    record[k] = v(record) ? record[k] for k, v of derivedAttributes\n                    f(record)\n\n            #if it's a function, have it call us back\n            if $.isFunction(input)\n                input(addRecord)\n            else if $.isArray(input)\n                if $.isArray(input[0]) #array of arrays\n                    for own i, compactRecord of input when i > 0\n                        record = {}\n                        record[k] = compactRecord[j] for own j, k of input[0]\n                        addRecord(record)\n                else #array of objects\n                    addRecord(record) for record in input\n            else if input instanceof jQuery\n                tblCols = []\n                $(\"thead > tr > th\", input).each (i) -> tblCols.push $(this).text()\n                $(\"tbody > tr\", input).each (i) ->\n                    record = {}\n                    $(\"td\", this).each (j) -> record[tblCols[j]] = $(this).text()\n                    addRecord(record)\n            else\n                throw new Error(\"unknown input format\")\n\n        forEachMatchingRecord: (criteria, callback) ->\n            PivotData.forEachRecord @input, @derivedAttributes, (record) =>\n                return if not @filter(record)\n                for k, v of criteria\n                    return if v != (record[k] ? \"null\")\n                callback(record)\n\n        arrSort: (attrs) =>\n            sortersArr = (getSort(@sorters, a) for a in attrs)\n            (a,b) ->\n                for own i, sorter of sortersArr\n                    comparison = sorter(a[i], b[i])\n                    return comparison if comparison != 0\n                return 0\n\n        sortKeys: () =>\n            if not @sorted\n                @sorted = true\n                v = (r,c) => @getAggregator(r,c).value()\n                switch @rowOrder\n                    when \"value_a_to_z\"  then @rowKeys.sort (a,b) =>  naturalSort v(a,[]), v(b,[])\n                    when \"value_z_to_a\" then @rowKeys.sort (a,b) => -naturalSort v(a,[]), v(b,[])\n                    else             @rowKeys.sort @arrSort(@rowAttrs)\n                switch @colOrder\n                    when \"value_a_to_z\"  then @colKeys.sort (a,b) =>  naturalSort v([],a), v([],b)\n                    when \"value_z_to_a\" then @colKeys.sort (a,b) => -naturalSort v([],a), v([],b)\n                    else             @colKeys.sort @arrSort(@colAttrs)\n\n        getColKeys: () =>\n            @sortKeys()\n            return @colKeys\n\n        getRowKeys: () =>\n            @sortKeys()\n            return @rowKeys\n\n        processRecord: (record) -> #this code is called in a tight loop\n            colKey = []\n            rowKey = []\n            colKey.push record[x] ? \"null\" for x in @colAttrs\n            rowKey.push record[x] ? \"null\" for x in @rowAttrs\n            flatRowKey = rowKey.join(String.fromCharCode(0))\n            flatColKey = colKey.join(String.fromCharCode(0))\n\n            @allTotal.push record\n\n            if rowKey.length != 0\n                if not @rowTotals[flatRowKey]\n                    @rowKeys.push rowKey\n                    @rowTotals[flatRowKey] = @aggregator(this, rowKey, [])\n                @rowTotals[flatRowKey].push record\n\n            if colKey.length != 0\n                if not @colTotals[flatColKey]\n                    @colKeys.push colKey\n                    @colTotals[flatColKey] = @aggregator(this, [], colKey)\n                @colTotals[flatColKey].push record\n\n            if colKey.length != 0 and rowKey.length != 0\n                if not @tree[flatRowKey]\n                    @tree[flatRowKey] = {}\n                if not @tree[flatRowKey][flatColKey]\n                    @tree[flatRowKey][flatColKey] = @aggregator(this, rowKey, colKey)\n                @tree[flatRowKey][flatColKey].push record\n\n        getAggregator: (rowKey, colKey) =>\n            flatRowKey = rowKey.join(String.fromCharCode(0))\n            flatColKey = colKey.join(String.fromCharCode(0))\n            if rowKey.length == 0 and colKey.length == 0\n                agg = @allTotal\n            else if rowKey.length == 0\n                agg = @colTotals[flatColKey]\n            else if colKey.length == 0\n                agg = @rowTotals[flatRowKey]\n            else\n                agg = @tree[flatRowKey][flatColKey]\n            return agg ? {value: (-> null), format: -> \"\"}\n\n    #expose these to the outside world\n    $.pivotUtilities = {aggregatorTemplates, aggregators, renderers, cellRenderers, derivers, locales,\n        naturalSort, numberFormat, sortAs, PivotData}\n\n    ###\n    Default Renderer for hierarchical table layout\n    ###\n\n    pivotTableRenderer = (pivotData, opts) ->\n\n        defaults =\n            table: clickCallback: null\n            localeStrings: totals: \"Totals\"\n            typeCellRenderer: cellRenderers.text\n            headCellRenderer: cellRenderers.text\n            dataCellRenderer: cellRenderers.text\n            \n        opts = $.extend(true, {}, defaults, opts)\n\n        colAttrs = pivotData.colAttrs\n        rowAttrs = pivotData.rowAttrs\n        rowKeys = pivotData.getRowKeys()\n        colKeys = pivotData.getColKeys()\n\n        if opts.table.clickCallback\n            getClickHandler = (value, rowValues, colValues) ->\n                filters = {}\n                filters[attr] = colValues[i] for own i, attr of colAttrs when colValues[i]?\n                filters[attr] = rowValues[i] for own i, attr of rowAttrs when rowValues[i]?\n                return (e) -> opts.table.clickCallback(e, value, filters, pivotData)\n\n        #now actually build the output\n        result = document.createElement(\"table\")\n        result.className = \"pvtTable\"\n\n        #helper function for setting row/col-span in pivotTableRenderer\n        spanSize = (arr, i, j) ->\n            if i != 0\n                noDraw = true\n                for x in [0..j]\n                    if arr[i-1][x] != arr[i][x]\n                        noDraw = false\n                if noDraw\n                  return -1 #do not draw cell\n            len = 0\n            while i+len < arr.length\n                stop = false\n                for x in [0..j]\n                    stop = true if arr[i][x] != arr[i+len][x]\n                break if stop\n                len++\n            return len\n\n        #the first few rows are for col headers\n        thead = document.createElement(\"thead\")\n        for own j, c of colAttrs\n            tr = document.createElement(\"tr\")\n            if parseInt(j) == 0 and rowAttrs.length != 0\n                th = document.createElement(\"th\")\n                th.setAttribute(\"colspan\", rowAttrs.length)\n                th.setAttribute(\"rowspan\", colAttrs.length)\n                tr.appendChild th\n            th = document.createElement(\"th\")\n            th.className = \"pvtAxisLabel\"\n            th.appendChild opts.typeCellRenderer(c)\n            tr.appendChild th\n            for own i, colKey of colKeys\n                x = spanSize(colKeys, parseInt(i), parseInt(j))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtColLabel\"\n                    th.appendChild opts.headCellRenderer(colKey[j], c)\n                    th.setAttribute(\"colspan\", x)\n                    if parseInt(j) == colAttrs.length-1 and rowAttrs.length != 0\n                        th.setAttribute(\"rowspan\", 2)\n                    tr.appendChild th\n            if parseInt(j) == 0\n                th = document.createElement(\"th\")\n                th.className = \"pvtTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n                th.setAttribute(\"rowspan\", colAttrs.length + (if rowAttrs.length ==0 then 0 else 1))\n                tr.appendChild th\n            thead.appendChild tr\n\n        #then a row for row header headers\n        if rowAttrs.length !=0\n            tr = document.createElement(\"tr\")\n            for own i, r of rowAttrs\n                th = document.createElement(\"th\")\n                th.className = \"pvtAxisLabel\"\n                th.appendChild opts.typeCellRenderer(r)\n                tr.appendChild th\n            th = document.createElement(\"th\")\n            if colAttrs.length ==0\n                th.className = \"pvtTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n            tr.appendChild th\n            thead.appendChild tr\n        result.appendChild thead\n\n        #now the actual data rows, with their row headers and totals\n        tbody = document.createElement(\"tbody\")\n        for own i, rowKey of rowKeys\n            tr = document.createElement(\"tr\")\n            for own j, txt of rowKey\n                x = spanSize(rowKeys, parseInt(i), parseInt(j))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtRowLabel\"\n                    th.appendChild opts.headCellRenderer(txt, rowAttrs[j])\n                    th.setAttribute(\"rowspan\", x)\n                    if parseInt(j) == rowAttrs.length-1 and colAttrs.length !=0\n                        th.setAttribute(\"colspan\",2)\n                    tr.appendChild th\n            for own j, colKey of colKeys #this is the tight loop\n                aggregator = pivotData.getAggregator(rowKey, colKey)\n                val = aggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtVal row#{i} col#{j}\"\n                td.appendChild opts.dataCellRenderer(aggregator.format(val), rowKey, colKey)\n                td.setAttribute(\"data-value\", val)\n                if getClickHandler?\n                    td.onclick = getClickHandler(val, rowKey, colKey)\n                tr.appendChild td\n\n            totalAggregator = pivotData.getAggregator(rowKey, [])\n            val = totalAggregator.value()\n            td = document.createElement(\"td\")\n            td.className = \"pvtTotal rowTotal\"\n            td.textContent = totalAggregator.format(val)\n            td.setAttribute(\"data-value\", val)\n            if getClickHandler?\n                td.onclick = getClickHandler(val, rowKey, [])\n            td.setAttribute(\"data-for\", \"row\"+i)\n            tr.appendChild td\n            tbody.appendChild tr\n\n        #finally, the row for col totals, and a grand total\n        tr = document.createElement(\"tr\")\n        th = document.createElement(\"th\")\n        th.className = \"pvtTotalLabel\"\n        th.innerHTML = opts.localeStrings.totals\n        th.setAttribute(\"colspan\", rowAttrs.length + (if colAttrs.length == 0 then 0 else 1))\n        tr.appendChild th\n        for own j, colKey of colKeys\n            totalAggregator = pivotData.getAggregator([], colKey)\n            val = totalAggregator.value()\n            td = document.createElement(\"td\")\n            td.className = \"pvtTotal colTotal\"\n            td.textContent = totalAggregator.format(val)\n            td.setAttribute(\"data-value\", val)\n            if getClickHandler?\n                td.onclick = getClickHandler(val, [], colKey)\n            td.setAttribute(\"data-for\", \"col\"+j)\n            tr.appendChild td\n        totalAggregator = pivotData.getAggregator([], [])\n        val = totalAggregator.value()\n        td = document.createElement(\"td\")\n        td.className = \"pvtGrandTotal\"\n        td.textContent = totalAggregator.format(val)\n        td.setAttribute(\"data-value\", val)\n        if getClickHandler?\n            td.onclick = getClickHandler(val, [], [])\n        tr.appendChild td\n        tbody.appendChild tr\n        result.appendChild tbody\n\n        #squirrel this away for later\n        result.setAttribute(\"data-numrows\", rowKeys.length)\n        result.setAttribute(\"data-numcols\", colKeys.length)\n\n        return result\n\n    ###\n    Pivot Table core: create PivotData object and call Renderer on it\n    ###\n\n    $.fn.pivot = (input, inputOpts, locale=\"en\") ->\n        locale = \"en\" if not locales[locale]?\n        defaults =\n            cols : [], rows: [], vals: []\n            rowOrder: \"key_a_to_z\", colOrder: \"key_a_to_z\"\n            dataClass: PivotData\n            filter: -> true\n            aggregator: aggregatorTemplates.count()()\n            aggregatorName: \"Count\"\n            sorters: {}\n            derivedAttributes: {}\n            renderer: pivotTableRenderer\n\n        localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings)\n        localeDefaults =\n            rendererOptions: {localeStrings}\n            localeStrings: localeStrings\n\n        opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts))\n\n        result = null\n        try\n            pivotData = new opts.dataClass(input, opts)\n            try\n                result = opts.renderer(pivotData, opts.rendererOptions)\n            catch e\n                console.error(e.stack) if console?\n                result = $(\"<span>\").html opts.localeStrings.renderError\n        catch e\n            console.error(e.stack) if console?\n            result = $(\"<span>\").html opts.localeStrings.computeError\n\n        x = this[0]\n        x.removeChild(x.lastChild) while x.hasChildNodes()\n        return @append result\n\n\n    ###\n    Pivot Table UI: calls Pivot Table core above with options set by user\n    ###\n\n    $.fn.pivotUI = (input, inputOpts, overwrite = false, locale=\"en\") ->\n        locale = \"en\" if not locales[locale]?\n        defaults =\n            derivedAttributes: {}\n            aggregators: locales[locale].aggregators\n            renderers: locales[locale].renderers\n            hiddenAttributes: []\n            menuLimit: 500\n            cols: [], rows: [], vals: []\n            rowOrder: \"key_a_to_z\", colOrder: \"key_a_to_z\"\n            dataClass: PivotData\n            exclusions: {}\n            inclusions: {}\n            unusedAttrsVertical: 85\n            autoSortUnusedAttrs: false\n            onRefresh: null\n            filter: -> true\n            sorters: {}\n\n        localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings)\n        localeDefaults =\n            rendererOptions: {localeStrings}\n            localeStrings: localeStrings\n\n        existingOpts = @data \"pivotUIOptions\"\n        if not existingOpts? or overwrite\n            opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts))\n        else\n            opts = existingOpts\n\n        try\n            # do a first pass on the data to cache a materialized copy of any\n            # function-valued inputs and to compute dimension cardinalities\n            attrValues = {}\n            materializedInput = []\n            recordsProcessed = 0\n            PivotData.forEachRecord input, opts.derivedAttributes, (record) ->\n                return unless opts.filter(record)\n                materializedInput.push(record)\n                for own attr of record\n                    if not attrValues[attr]?\n                        attrValues[attr] = {}\n                        if recordsProcessed > 0\n                            attrValues[attr][\"null\"] = recordsProcessed\n                for attr of attrValues\n                    value = record[attr] ? \"null\"\n                    attrValues[attr][value] ?= 0\n                    attrValues[attr][value]++\n                recordsProcessed++\n\n            #start building the output\n            uiTable = $(\"<table>\", \"class\": \"pvtUi\").attr(\"cellpadding\", 5)\n\n            #renderer control\n            rendererControl = $(\"<td>\")\n\n            renderer = $(\"<select>\")\n                .addClass('pvtRenderer')\n                .appendTo(rendererControl)\n                .bind \"change\", -> refresh() #capture reference\n            for own x of opts.renderers\n                $(\"<option>\").val(x).html(x).appendTo(renderer)\n\n\n            #axis list, including the double-click menu\n            unused = $(\"<td>\").addClass('pvtAxisContainer pvtUnused')\n            shownAttributes = (a for a of attrValues when a not in opts.hiddenAttributes)\n\n            unusedAttrsVerticalAutoOverride = false\n            if opts.unusedAttrsVertical == \"auto\"\n                unusedAttrsVerticalAutoCutoff = 120 # legacy support\n            else\n                unusedAttrsVerticalAutoCutoff = parseInt opts.unusedAttrsVertical\n\n            if not isNaN(unusedAttrsVerticalAutoCutoff)\n                attrLength = 0\n                attrLength += a.length for a in shownAttributes\n                unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff\n\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\n                unused.addClass('pvtVertList')\n            else\n                unused.addClass('pvtHorizList')\n\n            for own i, attr of shownAttributes\n                do (attr) ->\n                    values = (v for v of attrValues[attr])\n                    hasExcludedItem = false\n                    valueList = $(\"<div>\").addClass('pvtFilterBox').hide()\n\n                    valueList.append $(\"<h4>\").append(\n                        $(\"<span>\").text(attr),\n                        $(\"<span>\").addClass(\"count\").text(\"(#{values.length})\"),\n                        )\n                    if values.length > opts.menuLimit\n                        valueList.append $(\"<p>\").html(opts.localeStrings.tooMany)\n                    else\n                        if values.length > 5\n                            controls = $(\"<p>\").appendTo(valueList)\n                            sorter = getSort(opts.sorters, attr)\n                            placeholder = opts.localeStrings.filterResults\n                            $(\"<input>\", {type: \"text\"}).appendTo(controls)\n                                .attr({placeholder: placeholder, class: \"pvtSearch\"})\n                                .bind \"keyup\", ->\n                                    filter = $(this).val().toLowerCase().trim()\n                                    accept_gen = (prefix, accepted) -> (v) ->\n                                        real_filter = filter.substring(prefix.length).trim()\n                                        return true if real_filter.length == 0\n                                        return Math.sign(sorter(v.toLowerCase(), real_filter)) in accepted\n                                    accept =\n                                        if      filter.startsWith(\">=\") then accept_gen(\">=\", [1,0])\n                                        else if filter.startsWith(\"<=\") then accept_gen(\"<=\", [-1,0])\n                                        else if filter.startsWith(\">\")  then accept_gen(\">\",  [1])\n                                        else if filter.startsWith(\"<\")  then accept_gen(\"<\",  [-1])\n                                        else if filter.startsWith(\"~\")  then (v) ->\n                                                return true if filter.substring(1).trim().length == 0\n                                                v.toLowerCase().match(filter.substring(1))\n                                        else (v) -> v.toLowerCase().indexOf(filter) != -1\n\n                                    valueList.find('.pvtCheckContainer p label span.value').each ->\n                                        if accept($(this).text())\n                                            $(this).parent().parent().show()\n                                        else\n                                            $(this).parent().parent().hide()\n                            controls.append $(\"<br>\")\n                            $(\"<button>\", {type:\"button\"}).appendTo(controls)\n                                .html(opts.localeStrings.selectAll)\n                                .bind \"click\", ->\n                                    valueList.find(\"input:visible:not(:checked)\")\n                                        .prop(\"checked\", true).toggleClass(\"changed\")\n                                    return false\n                            $(\"<button>\", {type:\"button\"}).appendTo(controls)\n                                .html(opts.localeStrings.selectNone)\n                                .bind \"click\", ->\n                                    valueList.find(\"input:visible:checked\")\n                                        .prop(\"checked\", false).toggleClass(\"changed\")\n                                    return false\n\n                        checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList)\n\n                        for value in values.sort(getSort(opts.sorters, attr))\n                             valueCount = attrValues[attr][value]\n                             filterItem = $(\"<label>\")\n                             filterItemExcluded = false\n                             if opts.inclusions[attr]\n                                filterItemExcluded = (value not in opts.inclusions[attr])\n                             else if opts.exclusions[attr]\n                                filterItemExcluded = (value in opts.exclusions[attr])\n                             hasExcludedItem ||= filterItemExcluded\n                             $(\"<input>\")\n                                .attr(\"type\", \"checkbox\").addClass('pvtFilter')\n                                .attr(\"checked\", !filterItemExcluded).data(\"filter\", [attr,value])\n                                .appendTo(filterItem)\n                                .bind \"change\", -> $(this).toggleClass(\"changed\")\n                             filterItem.append $(\"<span>\").addClass(\"value\").text(value)\n                             filterItem.append $(\"<span>\").addClass(\"count\").text(\"(\"+valueCount+\")\")\n                             checkContainer.append $(\"<p>\").append(filterItem)\n\n                    closeFilterBox = ->\n                        if valueList.find(\"[type='checkbox']\").length >\n                               valueList.find(\"[type='checkbox']:checked\").length\n                                attrElem.addClass \"pvtFilteredAttribute\"\n                            else\n                                attrElem.removeClass \"pvtFilteredAttribute\"\n\n                            valueList.find('.pvtSearch').val('')\n                            valueList.find('.pvtCheckContainer p').show()\n                            valueList.hide()\n\n                    finalButtons = $(\"<p>\").appendTo(valueList)\n\n                    if values.length <= opts.menuLimit\n                        $(\"<button>\", {type: \"button\"}).text(opts.localeStrings.apply)\n                            .appendTo(finalButtons).bind \"click\", ->\n                                if valueList.find(\".changed\").removeClass(\"changed\").length\n                                    refresh()\n                                closeFilterBox()\n\n                    $(\"<button>\", {type: \"button\"}).text(opts.localeStrings.cancel)\n                        .appendTo(finalButtons).bind \"click\", ->\n                            valueList.find(\".changed:checked\")\n                                .removeClass(\"changed\").prop(\"checked\", false)\n                            valueList.find(\".changed:not(:checked)\")\n                                .removeClass(\"changed\").prop(\"checked\", true)\n                            closeFilterBox()\n\n                    triangleLink = $(\"<span>\").addClass('pvtTriangle')\n                        .html(\" &#x25BE;\").bind \"click\", (e) ->\n                            {left, top} = $(e.currentTarget).position()\n                            valueList.css(left: left+10, top: top+10).show()\n\n                    attrElem = $(\"<li>\").addClass(\"axis_#{i}\")\n                        .append $(\"<span>\").addClass('pvtAttr').text(attr).data(\"attrName\", attr).append(triangleLink)\n\n                    attrElem.addClass('pvtFilteredAttribute') if hasExcludedItem\n                    unused.append(attrElem).append(valueList)\n\n            tr1 = $(\"<tr>\").appendTo(uiTable)\n\n            #aggregator menu and value area\n\n            aggregator = $(\"<select>\").addClass('pvtAggregator')\n                .bind \"change\", -> refresh() #capture reference\n            for own x of opts.aggregators\n                aggregator.append $(\"<option>\").val(x).html(x)\n\n            ordering =\n                key_a_to_z:   {rowSymbol: \"&varr;\", colSymbol: \"&harr;\", next: \"value_a_to_z\"}\n                value_a_to_z: {rowSymbol: \"&darr;\", colSymbol: \"&rarr;\", next: \"value_z_to_a\"}\n                value_z_to_a: {rowSymbol: \"&uarr;\", colSymbol: \"&larr;\", next: \"key_a_to_z\"}\n\n            rowOrderArrow = $(\"<a>\", role: \"button\").addClass(\"pvtRowOrder\")\n                .data(\"order\", opts.rowOrder).html(ordering[opts.rowOrder].rowSymbol)\n                .bind \"click\", ->\n                    $(this).data(\"order\", ordering[$(this).data(\"order\")].next)\n                    $(this).html(ordering[$(this).data(\"order\")].rowSymbol)\n                    refresh()\n\n            colOrderArrow = $(\"<a>\", role: \"button\").addClass(\"pvtColOrder\")\n                .data(\"order\", opts.colOrder).html(ordering[opts.colOrder].colSymbol)\n                .bind \"click\", ->\n                    $(this).data(\"order\", ordering[$(this).data(\"order\")].next)\n                    $(this).html(ordering[$(this).data(\"order\")].colSymbol)\n                    refresh()\n\n            $(\"<td>\").addClass('pvtVals')\n              .appendTo(tr1)\n              .append(aggregator)\n              .append(rowOrderArrow)\n              .append(colOrderArrow)\n              .append($(\"<br>\"))\n\n            #column axes\n            $(\"<td>\").addClass('pvtAxisContainer pvtHorizList pvtCols').appendTo(tr1)\n\n            tr2 = $(\"<tr>\").appendTo(uiTable)\n\n            #row axes\n            tr2.append $(\"<td>\").addClass('pvtAxisContainer pvtRows').attr(\"valign\", \"top\")\n\n            #the actual pivot table container\n            pivotTable = $(\"<td>\")\n                .attr(\"valign\", \"top\")\n                .addClass('pvtRendererArea')\n                .appendTo(tr2)\n\n            #finally the renderer dropdown and unused attribs are inserted at the requested location\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\n                uiTable.find('tr:nth-child(1)').prepend rendererControl\n                uiTable.find('tr:nth-child(2)').prepend unused\n            else\n                uiTable.prepend $(\"<tr>\").append(rendererControl).append(unused)\n\n            #render the UI in its default state\n            @html uiTable\n\n            #set up the UI initial state as requested by moving elements around\n\n            for x in opts.cols\n                @find(\".pvtCols\").append @find(\".axis_#{$.inArray(x, shownAttributes)}\")\n            for x in opts.rows\n                @find(\".pvtRows\").append @find(\".axis_#{$.inArray(x, shownAttributes)}\")\n            if opts.aggregatorName?\n                @find(\".pvtAggregator\").val opts.aggregatorName\n            if opts.rendererName?\n                @find(\".pvtRenderer\").val opts.rendererName\n\n            initialRender = true\n\n            #set up for refreshing\n            refreshDelayed = =>\n                subopts =\n                    derivedAttributes: opts.derivedAttributes\n                    localeStrings: opts.localeStrings\n                    rendererOptions: opts.rendererOptions\n                    sorters: opts.sorters\n                    cols: [], rows: []\n                    dataClass: opts.dataClass\n\n                numInputsToProcess = opts.aggregators[aggregator.val()]([])().numInputs ? 0\n                vals = []\n                @find(\".pvtRows li span.pvtAttr\").each -> subopts.rows.push $(this).data(\"attrName\")\n                @find(\".pvtCols li span.pvtAttr\").each -> subopts.cols.push $(this).data(\"attrName\")\n                @find(\".pvtVals select.pvtAttrDropdown\").each ->\n                    if numInputsToProcess == 0\n                        $(this).remove()\n                    else\n                        numInputsToProcess--\n                        vals.push $(this).val() if $(this).val() != \"\"\n\n                if numInputsToProcess != 0\n                    pvtVals = @find(\".pvtVals\")\n                    for x in [0...numInputsToProcess]\n                        newDropdown = $(\"<select>\")\n                            .addClass('pvtAttrDropdown')\n                            .append($(\"<option>\"))\n                            .bind \"change\", -> refresh()\n                        for attr in shownAttributes\n                            newDropdown.append($(\"<option>\").val(attr).text(attr))\n                        pvtVals.append(newDropdown)\n\n                if initialRender\n                    vals = opts.vals\n                    i = 0\n                    @find(\".pvtVals select.pvtAttrDropdown\").each ->\n                        $(this).val vals[i]\n                        i++\n                    initialRender = false\n\n                subopts.aggregatorName = aggregator.val()\n                subopts.vals = vals\n                subopts.aggregator = opts.aggregators[aggregator.val()](vals)\n                subopts.renderer = opts.renderers[renderer.val()]\n                subopts.rowOrder = rowOrderArrow.data(\"order\")\n                subopts.colOrder = colOrderArrow.data(\"order\")\n                #construct filter here\n                exclusions = {}\n                @find('input.pvtFilter').not(':checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        exclusions[filter[0]].push( filter[1] )\n                    else\n                        exclusions[filter[0]] = [ filter[1] ]\n                #include inclusions when exclusions present\n                inclusions = {}\n                @find('input.pvtFilter:checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        if inclusions[filter[0]]?\n                            inclusions[filter[0]].push( filter[1] )\n                        else\n                            inclusions[filter[0]] = [ filter[1] ]\n\n                subopts.filter = (record) ->\n                    return false if not opts.filter(record)\n                    for k,excludedItems of exclusions\n                        return false if \"\"+(record[k] ? 'null') in excludedItems\n                    return true\n\n                pivotTable.pivot(materializedInput,subopts)\n                pivotUIOptions = $.extend {}, opts,\n                    cols: subopts.cols\n                    rows: subopts.rows\n                    colOrder: subopts.colOrder\n                    rowOrder: subopts.rowOrder\n                    vals: vals\n                    exclusions: exclusions\n                    inclusions: inclusions\n                    inclusionsInfo: inclusions #duplicated for backwards-compatibility\n                    aggregatorName: aggregator.val()\n                    rendererName: renderer.val()\n\n                @data \"pivotUIOptions\", pivotUIOptions\n\n                # if requested make sure unused columns are in alphabetical order\n                if opts.autoSortUnusedAttrs\n                    unusedAttrsContainer = @find(\"td.pvtUnused.pvtAxisContainer\")\n                    $(unusedAttrsContainer).children(\"li\")\n                        .sort((a, b) => naturalSort($(a).text(), $(b).text()))\n                        .appendTo unusedAttrsContainer\n\n                pivotTable.css(\"opacity\", 1)\n                opts.onRefresh(pivotUIOptions) if opts.onRefresh?\n\n            refresh = =>\n                pivotTable.css(\"opacity\", 0.5)\n                setTimeout refreshDelayed, 10\n\n            #the very first refresh will actually display the table\n            refresh()\n\n            @find(\".pvtAxisContainer\").sortable\n                    update: (e, ui) -> refresh() if not ui.sender?\n                    connectWith: @find(\".pvtAxisContainer\")\n                    items: 'li'\n                    placeholder: 'pvtPlaceholder'\n        catch e\n            console.error(e.stack) if console?\n            @html opts.localeStrings.uiRenderError\n        return this\n\n    ###\n    Heatmap post-processing\n    ###\n\n    $.fn.heatmap = (scope = \"heatmap\", opts) ->\n        numRows = @data \"numrows\"\n        numCols = @data \"numcols\"\n\n        # given a series of values\n        # must return a function to map a given value to a CSS color\n        colorScaleGenerator = opts?.heatmap?.colorScaleGenerator\n        colorScaleGenerator ?= (values) ->\n            min = Math.min(values...)\n            max = Math.max(values...)\n            return (x) ->\n                nonRed = 255 - Math.round 255*(x-min)/(max-min)\n                return \"rgb(255,#{nonRed},#{nonRed})\"\n\n        heatmapper = (scope) =>\n            forEachCell = (f) =>\n                @find(scope).each ->\n                    x = $(this).data(\"value\")\n                    f(x, $(this)) if x? and isFinite(x)\n\n            values = []\n            forEachCell (x) -> values.push x\n            colorScale = colorScaleGenerator(values)\n            forEachCell (x, elem) -> elem.css \"background-color\", colorScale(x)\n\n        switch scope\n            when \"heatmap\"    then heatmapper \".pvtVal\"\n            when \"rowheatmap\" then heatmapper \".pvtVal.row#{i}\" for i in [0...numRows]\n            when \"colheatmap\" then heatmapper \".pvtVal.col#{j}\" for j in [0...numCols]\n\n        heatmapper \".pvtTotal.rowTotal\"\n        heatmapper \".pvtTotal.colTotal\"\n\n        return this\n\n    ###\n    Barchart post-processing\n    ###\n\n    $.fn.barchart =  ->\n        numRows = @data \"numrows\"\n        numCols = @data \"numcols\"\n\n        barcharter = (scope) =>\n            forEachCell = (f) =>\n                @find(scope).each ->\n                    x = $(this).data(\"value\")\n                    f(x, $(this)) if x? and isFinite(x)\n\n            values = []\n            forEachCell (x) -> values.push x\n            max = Math.max(values...)\n            scaler = (x) -> 100*x/(1.4*max)\n            forEachCell (x, elem) ->\n                text = elem.text()\n                wrapper = $(\"<div>\").css\n                    \"position\": \"relative\"\n                    \"height\": \"55px\"\n                wrapper.append $(\"<div>\").css\n                    \"position\": \"absolute\"\n                    \"bottom\": 0\n                    \"left\": 0\n                    \"right\": 0\n                    \"height\": scaler(x) + \"%\"\n                    \"background-color\": \"gray\"\n                wrapper.append $(\"<div>\").text(text).css\n                    \"position\":\"relative\"\n                    \"padding-left\":\"5px\"\n                    \"padding-right\":\"5px\"\n\n                elem.css(\"padding\": 0,\"padding-top\": \"5px\", \"text-align\": \"center\").html wrapper\n\n        barcharter \".pvtVal.row#{i}\" for i in [0...numRows]\n        barcharter \".pvtTotal.colTotal\"\n\n        return this\n","(function() {\n  var callWithJQuery,\n    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },\n    slice = [].slice,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    hasProp = {}.hasOwnProperty;\n\n  callWithJQuery = function(pivotModule) {\n    if (typeof exports === \"object\" && typeof module === \"object\") {\n      return pivotModule(require(\"jquery\"));\n    } else if (typeof define === \"function\" && define.amd) {\n      return define([\"jquery\"], pivotModule);\n    } else {\n      return pivotModule(jQuery);\n    }\n  };\n\n  callWithJQuery(function($) {\n\n    /*\n    Utilities\n     */\n    var PivotData, addSeparators, aggregatorTemplates, aggregators, cellRenderers, dayNamesEn, derivers, getSort, locales, mthNamesEn, naturalSort, numberFormat, pivotTableRenderer, rd, renderers, rx, rz, sortAs, usFmt, usFmtInt, usFmtPct, zeroPad;\n    addSeparators = function(nStr, thousandsSep, decimalSep) {\n      var rgx, x, x1, x2;\n      nStr += '';\n      x = nStr.split('.');\n      x1 = x[0];\n      x2 = x.length > 1 ? decimalSep + x[1] : '';\n      rgx = /(\\d+)(\\d{3})/;\n      while (rgx.test(x1)) {\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2');\n      }\n      return x1 + x2;\n    };\n    numberFormat = function(opts) {\n      var defaults;\n      defaults = {\n        digitsAfterDecimal: 2,\n        scaler: 1,\n        thousandsSep: \",\",\n        decimalSep: \".\",\n        prefix: \"\",\n        suffix: \"\"\n      };\n      opts = $.extend({}, defaults, opts);\n      return function(x) {\n        var result;\n        if (isNaN(x) || !isFinite(x)) {\n          return \"\";\n        }\n        result = addSeparators((opts.scaler * x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep);\n        return \"\" + opts.prefix + result + opts.suffix;\n      };\n    };\n    usFmt = numberFormat();\n    usFmtInt = numberFormat({\n      digitsAfterDecimal: 0\n    });\n    usFmtPct = numberFormat({\n      digitsAfterDecimal: 1,\n      scaler: 100,\n      suffix: \"%\"\n    });\n    aggregatorTemplates = {\n      count: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function() {\n          return function(data, rowKey, colKey) {\n            return {\n              count: 0,\n              push: function() {\n                return this.count++;\n              },\n              value: function() {\n                return this.count;\n              },\n              format: formatter\n            };\n          };\n        };\n      },\n      uniques: function(fn, formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              uniq: [],\n              push: function(record) {\n                var ref;\n                if (ref = record[attr], indexOf.call(this.uniq, ref) < 0) {\n                  return this.uniq.push(record[attr]);\n                }\n              },\n              value: function() {\n                return fn(this.uniq);\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              sum: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[attr]))) {\n                  return this.sum += parseFloat(record[attr]);\n                }\n              },\n              value: function() {\n                return this.sum;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      extremes: function(mode, formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              val: null,\n              sorter: getSort(data != null ? data.sorters : void 0, attr),\n              push: function(record) {\n                var ref, ref1, ref2, x;\n                x = record[attr];\n                if (mode === \"min\" || mode === \"max\") {\n                  x = parseFloat(x);\n                  if (!isNaN(x)) {\n                    this.val = Math[mode](x, (ref = this.val) != null ? ref : x);\n                  }\n                }\n                if (mode === \"first\") {\n                  if (this.sorter(x, (ref1 = this.val) != null ? ref1 : x) <= 0) {\n                    this.val = x;\n                  }\n                }\n                if (mode === \"last\") {\n                  if (this.sorter(x, (ref2 = this.val) != null ? ref2 : x) >= 0) {\n                    return this.val = x;\n                  }\n                }\n              },\n              value: function() {\n                return this.val;\n              },\n              format: function(x) {\n                if (isNaN(x)) {\n                  return x;\n                } else {\n                  return formatter(x);\n                }\n              },\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      quantile: function(q, formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              vals: [],\n              push: function(record) {\n                var x;\n                x = parseFloat(record[attr]);\n                if (!isNaN(x)) {\n                  return this.vals.push(x);\n                }\n              },\n              value: function() {\n                var i;\n                if (this.vals.length === 0) {\n                  return null;\n                }\n                this.vals.sort(function(a, b) {\n                  return a - b;\n                });\n                i = (this.vals.length - 1) * q;\n                return (this.vals[Math.floor(i)] + this.vals[Math.ceil(i)]) / 2.0;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      runningStat: function(mode, ddof, formatter) {\n        if (mode == null) {\n          mode = \"mean\";\n        }\n        if (ddof == null) {\n          ddof = 1;\n        }\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              n: 0.0,\n              m: 0.0,\n              s: 0.0,\n              push: function(record) {\n                var m_new, x;\n                x = parseFloat(record[attr]);\n                if (isNaN(x)) {\n                  return;\n                }\n                this.n += 1.0;\n                if (this.n === 1.0) {\n                  return this.m = x;\n                } else {\n                  m_new = this.m + (x - this.m) / this.n;\n                  this.s = this.s + (x - this.m) * (x - m_new);\n                  return this.m = m_new;\n                }\n              },\n              value: function() {\n                if (mode === \"mean\") {\n                  if (this.n === 0) {\n                    return 0 / 0;\n                  } else {\n                    return this.m;\n                  }\n                }\n                if (this.n <= ddof) {\n                  return 0;\n                }\n                switch (mode) {\n                  case \"var\":\n                    return this.s / (this.n - ddof);\n                  case \"stdev\":\n                    return Math.sqrt(this.s / (this.n - ddof));\n                }\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sumOverSum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var denom, num;\n          num = arg[0], denom = arg[1];\n          return function(data, rowKey, colKey) {\n            return {\n              sumNum: 0,\n              sumDenom: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[num]))) {\n                  this.sumNum += parseFloat(record[num]);\n                }\n                if (!isNaN(parseFloat(record[denom]))) {\n                  return this.sumDenom += parseFloat(record[denom]);\n                }\n              },\n              value: function() {\n                return this.sumNum / this.sumDenom;\n              },\n              format: formatter,\n              numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n          };\n        };\n      },\n      sumOverSumBound80: function(upper, formatter) {\n        if (upper == null) {\n          upper = true;\n        }\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var denom, num;\n          num = arg[0], denom = arg[1];\n          return function(data, rowKey, colKey) {\n            return {\n              sumNum: 0,\n              sumDenom: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[num]))) {\n                  this.sumNum += parseFloat(record[num]);\n                }\n                if (!isNaN(parseFloat(record[denom]))) {\n                  return this.sumDenom += parseFloat(record[denom]);\n                }\n              },\n              value: function() {\n                var sign;\n                sign = upper ? 1 : -1;\n                return (0.821187207574908 / this.sumDenom + this.sumNum / this.sumDenom + 1.2815515655446004 * sign * Math.sqrt(0.410593603787454 / (this.sumDenom * this.sumDenom) + (this.sumNum * (1 - this.sumNum / this.sumDenom)) / (this.sumDenom * this.sumDenom))) / (1 + 1.642374415149816 / this.sumDenom);\n              },\n              format: formatter,\n              numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n          };\n        };\n      },\n      fractionOf: function(wrapped, type, formatter) {\n        if (type == null) {\n          type = \"total\";\n        }\n        if (formatter == null) {\n          formatter = usFmtPct;\n        }\n        return function() {\n          var x;\n          x = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          return function(data, rowKey, colKey) {\n            return {\n              selector: {\n                total: [[], []],\n                row: [rowKey, []],\n                col: [[], colKey]\n              }[type],\n              inner: wrapped.apply(null, x)(data, rowKey, colKey),\n              push: function(record) {\n                return this.inner.push(record);\n              },\n              format: formatter,\n              value: function() {\n                return this.inner.value() / data.getAggregator.apply(data, this.selector).inner.value();\n              },\n              numInputs: wrapped.apply(null, x)().numInputs\n            };\n          };\n        };\n      }\n    };\n    aggregatorTemplates.countUnique = function(f) {\n      return aggregatorTemplates.uniques((function(x) {\n        return x.length;\n      }), f);\n    };\n    aggregatorTemplates.listUnique = function(s) {\n      return aggregatorTemplates.uniques((function(x) {\n        return x.join(s);\n      }), (function(x) {\n        return x;\n      }));\n    };\n    aggregatorTemplates.max = function(f) {\n      return aggregatorTemplates.extremes('max', f);\n    };\n    aggregatorTemplates.min = function(f) {\n      return aggregatorTemplates.extremes('min', f);\n    };\n    aggregatorTemplates.first = function(f) {\n      return aggregatorTemplates.extremes('first', f);\n    };\n    aggregatorTemplates.last = function(f) {\n      return aggregatorTemplates.extremes('last', f);\n    };\n    aggregatorTemplates.median = function(f) {\n      return aggregatorTemplates.quantile(0.5, f);\n    };\n    aggregatorTemplates.average = function(f) {\n      return aggregatorTemplates.runningStat(\"mean\", 1, f);\n    };\n    aggregatorTemplates[\"var\"] = function(ddof, f) {\n      return aggregatorTemplates.runningStat(\"var\", ddof, f);\n    };\n    aggregatorTemplates.stdev = function(ddof, f) {\n      return aggregatorTemplates.runningStat(\"stdev\", ddof, f);\n    };\n    aggregators = (function(tpl) {\n      return {\n        \"Count\": tpl.count(usFmtInt),\n        \"Count Unique Values\": tpl.countUnique(usFmtInt),\n        \"List Unique Values\": tpl.listUnique(\", \"),\n        \"Sum\": tpl.sum(usFmt),\n        \"Integer Sum\": tpl.sum(usFmtInt),\n        \"Average\": tpl.average(usFmt),\n        \"Median\": tpl.median(usFmt),\n        \"Sample Variance\": tpl[\"var\"](1, usFmt),\n        \"Sample Standard Deviation\": tpl.stdev(1, usFmt),\n        \"Minimum\": tpl.min(usFmt),\n        \"Maximum\": tpl.max(usFmt),\n        \"First\": tpl.first(usFmt),\n        \"Last\": tpl.last(usFmt),\n        \"Sum over Sum\": tpl.sumOverSum(usFmt),\n        \"80% Upper Bound\": tpl.sumOverSumBound80(true, usFmt),\n        \"80% Lower Bound\": tpl.sumOverSumBound80(false, usFmt),\n        \"Sum as Fraction of Total\": tpl.fractionOf(tpl.sum(), \"total\", usFmtPct),\n        \"Sum as Fraction of Rows\": tpl.fractionOf(tpl.sum(), \"row\", usFmtPct),\n        \"Sum as Fraction of Columns\": tpl.fractionOf(tpl.sum(), \"col\", usFmtPct),\n        \"Count as Fraction of Total\": tpl.fractionOf(tpl.count(), \"total\", usFmtPct),\n        \"Count as Fraction of Rows\": tpl.fractionOf(tpl.count(), \"row\", usFmtPct),\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\", usFmtPct)\n      };\n    })(aggregatorTemplates);\n    renderers = {\n      \"Table\": function(data, opts) {\n        return pivotTableRenderer(data, opts);\n      },\n      \"Table Barchart\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).barchart();\n      },\n      \"Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"heatmap\", opts);\n      },\n      \"Row Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"rowheatmap\", opts);\n      },\n      \"Col Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"colheatmap\", opts);\n      }\n    };\n    cellRenderers = {\n      text: function(value) {\n        return document.createTextNode(value);\n      },\n      byType: function(opts, def) {\n        return function(value, type) {\n          return (opts[type] || def || cellRenderers.text).apply(this, arguments);\n        };\n      }\n    };\n    locales = {\n      en: {\n        aggregators: aggregators,\n        renderers: renderers,\n        localeStrings: {\n          renderError: \"An error occurred rendering the PivotTable results.\",\n          computeError: \"An error occurred computing the PivotTable results.\",\n          uiRenderError: \"An error occurred rendering the PivotTable UI.\",\n          selectAll: \"Select All\",\n          selectNone: \"Select None\",\n          tooMany: \"(too many to list)\",\n          filterResults: \"Filter values\",\n          apply: \"Apply\",\n          cancel: \"Cancel\",\n          totals: \"Totals\",\n          vs: \"vs\",\n          by: \"by\"\n        }\n      }\n    };\n    mthNamesEn = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    dayNamesEn = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n    zeroPad = function(number) {\n      return (\"0\" + number).substr(-2, 2);\n    };\n    derivers = {\n      bin: function(col, binWidth) {\n        return function(record) {\n          return record[col] - record[col] % binWidth;\n        };\n      },\n      dateFormat: function(col, formatString, utcOutput, mthNames, dayNames) {\n        var utc;\n        if (utcOutput == null) {\n          utcOutput = false;\n        }\n        if (mthNames == null) {\n          mthNames = mthNamesEn;\n        }\n        if (dayNames == null) {\n          dayNames = dayNamesEn;\n        }\n        utc = utcOutput ? \"UTC\" : \"\";\n        return function(record) {\n          var date;\n          date = new Date(Date.parse(record[col]));\n          if (isNaN(date)) {\n            return \"\";\n          }\n          return formatString.replace(/%(.)/g, function(m, p) {\n            switch (p) {\n              case \"y\":\n                return date[\"get\" + utc + \"FullYear\"]();\n              case \"m\":\n                return zeroPad(date[\"get\" + utc + \"Month\"]() + 1);\n              case \"n\":\n                return mthNames[date[\"get\" + utc + \"Month\"]()];\n              case \"d\":\n                return zeroPad(date[\"get\" + utc + \"Date\"]());\n              case \"w\":\n                return dayNames[date[\"get\" + utc + \"Day\"]()];\n              case \"x\":\n                return date[\"get\" + utc + \"Day\"]();\n              case \"H\":\n                return zeroPad(date[\"get\" + utc + \"Hours\"]());\n              case \"M\":\n                return zeroPad(date[\"get\" + utc + \"Minutes\"]());\n              case \"S\":\n                return zeroPad(date[\"get\" + utc + \"Seconds\"]());\n              default:\n                return \"%\" + p;\n            }\n          });\n        };\n      }\n    };\n    rx = /(\\d+)|(\\D+)/g;\n    rd = /\\d/;\n    rz = /^0/;\n    naturalSort = (function(_this) {\n      return function(as, bs) {\n        var a, a1, b, b1, nas, nbs;\n        if ((bs != null) && (as == null)) {\n          return -1;\n        }\n        if ((as != null) && (bs == null)) {\n          return 1;\n        }\n        if (typeof as === \"number\" && isNaN(as)) {\n          return -1;\n        }\n        if (typeof bs === \"number\" && isNaN(bs)) {\n          return 1;\n        }\n        nas = +as;\n        nbs = +bs;\n        if (nas < nbs) {\n          return -1;\n        }\n        if (nas > nbs) {\n          return 1;\n        }\n        if (typeof as === \"number\" && typeof bs !== \"number\") {\n          return -1;\n        }\n        if (typeof bs === \"number\" && typeof as !== \"number\") {\n          return 1;\n        }\n        if (typeof as === \"number\" && typeof bs === \"number\") {\n          return 0;\n        }\n        if (isNaN(nbs) && !isNaN(nas)) {\n          return -1;\n        }\n        if (isNaN(nas) && !isNaN(nbs)) {\n          return 1;\n        }\n        a = String(as);\n        b = String(bs);\n        if (a === b) {\n          return 0;\n        }\n        if (!(rd.test(a) && rd.test(b))) {\n          return (a > b ? 1 : -1);\n        }\n        a = a.match(rx);\n        b = b.match(rx);\n        while (a.length && b.length) {\n          a1 = a.shift();\n          b1 = b.shift();\n          if (a1 !== b1) {\n            if (rd.test(a1) && rd.test(b1)) {\n              return a1.replace(rz, \".0\") - b1.replace(rz, \".0\");\n            } else {\n              return (a1 > b1 ? 1 : -1);\n            }\n          }\n        }\n        return a.length - b.length;\n      };\n    })(this);\n    sortAs = function(order) {\n      var i, l_mapping, mapping, x;\n      mapping = {};\n      l_mapping = {};\n      for (i in order) {\n        x = order[i];\n        mapping[x] = i;\n        if (typeof x === \"string\") {\n          l_mapping[x.toLowerCase()] = i;\n        }\n      }\n      return function(a, b) {\n        if ((mapping[a] != null) && (mapping[b] != null)) {\n          return mapping[a] - mapping[b];\n        } else if (mapping[a] != null) {\n          return -1;\n        } else if (mapping[b] != null) {\n          return 1;\n        } else if ((l_mapping[a] != null) && (l_mapping[b] != null)) {\n          return l_mapping[a] - l_mapping[b];\n        } else if (l_mapping[a] != null) {\n          return -1;\n        } else if (l_mapping[b] != null) {\n          return 1;\n        } else {\n          return naturalSort(a, b);\n        }\n      };\n    };\n    getSort = function(sorters, attr) {\n      var sort;\n      if (sorters != null) {\n        if ($.isFunction(sorters)) {\n          sort = sorters(attr);\n          if ($.isFunction(sort)) {\n            return sort;\n          }\n        } else if (sorters[attr] != null) {\n          return sorters[attr];\n        }\n      }\n      return naturalSort;\n    };\n\n    /*\n    Data Model class\n     */\n    PivotData = (function() {\n      function PivotData(input, opts) {\n        var ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9;\n        if (opts == null) {\n          opts = {};\n        }\n        this.getAggregator = bind(this.getAggregator, this);\n        this.getRowKeys = bind(this.getRowKeys, this);\n        this.getColKeys = bind(this.getColKeys, this);\n        this.sortKeys = bind(this.sortKeys, this);\n        this.arrSort = bind(this.arrSort, this);\n        this.input = input;\n        this.aggregator = (ref = opts.aggregator) != null ? ref : aggregatorTemplates.count()();\n        this.aggregatorName = (ref1 = opts.aggregatorName) != null ? ref1 : \"Count\";\n        this.colAttrs = (ref2 = opts.cols) != null ? ref2 : [];\n        this.rowAttrs = (ref3 = opts.rows) != null ? ref3 : [];\n        this.valAttrs = (ref4 = opts.vals) != null ? ref4 : [];\n        this.sorters = (ref5 = opts.sorters) != null ? ref5 : {};\n        this.rowOrder = (ref6 = opts.rowOrder) != null ? ref6 : \"key_a_to_z\";\n        this.colOrder = (ref7 = opts.colOrder) != null ? ref7 : \"key_a_to_z\";\n        this.derivedAttributes = (ref8 = opts.derivedAttributes) != null ? ref8 : {};\n        this.filter = (ref9 = opts.filter) != null ? ref9 : (function() {\n          return true;\n        });\n        this.tree = {};\n        this.rowKeys = [];\n        this.colKeys = [];\n        this.rowTotals = {};\n        this.colTotals = {};\n        this.allTotal = this.aggregator(this, [], []);\n        this.sorted = false;\n        PivotData.forEachRecord(this.input, this.derivedAttributes, (function(_this) {\n          return function(record) {\n            if (_this.filter(record)) {\n              return _this.processRecord(record);\n            }\n          };\n        })(this));\n      }\n\n      PivotData.forEachRecord = function(input, derivedAttributes, f) {\n        var addRecord, compactRecord, i, j, k, l, len1, record, ref, results, results1, tblCols;\n        if ($.isEmptyObject(derivedAttributes)) {\n          addRecord = f;\n        } else {\n          addRecord = function(record) {\n            var k, ref, v;\n            for (k in derivedAttributes) {\n              v = derivedAttributes[k];\n              record[k] = (ref = v(record)) != null ? ref : record[k];\n            }\n            return f(record);\n          };\n        }\n        if ($.isFunction(input)) {\n          return input(addRecord);\n        } else if ($.isArray(input)) {\n          if ($.isArray(input[0])) {\n            results = [];\n            for (i in input) {\n              if (!hasProp.call(input, i)) continue;\n              compactRecord = input[i];\n              if (!(i > 0)) {\n                continue;\n              }\n              record = {};\n              ref = input[0];\n              for (j in ref) {\n                if (!hasProp.call(ref, j)) continue;\n                k = ref[j];\n                record[k] = compactRecord[j];\n              }\n              results.push(addRecord(record));\n            }\n            return results;\n          } else {\n            results1 = [];\n            for (l = 0, len1 = input.length; l < len1; l++) {\n              record = input[l];\n              results1.push(addRecord(record));\n            }\n            return results1;\n          }\n        } else if (input instanceof jQuery) {\n          tblCols = [];\n          $(\"thead > tr > th\", input).each(function(i) {\n            return tblCols.push($(this).text());\n          });\n          return $(\"tbody > tr\", input).each(function(i) {\n            record = {};\n            $(\"td\", this).each(function(j) {\n              return record[tblCols[j]] = $(this).text();\n            });\n            return addRecord(record);\n          });\n        } else {\n          throw new Error(\"unknown input format\");\n        }\n      };\n\n      PivotData.prototype.forEachMatchingRecord = function(criteria, callback) {\n        return PivotData.forEachRecord(this.input, this.derivedAttributes, (function(_this) {\n          return function(record) {\n            var k, ref, v;\n            if (!_this.filter(record)) {\n              return;\n            }\n            for (k in criteria) {\n              v = criteria[k];\n              if (v !== ((ref = record[k]) != null ? ref : \"null\")) {\n                return;\n              }\n            }\n            return callback(record);\n          };\n        })(this));\n      };\n\n      PivotData.prototype.arrSort = function(attrs) {\n        var a, sortersArr;\n        sortersArr = (function() {\n          var l, len1, results;\n          results = [];\n          for (l = 0, len1 = attrs.length; l < len1; l++) {\n            a = attrs[l];\n            results.push(getSort(this.sorters, a));\n          }\n          return results;\n        }).call(this);\n        return function(a, b) {\n          var comparison, i, sorter;\n          for (i in sortersArr) {\n            if (!hasProp.call(sortersArr, i)) continue;\n            sorter = sortersArr[i];\n            comparison = sorter(a[i], b[i]);\n            if (comparison !== 0) {\n              return comparison;\n            }\n          }\n          return 0;\n        };\n      };\n\n      PivotData.prototype.sortKeys = function() {\n        var v;\n        if (!this.sorted) {\n          this.sorted = true;\n          v = (function(_this) {\n            return function(r, c) {\n              return _this.getAggregator(r, c).value();\n            };\n          })(this);\n          switch (this.rowOrder) {\n            case \"value_a_to_z\":\n              this.rowKeys.sort((function(_this) {\n                return function(a, b) {\n                  return naturalSort(v(a, []), v(b, []));\n                };\n              })(this));\n              break;\n            case \"value_z_to_a\":\n              this.rowKeys.sort((function(_this) {\n                return function(a, b) {\n                  return -naturalSort(v(a, []), v(b, []));\n                };\n              })(this));\n              break;\n            default:\n              this.rowKeys.sort(this.arrSort(this.rowAttrs));\n          }\n          switch (this.colOrder) {\n            case \"value_a_to_z\":\n              return this.colKeys.sort((function(_this) {\n                return function(a, b) {\n                  return naturalSort(v([], a), v([], b));\n                };\n              })(this));\n            case \"value_z_to_a\":\n              return this.colKeys.sort((function(_this) {\n                return function(a, b) {\n                  return -naturalSort(v([], a), v([], b));\n                };\n              })(this));\n            default:\n              return this.colKeys.sort(this.arrSort(this.colAttrs));\n          }\n        }\n      };\n\n      PivotData.prototype.getColKeys = function() {\n        this.sortKeys();\n        return this.colKeys;\n      };\n\n      PivotData.prototype.getRowKeys = function() {\n        this.sortKeys();\n        return this.rowKeys;\n      };\n\n      PivotData.prototype.processRecord = function(record) {\n        var colKey, flatColKey, flatRowKey, l, len1, len2, n, ref, ref1, ref2, ref3, rowKey, x;\n        colKey = [];\n        rowKey = [];\n        ref = this.colAttrs;\n        for (l = 0, len1 = ref.length; l < len1; l++) {\n          x = ref[l];\n          colKey.push((ref1 = record[x]) != null ? ref1 : \"null\");\n        }\n        ref2 = this.rowAttrs;\n        for (n = 0, len2 = ref2.length; n < len2; n++) {\n          x = ref2[n];\n          rowKey.push((ref3 = record[x]) != null ? ref3 : \"null\");\n        }\n        flatRowKey = rowKey.join(String.fromCharCode(0));\n        flatColKey = colKey.join(String.fromCharCode(0));\n        this.allTotal.push(record);\n        if (rowKey.length !== 0) {\n          if (!this.rowTotals[flatRowKey]) {\n            this.rowKeys.push(rowKey);\n            this.rowTotals[flatRowKey] = this.aggregator(this, rowKey, []);\n          }\n          this.rowTotals[flatRowKey].push(record);\n        }\n        if (colKey.length !== 0) {\n          if (!this.colTotals[flatColKey]) {\n            this.colKeys.push(colKey);\n            this.colTotals[flatColKey] = this.aggregator(this, [], colKey);\n          }\n          this.colTotals[flatColKey].push(record);\n        }\n        if (colKey.length !== 0 && rowKey.length !== 0) {\n          if (!this.tree[flatRowKey]) {\n            this.tree[flatRowKey] = {};\n          }\n          if (!this.tree[flatRowKey][flatColKey]) {\n            this.tree[flatRowKey][flatColKey] = this.aggregator(this, rowKey, colKey);\n          }\n          return this.tree[flatRowKey][flatColKey].push(record);\n        }\n      };\n\n      PivotData.prototype.getAggregator = function(rowKey, colKey) {\n        var agg, flatColKey, flatRowKey;\n        flatRowKey = rowKey.join(String.fromCharCode(0));\n        flatColKey = colKey.join(String.fromCharCode(0));\n        if (rowKey.length === 0 && colKey.length === 0) {\n          agg = this.allTotal;\n        } else if (rowKey.length === 0) {\n          agg = this.colTotals[flatColKey];\n        } else if (colKey.length === 0) {\n          agg = this.rowTotals[flatRowKey];\n        } else {\n          agg = this.tree[flatRowKey][flatColKey];\n        }\n        return agg != null ? agg : {\n          value: (function() {\n            return null;\n          }),\n          format: function() {\n            return \"\";\n          }\n        };\n      };\n\n      return PivotData;\n\n    })();\n    $.pivotUtilities = {\n      aggregatorTemplates: aggregatorTemplates,\n      aggregators: aggregators,\n      renderers: renderers,\n      cellRenderers: cellRenderers,\n      derivers: derivers,\n      locales: locales,\n      naturalSort: naturalSort,\n      numberFormat: numberFormat,\n      sortAs: sortAs,\n      PivotData: PivotData\n    };\n\n    /*\n    Default Renderer for hierarchical table layout\n     */\n    pivotTableRenderer = function(pivotData, opts) {\n      var aggregator, c, colAttrs, colKey, colKeys, defaults, getClickHandler, i, j, r, result, rowAttrs, rowKey, rowKeys, spanSize, tbody, td, th, thead, totalAggregator, tr, txt, val, x;\n      defaults = {\n        table: {\n          clickCallback: null\n        },\n        localeStrings: {\n          totals: \"Totals\"\n        },\n        typeCellRenderer: cellRenderers.text,\n        headCellRenderer: cellRenderers.text,\n        dataCellRenderer: cellRenderers.text\n      };\n      opts = $.extend(true, {}, defaults, opts);\n      colAttrs = pivotData.colAttrs;\n      rowAttrs = pivotData.rowAttrs;\n      rowKeys = pivotData.getRowKeys();\n      colKeys = pivotData.getColKeys();\n      if (opts.table.clickCallback) {\n        getClickHandler = function(value, rowValues, colValues) {\n          var attr, filters, i;\n          filters = {};\n          for (i in colAttrs) {\n            if (!hasProp.call(colAttrs, i)) continue;\n            attr = colAttrs[i];\n            if (colValues[i] != null) {\n              filters[attr] = colValues[i];\n            }\n          }\n          for (i in rowAttrs) {\n            if (!hasProp.call(rowAttrs, i)) continue;\n            attr = rowAttrs[i];\n            if (rowValues[i] != null) {\n              filters[attr] = rowValues[i];\n            }\n          }\n          return function(e) {\n            return opts.table.clickCallback(e, value, filters, pivotData);\n          };\n        };\n      }\n      result = document.createElement(\"table\");\n      result.className = \"pvtTable\";\n      spanSize = function(arr, i, j) {\n        var l, len, n, noDraw, ref, ref1, stop, x;\n        if (i !== 0) {\n          noDraw = true;\n          for (x = l = 0, ref = j; 0 <= ref ? l <= ref : l >= ref; x = 0 <= ref ? ++l : --l) {\n            if (arr[i - 1][x] !== arr[i][x]) {\n              noDraw = false;\n            }\n          }\n          if (noDraw) {\n            return -1;\n          }\n        }\n        len = 0;\n        while (i + len < arr.length) {\n          stop = false;\n          for (x = n = 0, ref1 = j; 0 <= ref1 ? n <= ref1 : n >= ref1; x = 0 <= ref1 ? ++n : --n) {\n            if (arr[i][x] !== arr[i + len][x]) {\n              stop = true;\n            }\n          }\n          if (stop) {\n            break;\n          }\n          len++;\n        }\n        return len;\n      };\n      thead = document.createElement(\"thead\");\n      for (j in colAttrs) {\n        if (!hasProp.call(colAttrs, j)) continue;\n        c = colAttrs[j];\n        tr = document.createElement(\"tr\");\n        if (parseInt(j) === 0 && rowAttrs.length !== 0) {\n          th = document.createElement(\"th\");\n          th.setAttribute(\"colspan\", rowAttrs.length);\n          th.setAttribute(\"rowspan\", colAttrs.length);\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        th.className = \"pvtAxisLabel\";\n        th.appendChild(opts.typeCellRenderer(c));\n        tr.appendChild(th);\n        for (i in colKeys) {\n          if (!hasProp.call(colKeys, i)) continue;\n          colKey = colKeys[i];\n          x = spanSize(colKeys, parseInt(i), parseInt(j));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtColLabel\";\n            th.appendChild(opts.headCellRenderer(colKey[j], c));\n            th.setAttribute(\"colspan\", x);\n            if (parseInt(j) === colAttrs.length - 1 && rowAttrs.length !== 0) {\n              th.setAttribute(\"rowspan\", 2);\n            }\n            tr.appendChild(th);\n          }\n        }\n        if (parseInt(j) === 0) {\n          th = document.createElement(\"th\");\n          th.className = \"pvtTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n          th.setAttribute(\"rowspan\", colAttrs.length + (rowAttrs.length === 0 ? 0 : 1));\n          tr.appendChild(th);\n        }\n        thead.appendChild(tr);\n      }\n      if (rowAttrs.length !== 0) {\n        tr = document.createElement(\"tr\");\n        for (i in rowAttrs) {\n          if (!hasProp.call(rowAttrs, i)) continue;\n          r = rowAttrs[i];\n          th = document.createElement(\"th\");\n          th.className = \"pvtAxisLabel\";\n          th.appendChild(opts.typeCellRenderer(r));\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        if (colAttrs.length === 0) {\n          th.className = \"pvtTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n        }\n        tr.appendChild(th);\n        thead.appendChild(tr);\n      }\n      result.appendChild(thead);\n      tbody = document.createElement(\"tbody\");\n      for (i in rowKeys) {\n        if (!hasProp.call(rowKeys, i)) continue;\n        rowKey = rowKeys[i];\n        tr = document.createElement(\"tr\");\n        for (j in rowKey) {\n          if (!hasProp.call(rowKey, j)) continue;\n          txt = rowKey[j];\n          x = spanSize(rowKeys, parseInt(i), parseInt(j));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtRowLabel\";\n            th.appendChild(opts.headCellRenderer(txt, rowAttrs[j]));\n            th.setAttribute(\"rowspan\", x);\n            if (parseInt(j) === rowAttrs.length - 1 && colAttrs.length !== 0) {\n              th.setAttribute(\"colspan\", 2);\n            }\n            tr.appendChild(th);\n          }\n        }\n        for (j in colKeys) {\n          if (!hasProp.call(colKeys, j)) continue;\n          colKey = colKeys[j];\n          aggregator = pivotData.getAggregator(rowKey, colKey);\n          val = aggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtVal row\" + i + \" col\" + j;\n          td.appendChild(opts.dataCellRenderer(aggregator.format(val), rowKey, colKey));\n          td.setAttribute(\"data-value\", val);\n          if (getClickHandler != null) {\n            td.onclick = getClickHandler(val, rowKey, colKey);\n          }\n          tr.appendChild(td);\n        }\n        totalAggregator = pivotData.getAggregator(rowKey, []);\n        val = totalAggregator.value();\n        td = document.createElement(\"td\");\n        td.className = \"pvtTotal rowTotal\";\n        td.textContent = totalAggregator.format(val);\n        td.setAttribute(\"data-value\", val);\n        if (getClickHandler != null) {\n          td.onclick = getClickHandler(val, rowKey, []);\n        }\n        td.setAttribute(\"data-for\", \"row\" + i);\n        tr.appendChild(td);\n        tbody.appendChild(tr);\n      }\n      tr = document.createElement(\"tr\");\n      th = document.createElement(\"th\");\n      th.className = \"pvtTotalLabel\";\n      th.innerHTML = opts.localeStrings.totals;\n      th.setAttribute(\"colspan\", rowAttrs.length + (colAttrs.length === 0 ? 0 : 1));\n      tr.appendChild(th);\n      for (j in colKeys) {\n        if (!hasProp.call(colKeys, j)) continue;\n        colKey = colKeys[j];\n        totalAggregator = pivotData.getAggregator([], colKey);\n        val = totalAggregator.value();\n        td = document.createElement(\"td\");\n        td.className = \"pvtTotal colTotal\";\n        td.textContent = totalAggregator.format(val);\n        td.setAttribute(\"data-value\", val);\n        if (getClickHandler != null) {\n          td.onclick = getClickHandler(val, [], colKey);\n        }\n        td.setAttribute(\"data-for\", \"col\" + j);\n        tr.appendChild(td);\n      }\n      totalAggregator = pivotData.getAggregator([], []);\n      val = totalAggregator.value();\n      td = document.createElement(\"td\");\n      td.className = \"pvtGrandTotal\";\n      td.textContent = totalAggregator.format(val);\n      td.setAttribute(\"data-value\", val);\n      if (getClickHandler != null) {\n        td.onclick = getClickHandler(val, [], []);\n      }\n      tr.appendChild(td);\n      tbody.appendChild(tr);\n      result.appendChild(tbody);\n      result.setAttribute(\"data-numrows\", rowKeys.length);\n      result.setAttribute(\"data-numcols\", colKeys.length);\n      return result;\n    };\n\n    /*\n    Pivot Table core: create PivotData object and call Renderer on it\n     */\n    $.fn.pivot = function(input, inputOpts, locale) {\n      var defaults, e, localeDefaults, localeStrings, opts, pivotData, result, x;\n      if (locale == null) {\n        locale = \"en\";\n      }\n      if (locales[locale] == null) {\n        locale = \"en\";\n      }\n      defaults = {\n        cols: [],\n        rows: [],\n        vals: [],\n        rowOrder: \"key_a_to_z\",\n        colOrder: \"key_a_to_z\",\n        dataClass: PivotData,\n        filter: function() {\n          return true;\n        },\n        aggregator: aggregatorTemplates.count()(),\n        aggregatorName: \"Count\",\n        sorters: {},\n        derivedAttributes: {},\n        renderer: pivotTableRenderer\n      };\n      localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings);\n      localeDefaults = {\n        rendererOptions: {\n          localeStrings: localeStrings\n        },\n        localeStrings: localeStrings\n      };\n      opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts));\n      result = null;\n      try {\n        pivotData = new opts.dataClass(input, opts);\n        try {\n          result = opts.renderer(pivotData, opts.rendererOptions);\n        } catch (error) {\n          e = error;\n          if (typeof console !== \"undefined\" && console !== null) {\n            console.error(e.stack);\n          }\n          result = $(\"<span>\").html(opts.localeStrings.renderError);\n        }\n      } catch (error) {\n        e = error;\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        result = $(\"<span>\").html(opts.localeStrings.computeError);\n      }\n      x = this[0];\n      while (x.hasChildNodes()) {\n        x.removeChild(x.lastChild);\n      }\n      return this.append(result);\n    };\n\n    /*\n    Pivot Table UI: calls Pivot Table core above with options set by user\n     */\n    $.fn.pivotUI = function(input, inputOpts, overwrite, locale) {\n      var a, aggregator, attr, attrLength, attrValues, colOrderArrow, defaults, e, existingOpts, fn1, i, initialRender, l, len1, len2, len3, localeDefaults, localeStrings, materializedInput, n, o, opts, ordering, pivotTable, recordsProcessed, ref, ref1, ref2, ref3, refresh, refreshDelayed, renderer, rendererControl, rowOrderArrow, shownAttributes, tr1, tr2, uiTable, unused, unusedAttrsVerticalAutoCutoff, unusedAttrsVerticalAutoOverride, x;\n      if (overwrite == null) {\n        overwrite = false;\n      }\n      if (locale == null) {\n        locale = \"en\";\n      }\n      if (locales[locale] == null) {\n        locale = \"en\";\n      }\n      defaults = {\n        derivedAttributes: {},\n        aggregators: locales[locale].aggregators,\n        renderers: locales[locale].renderers,\n        hiddenAttributes: [],\n        menuLimit: 500,\n        cols: [],\n        rows: [],\n        vals: [],\n        rowOrder: \"key_a_to_z\",\n        colOrder: \"key_a_to_z\",\n        dataClass: PivotData,\n        exclusions: {},\n        inclusions: {},\n        unusedAttrsVertical: 85,\n        autoSortUnusedAttrs: false,\n        onRefresh: null,\n        filter: function() {\n          return true;\n        },\n        sorters: {}\n      };\n      localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings);\n      localeDefaults = {\n        rendererOptions: {\n          localeStrings: localeStrings\n        },\n        localeStrings: localeStrings\n      };\n      existingOpts = this.data(\"pivotUIOptions\");\n      if ((existingOpts == null) || overwrite) {\n        opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts));\n      } else {\n        opts = existingOpts;\n      }\n      try {\n        attrValues = {};\n        materializedInput = [];\n        recordsProcessed = 0;\n        PivotData.forEachRecord(input, opts.derivedAttributes, function(record) {\n          var attr, base, ref, value;\n          if (!opts.filter(record)) {\n            return;\n          }\n          materializedInput.push(record);\n          for (attr in record) {\n            if (!hasProp.call(record, attr)) continue;\n            if (attrValues[attr] == null) {\n              attrValues[attr] = {};\n              if (recordsProcessed > 0) {\n                attrValues[attr][\"null\"] = recordsProcessed;\n              }\n            }\n          }\n          for (attr in attrValues) {\n            value = (ref = record[attr]) != null ? ref : \"null\";\n            if ((base = attrValues[attr])[value] == null) {\n              base[value] = 0;\n            }\n            attrValues[attr][value]++;\n          }\n          return recordsProcessed++;\n        });\n        uiTable = $(\"<table>\", {\n          \"class\": \"pvtUi\"\n        }).attr(\"cellpadding\", 5);\n        rendererControl = $(\"<td>\");\n        renderer = $(\"<select>\").addClass('pvtRenderer').appendTo(rendererControl).bind(\"change\", function() {\n          return refresh();\n        });\n        ref = opts.renderers;\n        for (x in ref) {\n          if (!hasProp.call(ref, x)) continue;\n          $(\"<option>\").val(x).html(x).appendTo(renderer);\n        }\n        unused = $(\"<td>\").addClass('pvtAxisContainer pvtUnused');\n        shownAttributes = (function() {\n          var results;\n          results = [];\n          for (a in attrValues) {\n            if (indexOf.call(opts.hiddenAttributes, a) < 0) {\n              results.push(a);\n            }\n          }\n          return results;\n        })();\n        unusedAttrsVerticalAutoOverride = false;\n        if (opts.unusedAttrsVertical === \"auto\") {\n          unusedAttrsVerticalAutoCutoff = 120;\n        } else {\n          unusedAttrsVerticalAutoCutoff = parseInt(opts.unusedAttrsVertical);\n        }\n        if (!isNaN(unusedAttrsVerticalAutoCutoff)) {\n          attrLength = 0;\n          for (l = 0, len1 = shownAttributes.length; l < len1; l++) {\n            a = shownAttributes[l];\n            attrLength += a.length;\n          }\n          unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff;\n        }\n        if (opts.unusedAttrsVertical === true || unusedAttrsVerticalAutoOverride) {\n          unused.addClass('pvtVertList');\n        } else {\n          unused.addClass('pvtHorizList');\n        }\n        fn1 = function(attr) {\n          var attrElem, checkContainer, closeFilterBox, controls, filterItem, filterItemExcluded, finalButtons, hasExcludedItem, len2, n, placeholder, ref1, sorter, triangleLink, v, value, valueCount, valueList, values;\n          values = (function() {\n            var results;\n            results = [];\n            for (v in attrValues[attr]) {\n              results.push(v);\n            }\n            return results;\n          })();\n          hasExcludedItem = false;\n          valueList = $(\"<div>\").addClass('pvtFilterBox').hide();\n          valueList.append($(\"<h4>\").append($(\"<span>\").text(attr), $(\"<span>\").addClass(\"count\").text(\"(\" + values.length + \")\")));\n          if (values.length > opts.menuLimit) {\n            valueList.append($(\"<p>\").html(opts.localeStrings.tooMany));\n          } else {\n            if (values.length > 5) {\n              controls = $(\"<p>\").appendTo(valueList);\n              sorter = getSort(opts.sorters, attr);\n              placeholder = opts.localeStrings.filterResults;\n              $(\"<input>\", {\n                type: \"text\"\n              }).appendTo(controls).attr({\n                placeholder: placeholder,\n                \"class\": \"pvtSearch\"\n              }).bind(\"keyup\", function() {\n                var accept, accept_gen, filter;\n                filter = $(this).val().toLowerCase().trim();\n                accept_gen = function(prefix, accepted) {\n                  return function(v) {\n                    var real_filter, ref1;\n                    real_filter = filter.substring(prefix.length).trim();\n                    if (real_filter.length === 0) {\n                      return true;\n                    }\n                    return ref1 = Math.sign(sorter(v.toLowerCase(), real_filter)), indexOf.call(accepted, ref1) >= 0;\n                  };\n                };\n                accept = filter.startsWith(\">=\") ? accept_gen(\">=\", [1, 0]) : filter.startsWith(\"<=\") ? accept_gen(\"<=\", [-1, 0]) : filter.startsWith(\">\") ? accept_gen(\">\", [1]) : filter.startsWith(\"<\") ? accept_gen(\"<\", [-1]) : filter.startsWith(\"~\") ? function(v) {\n                  if (filter.substring(1).trim().length === 0) {\n                    return true;\n                  }\n                  return v.toLowerCase().match(filter.substring(1));\n                } : function(v) {\n                  return v.toLowerCase().indexOf(filter) !== -1;\n                };\n                return valueList.find('.pvtCheckContainer p label span.value').each(function() {\n                  if (accept($(this).text())) {\n                    return $(this).parent().parent().show();\n                  } else {\n                    return $(this).parent().parent().hide();\n                  }\n                });\n              });\n              controls.append($(\"<br>\"));\n              $(\"<button>\", {\n                type: \"button\"\n              }).appendTo(controls).html(opts.localeStrings.selectAll).bind(\"click\", function() {\n                valueList.find(\"input:visible:not(:checked)\").prop(\"checked\", true).toggleClass(\"changed\");\n                return false;\n              });\n              $(\"<button>\", {\n                type: \"button\"\n              }).appendTo(controls).html(opts.localeStrings.selectNone).bind(\"click\", function() {\n                valueList.find(\"input:visible:checked\").prop(\"checked\", false).toggleClass(\"changed\");\n                return false;\n              });\n            }\n            checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList);\n            ref1 = values.sort(getSort(opts.sorters, attr));\n            for (n = 0, len2 = ref1.length; n < len2; n++) {\n              value = ref1[n];\n              valueCount = attrValues[attr][value];\n              filterItem = $(\"<label>\");\n              filterItemExcluded = false;\n              if (opts.inclusions[attr]) {\n                filterItemExcluded = (indexOf.call(opts.inclusions[attr], value) < 0);\n              } else if (opts.exclusions[attr]) {\n                filterItemExcluded = (indexOf.call(opts.exclusions[attr], value) >= 0);\n              }\n              hasExcludedItem || (hasExcludedItem = filterItemExcluded);\n              $(\"<input>\").attr(\"type\", \"checkbox\").addClass('pvtFilter').attr(\"checked\", !filterItemExcluded).data(\"filter\", [attr, value]).appendTo(filterItem).bind(\"change\", function() {\n                return $(this).toggleClass(\"changed\");\n              });\n              filterItem.append($(\"<span>\").addClass(\"value\").text(value));\n              filterItem.append($(\"<span>\").addClass(\"count\").text(\"(\" + valueCount + \")\"));\n              checkContainer.append($(\"<p>\").append(filterItem));\n            }\n          }\n          closeFilterBox = function() {\n            if (valueList.find(\"[type='checkbox']\").length > valueList.find(\"[type='checkbox']:checked\").length) {\n              attrElem.addClass(\"pvtFilteredAttribute\");\n            } else {\n              attrElem.removeClass(\"pvtFilteredAttribute\");\n            }\n            valueList.find('.pvtSearch').val('');\n            valueList.find('.pvtCheckContainer p').show();\n            return valueList.hide();\n          };\n          finalButtons = $(\"<p>\").appendTo(valueList);\n          if (values.length <= opts.menuLimit) {\n            $(\"<button>\", {\n              type: \"button\"\n            }).text(opts.localeStrings.apply).appendTo(finalButtons).bind(\"click\", function() {\n              if (valueList.find(\".changed\").removeClass(\"changed\").length) {\n                refresh();\n              }\n              return closeFilterBox();\n            });\n          }\n          $(\"<button>\", {\n            type: \"button\"\n          }).text(opts.localeStrings.cancel).appendTo(finalButtons).bind(\"click\", function() {\n            valueList.find(\".changed:checked\").removeClass(\"changed\").prop(\"checked\", false);\n            valueList.find(\".changed:not(:checked)\").removeClass(\"changed\").prop(\"checked\", true);\n            return closeFilterBox();\n          });\n          triangleLink = $(\"<span>\").addClass('pvtTriangle').html(\" &#x25BE;\").bind(\"click\", function(e) {\n            var left, ref2, top;\n            ref2 = $(e.currentTarget).position(), left = ref2.left, top = ref2.top;\n            return valueList.css({\n              left: left + 10,\n              top: top + 10\n            }).show();\n          });\n          attrElem = $(\"<li>\").addClass(\"axis_\" + i).append($(\"<span>\").addClass('pvtAttr').text(attr).data(\"attrName\", attr).append(triangleLink));\n          if (hasExcludedItem) {\n            attrElem.addClass('pvtFilteredAttribute');\n          }\n          return unused.append(attrElem).append(valueList);\n        };\n        for (i in shownAttributes) {\n          if (!hasProp.call(shownAttributes, i)) continue;\n          attr = shownAttributes[i];\n          fn1(attr);\n        }\n        tr1 = $(\"<tr>\").appendTo(uiTable);\n        aggregator = $(\"<select>\").addClass('pvtAggregator').bind(\"change\", function() {\n          return refresh();\n        });\n        ref1 = opts.aggregators;\n        for (x in ref1) {\n          if (!hasProp.call(ref1, x)) continue;\n          aggregator.append($(\"<option>\").val(x).html(x));\n        }\n        ordering = {\n          key_a_to_z: {\n            rowSymbol: \"&varr;\",\n            colSymbol: \"&harr;\",\n            next: \"value_a_to_z\"\n          },\n          value_a_to_z: {\n            rowSymbol: \"&darr;\",\n            colSymbol: \"&rarr;\",\n            next: \"value_z_to_a\"\n          },\n          value_z_to_a: {\n            rowSymbol: \"&uarr;\",\n            colSymbol: \"&larr;\",\n            next: \"key_a_to_z\"\n          }\n        };\n        rowOrderArrow = $(\"<a>\", {\n          role: \"button\"\n        }).addClass(\"pvtRowOrder\").data(\"order\", opts.rowOrder).html(ordering[opts.rowOrder].rowSymbol).bind(\"click\", function() {\n          $(this).data(\"order\", ordering[$(this).data(\"order\")].next);\n          $(this).html(ordering[$(this).data(\"order\")].rowSymbol);\n          return refresh();\n        });\n        colOrderArrow = $(\"<a>\", {\n          role: \"button\"\n        }).addClass(\"pvtColOrder\").data(\"order\", opts.colOrder).html(ordering[opts.colOrder].colSymbol).bind(\"click\", function() {\n          $(this).data(\"order\", ordering[$(this).data(\"order\")].next);\n          $(this).html(ordering[$(this).data(\"order\")].colSymbol);\n          return refresh();\n        });\n        $(\"<td>\").addClass('pvtVals').appendTo(tr1).append(aggregator).append(rowOrderArrow).append(colOrderArrow).append($(\"<br>\"));\n        $(\"<td>\").addClass('pvtAxisContainer pvtHorizList pvtCols').appendTo(tr1);\n        tr2 = $(\"<tr>\").appendTo(uiTable);\n        tr2.append($(\"<td>\").addClass('pvtAxisContainer pvtRows').attr(\"valign\", \"top\"));\n        pivotTable = $(\"<td>\").attr(\"valign\", \"top\").addClass('pvtRendererArea').appendTo(tr2);\n        if (opts.unusedAttrsVertical === true || unusedAttrsVerticalAutoOverride) {\n          uiTable.find('tr:nth-child(1)').prepend(rendererControl);\n          uiTable.find('tr:nth-child(2)').prepend(unused);\n        } else {\n          uiTable.prepend($(\"<tr>\").append(rendererControl).append(unused));\n        }\n        this.html(uiTable);\n        ref2 = opts.cols;\n        for (n = 0, len2 = ref2.length; n < len2; n++) {\n          x = ref2[n];\n          this.find(\".pvtCols\").append(this.find(\".axis_\" + ($.inArray(x, shownAttributes))));\n        }\n        ref3 = opts.rows;\n        for (o = 0, len3 = ref3.length; o < len3; o++) {\n          x = ref3[o];\n          this.find(\".pvtRows\").append(this.find(\".axis_\" + ($.inArray(x, shownAttributes))));\n        }\n        if (opts.aggregatorName != null) {\n          this.find(\".pvtAggregator\").val(opts.aggregatorName);\n        }\n        if (opts.rendererName != null) {\n          this.find(\".pvtRenderer\").val(opts.rendererName);\n        }\n        initialRender = true;\n        refreshDelayed = (function(_this) {\n          return function() {\n            var exclusions, inclusions, len4, newDropdown, numInputsToProcess, pivotUIOptions, pvtVals, ref4, ref5, subopts, t, u, unusedAttrsContainer, vals;\n            subopts = {\n              derivedAttributes: opts.derivedAttributes,\n              localeStrings: opts.localeStrings,\n              rendererOptions: opts.rendererOptions,\n              sorters: opts.sorters,\n              cols: [],\n              rows: [],\n              dataClass: opts.dataClass\n            };\n            numInputsToProcess = (ref4 = opts.aggregators[aggregator.val()]([])().numInputs) != null ? ref4 : 0;\n            vals = [];\n            _this.find(\".pvtRows li span.pvtAttr\").each(function() {\n              return subopts.rows.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtCols li span.pvtAttr\").each(function() {\n              return subopts.cols.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n              if (numInputsToProcess === 0) {\n                return $(this).remove();\n              } else {\n                numInputsToProcess--;\n                if ($(this).val() !== \"\") {\n                  return vals.push($(this).val());\n                }\n              }\n            });\n            if (numInputsToProcess !== 0) {\n              pvtVals = _this.find(\".pvtVals\");\n              for (x = t = 0, ref5 = numInputsToProcess; 0 <= ref5 ? t < ref5 : t > ref5; x = 0 <= ref5 ? ++t : --t) {\n                newDropdown = $(\"<select>\").addClass('pvtAttrDropdown').append($(\"<option>\")).bind(\"change\", function() {\n                  return refresh();\n                });\n                for (u = 0, len4 = shownAttributes.length; u < len4; u++) {\n                  attr = shownAttributes[u];\n                  newDropdown.append($(\"<option>\").val(attr).text(attr));\n                }\n                pvtVals.append(newDropdown);\n              }\n            }\n            if (initialRender) {\n              vals = opts.vals;\n              i = 0;\n              _this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n                $(this).val(vals[i]);\n                return i++;\n              });\n              initialRender = false;\n            }\n            subopts.aggregatorName = aggregator.val();\n            subopts.vals = vals;\n            subopts.aggregator = opts.aggregators[aggregator.val()](vals);\n            subopts.renderer = opts.renderers[renderer.val()];\n            subopts.rowOrder = rowOrderArrow.data(\"order\");\n            subopts.colOrder = colOrderArrow.data(\"order\");\n            exclusions = {};\n            _this.find('input.pvtFilter').not(':checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                return exclusions[filter[0]].push(filter[1]);\n              } else {\n                return exclusions[filter[0]] = [filter[1]];\n              }\n            });\n            inclusions = {};\n            _this.find('input.pvtFilter:checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                if (inclusions[filter[0]] != null) {\n                  return inclusions[filter[0]].push(filter[1]);\n                } else {\n                  return inclusions[filter[0]] = [filter[1]];\n                }\n              }\n            });\n            subopts.filter = function(record) {\n              var excludedItems, k, ref6, ref7;\n              if (!opts.filter(record)) {\n                return false;\n              }\n              for (k in exclusions) {\n                excludedItems = exclusions[k];\n                if (ref6 = \"\" + ((ref7 = record[k]) != null ? ref7 : 'null'), indexOf.call(excludedItems, ref6) >= 0) {\n                  return false;\n                }\n              }\n              return true;\n            };\n            pivotTable.pivot(materializedInput, subopts);\n            pivotUIOptions = $.extend({}, opts, {\n              cols: subopts.cols,\n              rows: subopts.rows,\n              colOrder: subopts.colOrder,\n              rowOrder: subopts.rowOrder,\n              vals: vals,\n              exclusions: exclusions,\n              inclusions: inclusions,\n              inclusionsInfo: inclusions,\n              aggregatorName: aggregator.val(),\n              rendererName: renderer.val()\n            });\n            _this.data(\"pivotUIOptions\", pivotUIOptions);\n            if (opts.autoSortUnusedAttrs) {\n              unusedAttrsContainer = _this.find(\"td.pvtUnused.pvtAxisContainer\");\n              $(unusedAttrsContainer).children(\"li\").sort(function(a, b) {\n                return naturalSort($(a).text(), $(b).text());\n              }).appendTo(unusedAttrsContainer);\n            }\n            pivotTable.css(\"opacity\", 1);\n            if (opts.onRefresh != null) {\n              return opts.onRefresh(pivotUIOptions);\n            }\n          };\n        })(this);\n        refresh = (function(_this) {\n          return function() {\n            pivotTable.css(\"opacity\", 0.5);\n            return setTimeout(refreshDelayed, 10);\n          };\n        })(this);\n        refresh();\n        this.find(\".pvtAxisContainer\").sortable({\n          update: function(e, ui) {\n            if (ui.sender == null) {\n              return refresh();\n            }\n          },\n          connectWith: this.find(\".pvtAxisContainer\"),\n          items: 'li',\n          placeholder: 'pvtPlaceholder'\n        });\n      } catch (error) {\n        e = error;\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        this.html(opts.localeStrings.uiRenderError);\n      }\n      return this;\n    };\n\n    /*\n    Heatmap post-processing\n     */\n    $.fn.heatmap = function(scope, opts) {\n      var colorScaleGenerator, heatmapper, i, j, l, n, numCols, numRows, ref, ref1, ref2;\n      if (scope == null) {\n        scope = \"heatmap\";\n      }\n      numRows = this.data(\"numrows\");\n      numCols = this.data(\"numcols\");\n      colorScaleGenerator = opts != null ? (ref = opts.heatmap) != null ? ref.colorScaleGenerator : void 0 : void 0;\n      if (colorScaleGenerator == null) {\n        colorScaleGenerator = function(values) {\n          var max, min;\n          min = Math.min.apply(Math, values);\n          max = Math.max.apply(Math, values);\n          return function(x) {\n            var nonRed;\n            nonRed = 255 - Math.round(255 * (x - min) / (max - min));\n            return \"rgb(255,\" + nonRed + \",\" + nonRed + \")\";\n          };\n        };\n      }\n      heatmapper = (function(_this) {\n        return function(scope) {\n          var colorScale, forEachCell, values;\n          forEachCell = function(f) {\n            return _this.find(scope).each(function() {\n              var x;\n              x = $(this).data(\"value\");\n              if ((x != null) && isFinite(x)) {\n                return f(x, $(this));\n              }\n            });\n          };\n          values = [];\n          forEachCell(function(x) {\n            return values.push(x);\n          });\n          colorScale = colorScaleGenerator(values);\n          return forEachCell(function(x, elem) {\n            return elem.css(\"background-color\", colorScale(x));\n          });\n        };\n      })(this);\n      switch (scope) {\n        case \"heatmap\":\n          heatmapper(\".pvtVal\");\n          break;\n        case \"rowheatmap\":\n          for (i = l = 0, ref1 = numRows; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {\n            heatmapper(\".pvtVal.row\" + i);\n          }\n          break;\n        case \"colheatmap\":\n          for (j = n = 0, ref2 = numCols; 0 <= ref2 ? n < ref2 : n > ref2; j = 0 <= ref2 ? ++n : --n) {\n            heatmapper(\".pvtVal.col\" + j);\n          }\n      }\n      heatmapper(\".pvtTotal.rowTotal\");\n      heatmapper(\".pvtTotal.colTotal\");\n      return this;\n    };\n\n    /*\n    Barchart post-processing\n     */\n    return $.fn.barchart = function() {\n      var barcharter, i, l, numCols, numRows, ref;\n      numRows = this.data(\"numrows\");\n      numCols = this.data(\"numcols\");\n      barcharter = (function(_this) {\n        return function(scope) {\n          var forEachCell, max, scaler, values;\n          forEachCell = function(f) {\n            return _this.find(scope).each(function() {\n              var x;\n              x = $(this).data(\"value\");\n              if ((x != null) && isFinite(x)) {\n                return f(x, $(this));\n              }\n            });\n          };\n          values = [];\n          forEachCell(function(x) {\n            return values.push(x);\n          });\n          max = Math.max.apply(Math, values);\n          scaler = function(x) {\n            return 100 * x / (1.4 * max);\n          };\n          return forEachCell(function(x, elem) {\n            var text, wrapper;\n            text = elem.text();\n            wrapper = $(\"<div>\").css({\n              \"position\": \"relative\",\n              \"height\": \"55px\"\n            });\n            wrapper.append($(\"<div>\").css({\n              \"position\": \"absolute\",\n              \"bottom\": 0,\n              \"left\": 0,\n              \"right\": 0,\n              \"height\": scaler(x) + \"%\",\n              \"background-color\": \"gray\"\n            }));\n            wrapper.append($(\"<div>\").text(text).css({\n              \"position\": \"relative\",\n              \"padding-left\": \"5px\",\n              \"padding-right\": \"5px\"\n            }));\n            return elem.css({\n              \"padding\": 0,\n              \"padding-top\": \"5px\",\n              \"text-align\": \"center\"\n            }).html(wrapper);\n          });\n        };\n      })(this);\n      for (i = l = 0, ref = numRows; 0 <= ref ? l < ref : l > ref; i = 0 <= ref ? ++l : --l) {\n        barcharter(\".pvtVal.row\" + i);\n      }\n      barcharter(\".pvtTotal.colTotal\");\n      return this;\n    };\n  });\n\n}).call(this);\n\n//# sourceMappingURL=pivot.js.map\n"]}