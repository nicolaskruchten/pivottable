{"version":3,"sources":["/source/pivot.coffee","pivot.min.js"],"names":["callWithJQuery","indexOf","item","i","l","this","length","slice","bind","fn","me","apply","arguments","hasProp","hasOwnProperty","pivotModule","exports","module","require","define","amd","jQuery","$","PivotData","addSeparators","aggregatorTemplates","aggregators","dayNamesEn","derivers","getSort","locales","mthNamesEn","naturalSort","numberFormat","pivotTableRenderer","renderers","sortAs","usFmt","usFmtInt","usFmtPct","zeroPad","nStr","thousandsSep","decimalSep","rgx","x","x1","x2","split","test","replace","opts","defaults","digitsAfterDecimal","scaler","prefix","suffix","showZero","extend","result","isNaN","isFinite","toFixed","count","formatter","data","rowKey","colKey","push","value","format","countUnique","arg","attr","uniq","record","ref","call","numInputs","listUnique","sep","join","sum","parseFloat","min","val","Math","max","average","len","sumOverSum","denom","num","sumNum","sumDenom","sumOverSumBound80","upper","sign","sqrt","fractionOf","wrapped","type","selector","total","row","col","inner","getAggregator","tpl","Count","Count Unique Values","List Unique Values","Sum","Integer Sum","Average","Minimum","Maximum","Sum over Sum","80% Upper Bound","80% Lower Bound","Sum as Fraction of Total","Sum as Fraction of Rows","Sum as Fraction of Columns","Count as Fraction of Total","Count as Fraction of Rows","Count as Fraction of Columns","Table","Table Barchart","barchart","Heatmap","heatmap","Row Heatmap","Col Heatmap","en","localeStrings","renderError","computeError","uiRenderError","selectAll","selectNone","tooMany","filterResults","totals","vs","by","number","substr","bin","binWidth","dateFormat","formatString","utcOutput","mthNames","dayNames","utc","date","Date","parse","m","p","_this","as","bs","a","a1","b","b1","rd","rx","rz","String","toLowerCase","match","shift","order","mapping","sorters","sort","isFunction","input","getRowKeys","getColKeys","sortKeys","arrSort","aggregator","aggregatorName","colAttrs","cols","rowAttrs","rows","valAttrs","vals","tree","rowKeys","colKeys","rowTotals","colTotals","allTotal","sorted","forEachRecord","derivedAttributes","filter","processRecord","f","addRecord","compactRecord","j","k","len1","results","results1","tblCols","isEmptyObject","v","isArray","each","text","Error","convertToArray","prototype","attrs","sortersArr","comparison","sorter","flatColKey","flatRowKey","len2","n","ref1","ref2","ref3","fromCharCode","agg","pivotUtilities","pivotData","c","r","spanSize","td","th","totalAggregator","tr","txt","document","createElement","className","arr","noDraw","stop","parseInt","setAttribute","appendChild","textContent","innerHTML","pivot","e","error","error1","dataClass","renderer","rendererOptions","console","stack","html","hasChildNodes","removeChild","lastChild","append","pivotUI","inputOpts","overwrite","locale","attrLength","axisValues","colList","existingOpts","initialRender","len3","len4","o","pivotTable","q","ref4","refresh","refreshDelayed","rendererControl","shownAttributes","tr1","tr2","uiTable","unusedAttrsVerticalAutoCutoff","unusedAttrsVerticalAutoOverride","hiddenAttributes","menuLimit","exclusions","inclusions","unusedAttrsVertical","autoSortUnusedAttrs","onRefresh","base","class","addClass","appendTo","attrElem","btns","checkContainer","filterItem","filterItemExcluded","hasExcludedItem","keys","showFilterList","triangleLink","updateFilter","valueList","hide","find","prop","placeholder","testString","show","unselectedCount","removeClass","toggle","clickLeft","clickTop","currentTarget","position","left","top","css","prepend","inArray","rendererName","len5","newDropdown","numInputsToProcess","pivotUIOptions","pvtVals","ref5","ref6","s","subopts","t","unusedAttrsContainer","remove","not","excludedItems","ref7","inclusionsInfo","children","setTimeout","sortable","update","ui","sender","connectWith","items","scope","colorScaleGenerator","heatmapper","numCols","numRows","values","nonRed","round","colorScale","forEachCell","elem","barcharter","wrapper","height","bottom","right","background-color","padding-left","padding-right","padding","padding-top","text-align"],"mappings":"CAAA,WAAA,GAAAA,GAAAC,KAAAA,SAAA,SAAAC,GAAA,IAAA,GAAAC,GAAA,EAAAC,EAAAC,KAAAC,OAAAH,EAAAC,EAAAD,IAAA,GAAAA,IAAAE,OAAAA,KAAAF,KAAAD,EAAA,MAAAC,EAAA,WCGII,KAAWA,MACXC,EAAO,SAASC,EAAIC,GAAK,MAAO,YAAY,MAAOD,GAAGE,MAAMD,EAAIE,aAChEC,KAAaC,gBDLjBd,EAAiB,SAACe,GACd,MAAqB,gBAAXC,UAAyC,gBAAVC,QACrCF,EAAYG,QAAQ,WACC,kBAAVC,SAAyBA,OAAOC,IAC3CD,QAAQ,UAAWJ,GAGnBA,EAAYM,UAEL,SAACC,GAEZ,GAAAC,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,CCi5CA,OD74CAhB,GAAgB,SAACiB,EAAMC,EAAcC,GACjC,GAAAC,GAAAC,EAAAC,EAAAC,CAKiD,KALjDN,GAAQ,GACRI,EAAIJ,EAAKO,MAAM,KACfF,EAAKD,EAAE,GACPE,EAAQF,EAAEvC,OAAS,EAAQqC,EAAaE,EAAE,GAAQ,GAClDD,EAAM,eACiDA,EAAIK,KAAKH,IAAhEA,EAAKA,EAAGI,QAAQN,EAAK,KAAOF,EAAe,KAC3C,OAAOI,GAAKC,GAEhBd,EAAe,SAACkB,GACZ,GAAAC,ECsBF,ODtBEA,IACIC,mBAAoB,EAAGC,OAAQ,EAC/BZ,aAAc,IAAKC,WAAY,IAC/BY,OAAQ,GAAIC,OAAQ,GACpBC,UAAU,GACdN,EAAO7B,EAAEoC,OAAON,EAAUD,GAC1B,SAACN,GACG,GAAAc,EAAA,OAAaC,OAAMf,KAAUgB,SAAShB,GAA/B,GACW,IAALA,GAAeM,EAAKM,UACjCE,EAASnC,GAAe2B,EAAKG,OAAOT,GAAGiB,QAAQX,EAAKE,oBAAqBF,EAAKT,aAAcS,EAAKR,YAC1F,GAAGQ,EAAKI,OAAOI,EAAOR,EAAKK,QAF3B,KAKfnB,EAAQJ,IACRK,EAAWL,GAAaoB,mBAAoB,IAC5Cd,EAAWN,GAAaoB,mBAAmB,EAAGC,OAAQ,IAAKE,OAAQ,MAEnE/B,GACIsC,MAAO,SAACC,GC8BR,MAHiB,OAAbA,ID3BIA,EAAU1B,GAAa,WC+B7B,MD/BmC,UAAC2B,EAAMC,EAAQC,GCgChD,OD/BAJ,MAAO,EACPK,KAAO,WCiCH,MDjCM/D,MAAC0D,SACXM,MAAO,WCmCH,MDnCMhE,MAAC0D,OACXO,OAAQN,MAEZO,YAAa,SAACP,GC2Cd,MAHiB,OAAbA,IDxCUA,EAAU1B,GAAa,SAACkC,GAAW,GAAAC,EC8C/C,OD9CqCA,GAADD,EAAA,GAAW,SAACP,EAAMC,EAAQC,GC+C5D,OD9CAO,QACAN,KAAM,SAACO,GAAW,GAAAC,EAAA,IAAAA,EAA4BD,EAAOF,GAAPxE,EAAA4E,KAAoBxE,KAACqE,KAArBE,GAAA,ECkDxC,MDlDYvE,MAACqE,KAAKN,KAAKO,EAAOF,KACpCJ,MAAO,WCqDH,MDrDMhE,MAACqE,KAAKpE,QAChBgE,OAAQN,EACRc,UAAc,MAAAL,EAAW,EAAO,MAEpCM,WAAY,SAACC,GC0Db,MD1DqB,UAACR,GAAW,GAAAC,EC6D/B,OD7DqBA,GAADD,EAAA,GAAW,SAACP,EAAMC,EAAQC,GC8D5C,OD7DAO,QACAN,KAAM,SAACO,GAAW,GAAAC,EAAA,IAAAA,EAA4BD,EAAOF,GAAPxE,EAAA4E,KAAoBxE,KAACqE,KAArBE,GAAA,ECiExC,MDjEYvE,MAACqE,KAAKN,KAAKO,EAAOF,KACpCJ,MAAO,WCoEH,MDpEMhE,MAACqE,KAAKO,KAAKD,IACrBV,OAAQ,SAACzB,GCsEL,MDtEWA,IACfiC,UAAc,MAAAL,EAAW,EAAO,MAEpCS,IAAK,SAAClB,GC8EN,MAHiB,OAAbA,ID3EEA,EAAU3B,GAAU,SAACmC,GAAW,GAAAC,ECiFpC,ODjF0BA,GAADD,EAAA,GAAW,SAACP,EAAMC,EAAQC,GCkFjD,ODjFAe,IAAK,EACLd,KAAM,SAACO,GAAW,IAAwCf,MAAMuB,WAAWR,EAAOF,KCoF5E,MDpFYpE,MAAC6E,KAAOC,WAAWR,EAAOF,KAC5CJ,MAAO,WCuFH,MDvFMhE,MAAC6E,KACXZ,OAAQN,EACRc,UAAc,MAAAL,EAAW,EAAO,MAEpCW,IAAK,SAACpB,GC+FN,MAHiB,OAAbA,ID5FEA,EAAU3B,GAAU,SAACmC,GAAW,GAAAC,ECkGpC,ODlG0BA,GAADD,EAAA,GAAW,SAACP,EAAMC,EAAQC,GCmGjD,ODlGAkB,IAAK,KACLjB,KAAM,SAACO,GACH,GAAAC,GAAA/B,CACA,IADAA,EAAIsC,WAAWR,EAAOF,KACfb,MAAMf,GCqGX,MDrGkBxC,MAACgF,IAAMC,KAAKF,IAAIvC,EAAT,OAAA+B,EAAAvE,KAAAgF,KAAAT,EAAmB/B,IAClDwB,MAAO,WCwGH,MDxGMhE,MAACgF,KACXf,OAAQN,EACRc,UAAc,MAAAL,EAAW,EAAO,MAEpCc,IAAK,SAACvB,GCgHN,MAHiB,OAAbA,ID7GEA,EAAU3B,GAAU,SAACmC,GAAW,GAAAC,ECmHpC,ODnH0BA,GAADD,EAAA,GAAW,SAACP,EAAMC,EAAQC,GCoHjD,ODnHAkB,IAAK,KACLjB,KAAM,SAACO,GACH,GAAAC,GAAA/B,CACA,IADAA,EAAIsC,WAAWR,EAAOF,KACfb,MAAMf,GCsHX,MDtHkBxC,MAACgF,IAAMC,KAAKC,IAAI1C,EAAT,OAAA+B,EAAAvE,KAAAgF,KAAAT,EAAmB/B,IAClDwB,MAAO,WCyHH,MDzHMhE,MAACgF,KACXf,OAAQN,EACRc,UAAc,MAAAL,EAAW,EAAO,MAEpCe,QAAU,SAACxB,GCiIX,MAHiB,OAAbA,ID9HOA,EAAU3B,GAAU,SAACmC,GAAW,GAAAC,ECoIzC,ODpI+BA,GAADD,EAAA,GAAW,SAACP,EAAMC,EAAQC,GCqItD,ODpIAe,IAAK,EACLO,IAAK,EACLrB,KAAM,SAACO,GACH,IAAOf,MAAMuB,WAAWR,EAAOF,KCuI7B,MDtIEpE,MAAC6E,KAAOC,WAAWR,EAAOF,IAC1BpE,KAACoF,OACTpB,MAAO,WCwIH,MDxIMhE,MAAC6E,IAAI7E,KAACoF,KAChBnB,OAAQN,EACRc,UAAc,MAAAL,EAAW,EAAO,MAEpCiB,WAAY,SAAC1B,GCgJb,MAHiB,OAAbA,ID7ISA,EAAU3B,GAAU,SAACmC,GAAiB,GAAAmB,GAAAC,CCmJjD,ODnJiCA,GAAApB,EAAA,GAAKmB,EAAAnB,EAAA,GAAW,SAACP,EAAMC,EAAQC,GCoJ9D,ODnJA0B,OAAQ,EACRC,SAAU,EACV1B,KAAM,SAACO,GAEH,GAD8Cf,MAAMuB,WAAWR,EAAOiB,OAAtEvF,KAACwF,QAAYV,WAAWR,EAAOiB,MACehC,MAAMuB,WAAWR,EAAOgB,KCuJpE,MDvJFtF,MAACyF,UAAYX,WAAWR,EAAOgB,KACnCtB,MAAO,WC0JH,MD1JMhE,MAACwF,OAAOxF,KAACyF,UACnBxB,OAAQN,EACRc,UAAc,MAAAc,GAAS,MAAAD,EAAY,EAAO,MAE9CI,kBAAmB,SAACC,EAAYhC,GCqKhC,MANa,OAATgC,ID/JgBA,GAAM,GCkKT,MAAbhC,IDlK4BA,EAAU3B,GAAU,SAACmC,GAAiB,GAAAmB,GAAAC,CCwKpE,ODxKoDA,GAAApB,EAAA,GAAKmB,EAAAnB,EAAA,GAAW,SAACP,EAAMC,EAAQC,GCyKjF,ODxKA0B,OAAQ,EACRC,SAAU,EACV1B,KAAM,SAACO,GAEH,GAD8Cf,MAAMuB,WAAWR,EAAOiB,OAAtEvF,KAACwF,QAAYV,WAAWR,EAAOiB,MACehC,MAAMuB,WAAWR,EAAOgB,KC4KpE,MD5KFtF,MAACyF,UAAYX,WAAWR,EAAOgB,KACnCtB,MAAO,WACH,GAAA4B,ECgLA,ODhLAA,GAAUD,EAAW,MACpB,iBAAkB3F,KAACyF,SAAWzF,KAACwF,OAAOxF,KAACyF,SAAW,mBAAmBG,EAClEX,KAAKY,KAAK,kBAAoB7F,KAACyF,SAASzF,KAACyF,UAAazF,KAACwF,QAAQ,EAAIxF,KAACwF,OAAQxF,KAACyF,WAAazF,KAACyF,SAASzF,KAACyF,aACpG,EAAI,kBAAkBzF,KAACyF,WAChCxB,OAAQN,EACRc,UAAc,MAAAc,GAAS,MAAAD,EAAY,EAAO,MAE9CQ,WAAY,SAACC,EAASC,EAAcrC,GCwLpC,MANY,OAARqC,IDlLkBA,EAAK,SCqLV,MAAbrC,IDrLgCA,EAAUzB,GAAa,WAAU,GAAAM,EC2LnE,OD3L0DA,GAAA,GAAAjC,UAAAN,OAAAC,EAAAsE,KAAAjE,UAAA,MAAS,SAACqD,EAAMC,EAAQC,GC4LhF,OD3LAmC,UAAWC,cAAcC,KAAKtC,MAAWuC,QAAQtC,IAASkC,GAC1DK,MAAON,EAAAzF,MAAA,KAAQkC,GAAMoB,EAAMC,EAAQC,GACnCC,KAAM,SAACO,GCiMH,MDjMctE,MAACqG,MAAMtC,KAAKO,IAC9BL,OAAQN,EACRK,MAAO,WCmMH,MDnMMhE,MAACqG,MAAMrC,QAAUJ,EAAK0C,cAALhG,MAAAsD,EAAmB5D,KAACiG,UAAaI,MAAMrC,SAClES,UAAWsB,EAAAzF,MAAA,KAAQkC,KAAQiC,eAGnCpD,EAAiB,SAACkF,GCwMhB,ODvMEC,MAAwBD,EAAI7C,MAAMzB,GAClCwE,sBAAwBF,EAAIrC,YAAYjC,GACxCyE,qBAAwBH,EAAI7B,WAAW,MACvCiC,IAAwBJ,EAAI1B,IAAI7C,GAChC4E,cAAwBL,EAAI1B,IAAI5C,GAChC4E,QAAwBN,EAAIpB,QAAQnD,GACpC8E,QAAwBP,EAAIxB,IAAI/C,GAChC+E,QAAwBR,EAAIrB,IAAIlD,GAChCgF,eAAwBT,EAAIlB,WAAWrD,GACvCiF,kBAAwBV,EAAIb,mBAAkB,EAAM1D,GACpDkF,kBAAwBX,EAAIb,mBAAkB,EAAO1D,GACrDmF,2BAAgCZ,EAAIT,WAAWS,EAAI1B,MAAS,QAAS3C,GACrEkF,0BAAgCb,EAAIT,WAAWS,EAAI1B,MAAS,MAAS3C,GACrEmF,6BAAgCd,EAAIT,WAAWS,EAAI1B,MAAS,MAAS3C,GACrEoF,6BAAgCf,EAAIT,WAAWS,EAAI7C,QAAS,QAASxB,GACrEqF,4BAAgChB,EAAIT,WAAWS,EAAI7C,QAAS,MAASxB,GACrEsF,+BAAgCjB,EAAIT,WAAWS,EAAI7C,QAAS,MAASxB,KAjBjDd,GAmBxBU,GACI2F,MAAkB,SAAC7D,EAAMd,GC0MzB,MD1MoCjB,GAAmB+B,EAAMd,IAC7D4E,iBAAkB,SAAC9D,EAAMd,GC4MzB,MD5MkC7B,GAAEY,EAAmB+B,EAAMd,IAAO6E,YACpEC,QAAkB,SAAChE,EAAMd,GC8MzB,MD9MkC7B,GAAEY,EAAmB+B,EAAMd,IAAO+E,QAAQ,UAAc/E,IAC1FgF,cAAkB,SAAClE,EAAMd,GCgNzB,MDhNkC7B,GAAEY,EAAmB+B,EAAMd,IAAO+E,QAAQ,aAAc/E,IAC1FiF,cAAkB,SAACnE,EAAMd,GCkNzB,MDlNkC7B,GAAEY,EAAmB+B,EAAMd,IAAO+E,QAAQ,aAAc/E,KAE9FrB,GACIuG,IACI3G,YAAaA,EACbS,UAAWA,EACXmG,eACIC,YAAa,sDACbC,aAAc,sDACdC,cAAe,iDACfC,UAAW,aACXC,WAAY,cACZC,QAAS,qBACTC,cAAe,iBACfC,OAAQ,SACRC,GAAI,KACJC,GAAI,QAGhBjH,GAAc,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,OAChFJ,GAAc,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,OAClDa,EAAU,SAACyG,GCqNT,ODrNqB,IAAIA,GAAQC,UAAU,IAE7CtH,GACIuH,IAAK,SAAC1C,EAAK2C,GCsNX,MDtNwB,UAACzE,GCuNvB,MDvNkCA,GAAO8B,GAAO9B,EAAO8B,GAAO2C,IAChEC,WAAY,SAAC5C,EAAK6C,EAAcC,EAAiBC,EAAqBC,GAClE,GAAAC,ECoOJ,OAViB,OAAbH,ID3N4BA,GAAU,GC8N1B,MAAZC,ID9N6CA,EAASzH,GCiO1C,MAAZ0H,IDjOkEA,EAAS9H,GAC3E+H,EAASH,EAAe,MAAW,GACnC,SAAC5E,GACG,GAAAgF,EACA,OADAA,GAAW,GAAAC,MAAKA,KAAKC,MAAMlF,EAAO8B,KAC/B7C,MAAM+F,GAAkB,GAC3BL,EAAapG,QAAQ,QAAS,SAAC4G,EAAGC,GAC9B,OAAOA,GAAP,IACS,ICuOb,MDvOsBJ,GAAK,MAAMD,EAAI,aADjC,KAES,ICwOb,MDxOsBlH,GAAQmH,EAAK,MAAMD,EAAI,WAAU,EAFnD,KAGS,ICyOb,MDzOsBF,GAASG,EAAK,MAAMD,EAAI,WAH1C,KAIS,IC0Ob,MD1OsBlH,GAAQmH,EAAK,MAAMD,EAAI,UAJzC,KAKS,IC2Ob,MD3OsBD,GAASE,EAAK,MAAMD,EAAI,SAL1C,KAMS,IC4Ob,MD5OsBC,GAAK,MAAMD,EAAI,QANjC,KAOS,IC6Ob,MD7OsBlH,GAAQmH,EAAK,MAAMD,EAAI,WAPzC,KAQS,IC8Ob,MD9OsBlH,GAAQmH,EAAK,MAAMD,EAAI,aARzC,KASS,IC+Ob,MD/OsBlH,GAAQmH,EAAK,MAAMD,EAAI,aATzC,SC0PJ,MDhPa,IAAMK,QAE/B/H,EAAc,SAAAgI,GCqPZ,MDrPY,UAACC,EAAIC,GACf,GAAAC,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,CAGA,IAHAD,EAAK,eACLD,EAAK,KACLE,EAAK,KACW,gBAANR,IAA+B,gBAANC,GAC/B,MAAatG,OAAMqG,GAAZ,EACOrG,MAAMsG,MACbD,EAAKC,CAGhB,IAFAC,EAAIO,OAAOT,GAAIU,cACfN,EAAIK,OAAOR,GAAIS,cACFR,IAAKE,EAAlB,MAAO,EACP,KAAyCE,EAAGtH,KAAKkH,KAAOI,EAAGtH,KAAKoH,GAAhE,MAAWF,GAAIE,EAAO,IAGtB,KAFAF,EAAIA,EAAES,MAAMJ,GACZH,EAAIA,EAAEO,MAAMJ,GACNL,EAAE7J,QAAW+J,EAAE/J,QAGjB,GAFA8J,EAAKD,EAAEU,QACPP,EAAKD,EAAEQ,QACJT,IAAQE,EACP,MAAGC,GAAGtH,KAAKmH,IAAQG,EAAGtH,KAAKqH,GAChBF,EAAGlH,QAAQuH,EAAI,MAAQH,EAAGpH,QAAQuH,EAAI,MAElCL,EAAKE,EAAQ,ICmQpC,ODlQAH,GAAE7J,OAAS+J,EAAE/J,SAtBHD,MAwBd+B,EAAS,SAAC0I,GACN,GAAA3K,GAAA4K,EAAAlI,CAAAkI,KACA,KAAA5K,IAAA2K,GCqQAjI,EAAIiI,EAAM3K,GDpQN4K,EAAQlI,GAAK1C,CCuQnB,ODtQE,UAACgK,EAAGE,GACA,MAAG,OAAAU,EAAAZ,IAAgB,MAAAY,EAAAV,GACRU,EAAQZ,GAAKY,EAAQV,GACxB,MAAAU,EAAAZ,MAEA,MAAAY,EAAAV,GACG,EAEArI,EAAYmI,EAAEE,KAEjCxI,EAAU,SAACmJ,EAASvG,GAChB,GAAAwG,EACA,OADAA,GAAOD,EAAQvG,GACZnD,EAAE4J,WAAWD,GACLA,EAEAjJ,GAMTT,EAAA,WACW,QAAAA,GAAC4J,EAAOhI,GC2QrB9C,KAAKsG,cAAgBnG,EAAKH,KAAKsG,cAAetG,MAC9CA,KAAK+K,WAAa5K,EAAKH,KAAK+K,WAAY/K,MACxCA,KAAKgL,WAAa7K,EAAKH,KAAKgL,WAAYhL,MACxCA,KAAKiL,SAAW9K,EAAKH,KAAKiL,SAAUjL,MACpCA,KAAKkL,QAAU/K,EAAKH,KAAKkL,QAASlL,MD9Q9BA,KAACmL,WAAarI,EAAKqI,WACnBnL,KAACoL,eAAiBtI,EAAKsI,eACvBpL,KAACqL,SAAWvI,EAAKwI,KACjBtL,KAACuL,SAAWzI,EAAK0I,KACjBxL,KAACyL,SAAW3I,EAAK4I,KACjB1L,KAAC2K,QAAU7H,EAAK6H,QAChB3K,KAAC2L,QACD3L,KAAC4L,WACD5L,KAAC6L,WACD7L,KAAC8L,aACD9L,KAAC+L,aACD/L,KAACgM,SAAWhM,KAACmL,WAAWnL,YACxBA,KAACiM,QAAS,EAGV/K,EAAUgL,cAAcpB,EAAOhI,EAAKqJ,kBAAmB,SAAAxC,GC8QzD,MD9QyD,UAACrF,GACpD,GAA0BxB,EAAKsJ,OAAO9H,GC+QxC,MD/QEqF,GAAC0C,cAAc/H,KADoCtE,OCuc7D,MDncEkB,GAACgL,cAAgB,SAACpB,EAAOqB,EAAmBG,GACxC,GAAAC,GAAAC,EAAA1M,EAAA2M,EAAAC,EAAA3M,EAAA4M,EAAArI,EAAAC,EAAAqI,EAAAC,EAAAC,CAQA,IAPIP,EADDtL,EAAE8L,cAAcZ,GACHG,EAEA,SAAChI,GACT,GAAAoI,GAAAnI,EAAAyI,CAAA,KAAAN,IAAAP,GCqRNa,EAAIb,EAAkBO,GDrRhBpI,EAAOoI,GAAP,OAAAnI,EAAAyI,EAAA1I,IAAAC,EAAwBD,EAAOoI,ECwRvC,ODvRQJ,GAAEhI,IAGPrD,EAAE4J,WAAWC,GCwRlB,MDvRMA,GAAMyB,EACL,IAAGtL,EAAEgM,QAAQnC,GAAb,CACD,GAAG7J,EAAEgM,QAAQnC,EAAM,IAAnB,CACI8B,ICwRR,KDxRQ9M,IAAAgL,GCyRN,GAAKtK,EAAQgE,KAAKsG,EAAOhL,KACzB0M,EAAgB1B,EAAMhL,GD1RuBA,EAAI,GC2RjD,CD1RUwE,KACAC,EAAAuG,EAAA,EAAA,KAAA2B,IAAAlI,GC+RH/D,EAAQgE,KAAKD,EAAKkI,KACvBC,EAAInI,EAAIkI,GDhSAnI,EAAOoI,GAAKF,EAAcC,GCmSpCG,GAAQ7I,KDlSEwI,EAAUjI,ICoStB,MAAOsI,GAGP,IDrSQC,KAAA9M,EAAA,EAAA4M,EAAA7B,EAAA7K,OAAAF,EAAA4M,EAAA5M,ICsSNuE,EAASwG,EAAM/K,GACf8M,EAAS9I,KDvSHwI,EAAUjI,GCySlB,OAAOuI,GDxSF,GAAG/B,YAAiB9J,QC+S3B,MD9SM8L,MACA7L,EAAE,kBAAmB6J,GAAOoC,KAAK,SAACpN,GC2StC,MD3S4CgN,GAAQ/I,KAAK9C,EAAEjB,MAAMmN,UAC7DlM,EAAE,aAAc6J,GAAOoC,KAAK,SAACpN,GCiTjC,MDhTQwE,MACArD,EAAE,KAAMjB,MAAMkN,KAAK,SAACT,GC6S1B,MD7SgCnI,GAAOwI,EAAQL,IAAMxL,EAAEjB,MAAMmN,SACvDZ,EAAUjI,IAEd,MAAU,IAAA8I,OAAM,yBAGxBlM,EAACmM,eAAiB,SAACvC,GACf,GAAAxH,EAEA,OAFAA,MACApC,EAAUgL,cAAcpB,KAAW,SAACxG,GCkTtC,MDlTiDhB,GAAOS,KAAKO,KACpDhB,GCsTbpC,EAAUoM,UDpTRpC,QAAS,SAACqC,GACN,GAAAzD,GAAA0D,CC8TJ,OD9TIA,GAAA,WCsTF,GAAIzN,GAAG4M,EAAMC,CAEb,KDxTgBA,KAAA7M,EAAA,EAAA4M,EAAAY,EAAAtN,OAAAF,EAAA4M,EAAA5M,ICyTd+J,EAAIyD,EAAMxN,GACV6M,EAAQ7I,KD1TMvC,EAAQxB,KAAC2K,QAASb,GC4TlC,OAAO8C,IACNpI,KAAKxE,MD5TJ,SAAC8J,EAAEE,GACC,GAAAyD,GAAA3N,EAAA4N,CAAA,KAAA5N,IAAA0N,GC+TJ,GAAKhN,EAAQgE,KAAKgJ,EAAY1N,KAC9B4N,EAASF,EAAW1N,GD/TZ2N,EAAaC,EAAO5D,EAAEhK,GAAIkK,EAAElK,IACO,IAAd2N,GAArB,MAAOA,EACX,OAAO,KCuUjBvM,EAAUoM,UDrURrC,SAAU,WACN,IAAOjL,KAACiM,OCwUV,MDvUMjM,MAACiM,QAAS,EACVjM,KAAC4L,QAAQhB,KAAK5K,KAACkL,QAAQlL,KAACuL,WACxBvL,KAAC6L,QAAQjB,KAAK5K,KAACkL,QAAQlL,KAACqL,YCyUlCnK,EAAUoM,UDvURtC,WAAY,WAER,MADAhL,MAACiL,WACMjL,KAAC6L,SC0Ud3K,EAAUoM,UDxURvC,WAAY,WAER,MADA/K,MAACiL,WACMjL,KAAC4L,SC2Ud1K,EAAUoM,UDzURjB,cAAe,SAAC/H,GACZ,GAAAR,GAAA6J,EAAAC,EAAA7N,EAAA4M,EAAAkB,EAAAC,EAAAvJ,EAAAwJ,EAAAC,EAAAC,EAAApK,EAAArB,CAEA,KAFAsB,KACAD,KACAU,EAAAvE,KAAAqL,SAAAtL,EAAA,EAAA4M,EAAApI,EAAAtE,OAAAF,EAAA4M,EAAA5M,IC4UFyC,EAAI+B,EAAIxE,GD5UN+D,EAAOC,KAAP,OAAAgK,EAAAzJ,EAAA9B,IAAAuL,EAAwB,OACxB,KAAAC,EAAAhO,KAAAuL,SAAAuC,EAAA,EAAAD,EAAAG,EAAA/N,OAAA6N,EAAAD,EAAAC,ICgVFtL,EAAIwL,EAAKF,GDhVPjK,EAAOE,KAAP,OAAAkK,EAAA3J,EAAA9B,IAAAyL,EAAwB,OAkBxB,IAjBAL,EAAa/J,EAAOe,KAAKyF,OAAO6D,aAAa,IAC7CP,EAAa7J,EAAOc,KAAKyF,OAAO6D,aAAa,IAE7ClO,KAACgM,SAASjI,KAAKO,GAEK,IAAjBT,EAAO5D,SACCD,KAAC8L,UAAU8B,KACd5N,KAAC4L,QAAQ7H,KAAKF,GACd7D,KAAC8L,UAAU8B,GAAc5N,KAACmL,WAAWnL,KAAM6D,OAC/C7D,KAAC8L,UAAU8B,GAAY7J,KAAKO,IAEZ,IAAjBR,EAAO7D,SACCD,KAAC+L,UAAU4B,KACd3N,KAAC6L,QAAQ9H,KAAKD,GACd9D,KAAC+L,UAAU4B,GAAc3N,KAACmL,WAAWnL,QAAU8D,IACnD9D,KAAC+L,UAAU4B,GAAY5J,KAAKO,IAEZ,IAAjBR,EAAO7D,QAAiC,IAAjB4D,EAAO5D,OCyVnC,MDxVaD,MAAC2L,KAAKiC,KACT5N,KAAC2L,KAAKiC,OACH5N,KAAC2L,KAAKiC,GAAYD,KACrB3N,KAAC2L,KAAKiC,GAAYD,GAAc3N,KAACmL,WAAWnL,KAAM6D,EAAQC,IAC9D9D,KAAC2L,KAAKiC,GAAYD,GAAY5J,KAAKO,ICwV7CpD,EAAUoM,UDtVRhH,cAAe,SAACzC,EAAQC,GACpB,GAAAqK,GAAAR,EAAAC,CAUA,OAVAA,GAAa/J,EAAOe,KAAKyF,OAAO6D,aAAa,IAC7CP,EAAa7J,EAAOc,KAAKyF,OAAO6D,aAAa,IAEzCC,EADgB,IAAjBtK,EAAO5D,QAAiC,IAAjB6D,EAAO7D,OACvBD,KAACgM,SACc,IAAjBnI,EAAO5D,OACLD,KAAC+L,UAAU4B,GACI,IAAjB7J,EAAO7D,OACLD,KAAC8L,UAAU8B,GAEX5N,KAAC2L,KAAKiC,GAAYD,GAC5B,MAAAQ,EAAOA,GAAOnK,MAAO,WC0VrB,MD1VyB,OAAOC,OAAQ,WC6VxC,MD7V2C,MCkW1C/C,KD/VTD,EAAEmN,gBAAkBhN,oBAAAA,EAAqBC,YAAAA,EAAaS,UAAAA,EAAWP,SAAAA,EAAUE,QAAAA,EACvEE,YAAAA,EAAaC,aAAAA,EAAcG,OAAAA,EAAQb,UAAAA,GAMvCW,EAAqB,SAACwM,EAAWvL,GAE7B,GAAAqI,GAAAmD,EAAAjD,EAAAvH,EAAA+H,EAAA9I,EAAAjD,EAAA2M,EAAA8B,EAAAjL,EAAAiI,EAAA1H,EAAA+H,EAAA4C,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA7J,EAAAxC,CAAAO,IACIkF,eACIQ,OAAQ,WAEhB3F,EAAO7B,EAAEoC,OAAON,EAAUD,GAE1BuI,EAAWgD,EAAUhD,SACrBE,EAAW8C,EAAU9C,SACrBK,EAAUyC,EAAUtD,aACpBc,EAAUwC,EAAUrD,aAGpB1H,EAASwL,SAASC,cAAc,SAChCzL,EAAO0L,UAAY,WAGnBR,EAAW,SAACS,EAAKnP,EAAG2M,GAChB,GAAA1M,GAAAqF,EAAA0I,EAAAoB,EAAA3K,EAAAwJ,EAAAoB,EAAA3M,CAAA,IAAQ,IAAL1C,EAAH,CAEI,IADAoP,GAAS,EACA1M,EAAAzC,EAAA,EAAAwE,EAAAkI,EAAA,GAAAlI,EAAAxE,GAAAwE,EAAAxE,GAAAwE,EAAA/B,EAAA,GAAA+B,IAAAxE,IAAAA,EACFkP,EAAInP,EAAE,GAAG0C,KAAMyM,EAAInP,GAAG0C,KACrB0M,GAAS,EACjB,IAAGA,EACD,SAEN,IADA9J,EAAM,EACAtF,EAAEsF,EAAM6J,EAAIhP,QAAlB,CAEI,IADAkP,GAAO,EACE3M,EAAAsL,EAAA,EAAAC,EAAAtB,EAAA,GAAAsB,EAAAD,GAAAC,EAAAD,GAAAC,EAAAvL,EAAA,GAAAuL,IAAAD,IAAAA,EACUmB,EAAInP,GAAG0C,KAAMyM,EAAInP,EAAEsF,GAAK5C,KAAvC2M,GAAO,EACX,IAASA,EAAT,KACA/J,KACJ,MAAOA,GAGX,KAAAqH,IAAApB,GCiXA,GAAK7K,EAAQgE,KAAK6G,EAAUoB,GAA5B,CACA6B,EAAIjD,EAASoB,GDjXTmC,EAAKE,SAASC,cAAc,MACV,IAAfK,SAAS3C,IAA+B,IAAnBlB,EAAStL,SAC7ByO,EAAKI,SAASC,cAAc,MAC5BL,EAAGW,aAAa,UAAW9D,EAAStL,QACpCyO,EAAGW,aAAa,UAAWhE,EAASpL,QACpC2O,EAAGU,YAAYZ,IACnBA,EAAKI,SAASC,cAAc,MAC5BL,EAAGM,UAAY,eACfN,EAAGa,YAAcjB,EACjBM,EAAGU,YAAYZ,EACf,KAAA5O,IAAA+L,GCoXGrL,EAAQgE,KAAKqH,EAAS/L,KAC3BgE,EAAS+H,EAAQ/L,GDpXX0C,EAAIgM,EAAS3C,EAASuD,SAAStP,GAAIsP,SAAS3C,IACzCjK,SACCkM,EAAKI,SAASC,cAAc,MAC5BL,EAAGM,UAAY,cACfN,EAAGa,YAAczL,EAAO2I,GACxBiC,EAAGW,aAAa,UAAW7M,GACxB4M,SAAS3C,KAAMpB,EAASpL,OAAO,GAAyB,IAAnBsL,EAAStL,QAC7CyO,EAAGW,aAAa,UAAW,GAC/BT,EAAGU,YAAYZ,IACL,KAAfU,SAAS3C,KACRiC,EAAKI,SAASC,cAAc,MAC5BL,EAAGM,UAAY,gBACfN,EAAGc,UAAY1M,EAAKmF,cAAcQ,OAClCiG,EAAGW,aAAa,UAAWhE,EAASpL,QAA+B,IAAlBsL,EAAStL,OAAgB,EAAO,IACjF2O,EAAGU,YAAYZ,IACnBpL,EAAOgM,YAAYV,GAGvB,GAAqB,IAAlBrD,EAAStL,OAAZ,CACI2O,EAAKE,SAASC,cAAc,KAC5B,KAAAjP,IAAAyL,GCyXG/K,EAAQgE,KAAK+G,EAAUzL,KAC5ByO,EAAIhD,EAASzL,GDzXP4O,EAAKI,SAASC,cAAc,MAC5BL,EAAGM,UAAY,eACfN,EAAGa,YAAchB,EACjBK,EAAGU,YAAYZ,GACnBA,GAAKI,SAASC,cAAc,MACP,IAAlB1D,EAASpL,SACRyO,EAAGM,UAAY,gBACfN,EAAGc,UAAY1M,EAAKmF,cAAcQ,QACtCmG,EAAGU,YAAYZ,GACfpL,EAAOgM,YAAYV,GAGvB,IAAA9O,IAAA8L,GC4XA,GAAKpL,EAAQgE,KAAKoH,EAAS9L,GAA3B,CACA+D,EAAS+H,EAAQ9L,GD5Xb8O,EAAKE,SAASC,cAAc,KAC5B,KAAAtC,IAAA5I,GC8XGrD,EAAQgE,KAAKX,EAAQ4I,KAC1BoC,EAAMhL,EAAO4I,GD9XPjK,EAAIgM,EAAS5C,EAASwD,SAAStP,GAAIsP,SAAS3C,IACzCjK,SACCkM,EAAKI,SAASC,cAAc,MAC5BL,EAAGM,UAAY,cACfN,EAAGa,YAAcV,EACjBH,EAAGW,aAAa,UAAW7M,GACxB4M,SAAS3C,KAAMlB,EAAStL,OAAO,GAAwB,IAAlBoL,EAASpL,QAC7CyO,EAAGW,aAAa,UAAU,GAC9BT,EAAGU,YAAYZ,IACvB,KAAAjC,IAAAZ,GCmYGrL,EAAQgE,KAAKqH,EAASY,KAC3B3I,EAAS+H,EAAQY,GDnYXtB,EAAakD,EAAU/H,cAAczC,EAAQC,GAC7CkB,EAAMmG,EAAWnH,QACjByK,EAAKK,SAASC,cAAc,MAC5BN,EAAGO,UAAY,aAAalP,EAAE,OAAM2M,EACpCgC,EAAGc,YAAcpE,EAAWlH,OAAOe,GACnCyJ,EAAGY,aAAa,aAAcrK,GAC9B4J,EAAGU,YAAYb,GAEnBE,GAAkBN,EAAU/H,cAAczC,MAC1CmB,EAAM2J,EAAgB3K,QACtByK,EAAKK,SAASC,cAAc,MAC5BN,EAAGO,UAAY,oBACfP,EAAGc,YAAcZ,EAAgB1K,OAAOe,GACxCyJ,EAAGY,aAAa,aAAcrK,GAC9ByJ,EAAGY,aAAa,WAAY,MAAMvP,GAClC8O,EAAGU,YAAYb,GACfnL,EAAOgM,YAAYV,GAGvBA,EAAKE,SAASC,cAAc,MAC5BL,EAAKI,SAASC,cAAc,MAC5BL,EAAGM,UAAY,gBACfN,EAAGc,UAAY1M,EAAKmF,cAAcQ,OAClCiG,EAAGW,aAAa,UAAW9D,EAAStL,QAAgC,IAAnBoL,EAASpL,OAAiB,EAAO,IAClF2O,EAAGU,YAAYZ,EACf,KAAAjC,IAAAZ,GCoYKrL,EAAQgE,KAAKqH,EAASY,KAC3B3I,EAAS+H,EAAQY,GDpYbkC,EAAkBN,EAAU/H,iBAAkBxC,GAC9CkB,EAAM2J,EAAgB3K,QACtByK,EAAKK,SAASC,cAAc,MAC5BN,EAAGO,UAAY,oBACfP,EAAGc,YAAcZ,EAAgB1K,OAAOe,GACxCyJ,EAAGY,aAAa,aAAcrK,GAC9ByJ,EAAGY,aAAa,WAAY,MAAM5C,GAClCmC,EAAGU,YAAYb,GAcnB,OAbAE,GAAkBN,EAAU/H,qBAC5BtB,EAAM2J,EAAgB3K,QACtByK,EAAKK,SAASC,cAAc,MAC5BN,EAAGO,UAAY,gBACfP,EAAGc,YAAcZ,EAAgB1K,OAAOe,GACxCyJ,EAAGY,aAAa,aAAcrK,GAC9B4J,EAAGU,YAAYb,GACfnL,EAAOgM,YAAYV,GAGnBtL,EAAO+L,aAAa,eAAgBzD,EAAQ3L,QAC5CqD,EAAO+L,aAAa,eAAgBxD,EAAQ5L,QAErCqD,GAMXrC,EAAEb,GAAGqP,MAAQ,SAAC3E,EAAOhI,GACjB,GAAAC,GAAA2M,EAAAC,EAAAC,EAAAvB,EAAA/K,EAAAd,CAAAO,IACIuI,QACAE,QACAE,QACAU,OAAQ,WCqYV,ODrYa,GACXyD,UAAW3O,EACXiK,WAAY/J,EAAoBsC,UAChC0H,eAAgB,QAChBT,QAAS,aACTwB,qBACA2D,SAAUjO,EACVkO,gBAAiB,KACjB9H,cAAexG,EAAQuG,GAAGC,eAE9BnF,EAAO7B,EAAEoC,OAAON,EAAUD,GAE1BQ,EAAS,IACT,KACI+K,EAAgB,GAAAvL,GAAK+M,UAAU/E,EAAOhI,EACtC,KACIQ,EAASR,EAAKgN,SAASzB,EAAWvL,EAAKiN,iBAD3C,MAAAJ,GAEMD,EAAAC,EACwB,mBAAAK,UAAA,OAAAA,SAA1BA,QAAQL,MAAMD,EAAEO,OAChB3M,EAASrC,EAAE,UAAUiP,KAAKpN,EAAKmF,cAAcC,cANrD,MAAA0H,GAOMF,EAAAE,EACwB,mBAAAI,UAAA,OAAAA,SAA1BA,QAAQL,MAAMD,EAAEO,OAChB3M,EAASrC,EAAE,UAAUiP,KAAKpN,EAAKmF,cAAcE,cAGtB,IAD3B3F,EAAIxC,KAAK,GACwBwC,EAAE2N,iBAAnC3N,EAAE4N,YAAY5N,EAAE6N,UAChB,OAAOrQ,MAACsQ,OAAOhN,IAOnBrC,EAAEb,GAAGmQ,QAAU,SAACzF,EAAO0F,EAAWC,EAAmBC,GACjD,GAAA5G,GAAAqB,EAAAwF,EAAAC,EAAAtC,EAAAuC,EAAA9N,EAAA2M,EAAAC,EAAAmB,EAAA1Q,EAAAN,EAAAiR,EAAArE,EAAA3M,EAAA4M,EAAAkB,EAAAmD,EAAAC,EAAAnD,EAAAoD,EAAApO,EAAAqO,EAAAC,EAAA7M,EAAAwJ,EAAAC,EAAAC,EAAAoD,EAAAC,EAAAC,EAAAzB,EAAA0B,EAAAC,EAAA3E,EAAA4E,EAAAC,EAAAC,EAAAC,EAAAC,EAAAtP,CC8Ye,OAAbiO,ID/Y4BA,GAAY,GCkZ9B,MAAVC,IDlZ+CA,EAAO,MACjD,MAAAjP,EAAAiP,KACHA,EAAS,MACb3N,GACIoJ,qBACA9K,YAAaI,EAAQiP,GAAQrP,YAC7BS,UAAWL,EAAQiP,GAAQ5O,UAC3BiQ,oBACAC,UAAW,IACXnC,UAAW3O,EACXoK,QAAUE,QAAUE,QACpBuG,cACAC,cACAC,oBAAqB,GACrBC,qBAAqB,EACrBrC,iBAAiB9H,cAAexG,EAAQiP,GAAQzI,eAChDoK,UAAW,KACXjG,OAAQ,WC0ZV,OD1Za,GACXzB,QAAS,aACT1C,cAAexG,EAAQiP,GAAQzI,eAEnC6I,EAAe9Q,KAAC4D,KAAK,kBAEjBd,EADG,MAAAgO,GAAiBL,EACbxP,EAAEoC,OAAON,EAAUyN,GAEnBM,CAEX,KAEIhG,EAAQ5J,EAAUmM,eAAevC,GACjCgC,EAAA,WC2ZF,GAAIvI,GAAKqI,CD3ZIrI,GAAAuG,EAAA,GAAA8B,IC8Zb,KD9ZaF,IAAAnI,GC+ZN/D,EAAQgE,KAAKD,EAAKmI,IACvBE,EAAQ7I,KDhaG2I,ECkab,OAAOE,MDjaLrI,EAAAzB,EAAAqJ,iBAAA,KAAAmC,IAAA/J,GCqaG/D,EAAQgE,KAAKD,EAAK+J,IDraoC1O,EAAA4E,KAASsI,EAATwB,GAAA,GAAzDxB,EAAQ/I,KAAKuK,EAIb,KADAsC,KACA7Q,EAAA,EAAA4M,EAAAG,EAAA7M,OAAAF,EAAA4M,EAAA5M,ICwaFyC,EAAIsK,EAAQ/M,GDxaV6Q,EAAWpO,KAEXtB,GAAUgL,cAAcpB,EAAOhI,EAAKqJ,kBAAmB,SAAC7H,GACpD,GAAAgO,GAAA1F,EAAAI,CAAAJ,KC2aN,KD3aMF,IAAApI,GC4aC9D,EAAQgE,KAAKF,EAAQoI,KAC1BM,EAAI1I,EAAOoI,GD7aqB5J,EAAKsJ,OAAO9H,KCibnC,MAAL0I,IDhbIA,EAAK,QCmboB,OAA5BsF,EAAO1B,EAAWlE,IAAIM,KACzBsF,EDnboBtF,GAAM,GCqb5BJ,EAAQ7I,KDpbA6M,EAAWlE,GAAGM,OCsbxB,OAAOJ,KDnbLgF,EAAU3Q,EAAE,WAAWsR,QAAS,UAASnO,KAAK,cAAe,GAG7DoN,EAAkBvQ,EAAE,QAEpB6O,EAAW7O,EAAE,YACRuR,SAAS,eACTC,SAASjB,GACTrR,KAAK,SAAU,WCkbtB,MDlbyBmR,OACvBvD,EAAAjL,EAAAhB,SAAA,KAAAU,IAAAuL,GCqbGvN,EAAQgE,KAAKuJ,EAAMvL,IDpblBvB,EAAE,YAAY+D,IAAIxC,GAAG0N,KAAK1N,GAAGiQ,SAAS3C,EAa1C,IATAe,EAAU5P,EAAE,QAAQuR,SAAS,8BAC7Bf,EAAA,WCobF,GAAI5D,GAAMC,EAAGlB,CAEb,KDtbqBA,KAAAkB,EAAA,EAAAD,EAAAf,EAAA7M,OAAA6N,EAAAD,EAAAC,ICubnBQ,EAAIxB,EAAQgB,GDvb+BlO,EAAA4E,KAAS1B,EAAKiP,iBAAdzD,GAAA,GCybzC1B,EAAQ7I,KDzbSuK,EC4brB,OAAO1B,MD1bLkF,GAAkC,EAE9BD,EAD2B,SAA5B/O,EAAKqP,oBAC4B,IAEA/C,SAAStM,EAAKqP,sBAE3C5O,MAAMsO,GAAb,CAEI,IADAlB,EAAa,EACb7C,EAAA,EAAAD,EAAA4D,EAAAxR,OAAA6N,EAAAD,EAAAC,IC6bJhE,EAAI2H,EAAgB3D,GD7bhB6C,GAAc7G,EAAE7J,MAChB6R,GAAkCnB,EAAakB,EAEhD/O,EAAKqP,uBAAuB,GAAQL,EACnCjB,EAAQ2B,SAAS,eAEjB3B,EAAQ2B,SAAS,gBCiczBpS,ED9bW,SAACkO,GACA,GAAAoE,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAhC,EAAAE,EAAAlD,EAAAiF,EAAAC,EAAAC,EAAAnG,EAAAoG,CAKA,IALAJ,EAAA,WCgcR,GAAIpG,EDhcYA,KCkchB,KDlcgBF,IAAAkE,GAAAtC,GCmcd1B,EAAQ7I,KDncM2I,ECqchB,OAAOE,MDpcCmG,GAAkB,EAClBK,EAAYnS,EAAE,SAASuR,SAAS,gBAAgBa,OAEhDD,EAAU9C,OAAOrP,EAAE,QAAQkM,KAAQmB,EAAE,KAAI0E,EAAK/S,OAAO,MAClD+S,EAAK/S,OAAS6C,EAAKkP,UAClBoB,EAAU9C,OAAOrP,EAAE,OAAOiP,KAAKpN,EAAKmF,cAAcM,cAmBlD,KAjBAoK,EAAO1R,EAAE,OAAOwR,SAASW,GACzBT,EAAKrC,OAAOrP,EAAE,YAAa+E,KAAK,WAAWkK,KAAKpN,EAAKmF,cAAcI,WAAWlI,KAAK,QAAS,WCwctG,MDvcciT,GAAUE,KAAK,iBAAiBC,KAAK,WAAW,MACpDZ,EAAKrC,OAAOrP,EAAE,YAAa+E,KAAK,WAAWkK,KAAKpN,EAAKmF,cAAcK,YAAYnI,KAAK,QAAS,WC2cvG,MD1cciT,GAAUE,KAAK,iBAAiBC,KAAK,WAAW,MACpDZ,EAAKrC,OAAOrP,EAAE,SACd0R,EAAKrC,OAAOrP,EAAE,WAAY+E,KAAM,OAAQwN,YAAa1Q,EAAKmF,cAAcO,cAAe+J,QAAO,cAAcpS,KAAK,QAAS,WACtH,GAAAiM,ECidd,ODjdcA,GAASnL,EAAEjB,MAAMgF,MAAMsF,cACvB8I,EAAUE,KAAK,wBAAwBpG,KAAK,WACxC,GAAAuG,EACA,OADAA,GAAaxS,EAAEjB,MAAMmN,OAAO7C,cAAc1K,QAAQwM,GAC/CqH,OACCxS,EAAEjB,MAAM0T,OAERzS,EAAEjB,MAAMqT,YAEpBT,EAAiB3R,EAAE,SAASuR,SAAS,qBAAqBC,SAASW,GAEnEpF,EAAAgF,EAAApI,KAAApJ,EAAAsB,EAAA6H,QAAA2D,IAAA4C,EAAA,EAAAF,EAAAhD,EAAA/N,OAAAiR,EAAAF,EAAAE,ICodVxE,EAAIsB,EAAKkD,GDndMlE,EAAI4D,EAAWtC,GAAG5B,GAClBmG,EAAa5R,EAAE,WACf6R,GAAqB,EAClBhQ,EAAKoP,WAAW5D,GAChBwE,EAAsBlT,EAAA4E,KAAS1B,EAAKoP,WAAW5D,GAAzB5B,GAAA,EACjB5J,EAAKmP,WAAW3D,KACrBwE,EAAsBlT,EAAA4E,KAAK1B,EAAKmP,WAAW3D,GAArB5B,IAAA,GACzBqG,IAAAA,EAAoBD,GACpB7R,EAAE,WACEmD,KAAK,OAAQ,YAAYoO,SAAS,aAClCpO,KAAK,WAAY0O,GAAoBlP,KAAK,UAAW0K,EAAE5B,IACvD+F,SAASI,GACbA,EAAWvC,OAAOrP,EAAE,UAAUkM,KAAKT,IACnCmG,EAAWvC,OAAOrP,EAAE,UAAUkM,KAAK,KAAKH,EAAE,MAC1C4F,EAAetC,OAAOrP,EAAE,OAAOqP,OAAOuC,GCsfzD,ODpfUM,GAAe,WACX,GAAAQ,EAMA,OANAA,GAAkBP,EAAUE,KAAK,qBAAqBrT,OACpCmT,EAAUE,KAAK,6BAA6BrT,OAC3D0T,EAAkB,EACjBjB,EAASF,SAAS,wBAElBE,EAASkB,YAAY,wBACtBZ,EAAK/S,OAAS6C,EAAKkP,UAClBoB,EAAUS,SAEVT,EAAUS,OAAO,EAAGvC,IAE5BrQ,EAAE,OAAOwR,SAASW,GACb9C,OAAOrP,EAAE,YAAa+E,KAAK,WAAWmH,KAAK,MAAMhN,KAAK,QAASgT,IAEpEF,EAAiB,SAACvD,GACd,GAAAoE,GAAAC,EAAA9F,CC4dZ,OD5dYA,GAAqChN,EAAEyO,EAAEsE,eAAeC,WAAjDH,EAAA7F,EAANiG,KAAsBH,EAAA9F,EAALkG,IAClBf,EAAUgB,KAAIF,KAAMJ,EAAU,GAAIK,IAAKJ,EAAS,KAAIF,SACpDT,EAAUE,KAAK,cAActO,IAAI,IACjCoO,EAAUE,KAAK,wBAAwBI,QAE3CR,EAAejS,EAAE,UAAUuR,SAAS,eAAetC,KAAK,MACnD/P,KAAK,QAAS8S,GAEnBP,EAAWzR,EAAE,QAAQuR,SAAS,QAAQ1S,GACjCwQ,OAAOrP,EAAE,UAAUuR,SAAS,WAAWrF,KAAKmB,GAAG1K,KAAK,WAAY0K,GAAGgC,OAAO4C,IAClCH,GAA7CL,EAASF,SAAS,wBAClB3B,EAAQP,OAAOoC,GAAUpC,OAAO8C,GAEhCV,EAASvS,KAAK,WAAY8S,GAzElC,KAAAnT,IAAA2R,GCmiBGjR,EAAQgE,KAAKiN,EAAiB3R,KACnCwO,EAAImD,EAAgB3R,GACpBM,EDpiBUkO,GA0ERoD,GAAMzQ,EAAE,QAAQwR,SAASb,GAIzBzG,EAAalK,EAAE,YAAYuR,SAAS,iBAC/BrS,KAAK,SAAU,WCydtB,MDzdyBmR,OACvBtD,EAAAlL,EAAAzB,WAAA,KAAAmB,IAAAwL,GC4dGxN,EAAQgE,KAAKwJ,EAAMxL,ID3dlB2I,EAAWmF,OAAOrP,EAAE,YAAY+D,IAAIxC,GAAG0N,KAAK1N,GAiChD,KA/BAvB,EAAE,QAAQuR,SAAS,WAChBC,SAASf,GACTpB,OAAOnF,GACPmF,OAAOrP,EAAE,SAGZA,EAAE,QAAQuR,SAAS,yCAAyCC,SAASf,GAErEC,EAAM1Q,EAAE,QAAQwR,SAASb,GAGzBD,EAAIrB,OAAOrP,EAAE,QAAQuR,SAAS,4BAA4BpO,KAAK,SAAU,QAGzE+M,EAAalQ,EAAE,QACVmD,KAAK,SAAU,OACfoO,SAAS,mBACTC,SAASd,GAGX7O,EAAKqP,uBAAuB,GAAQL,GACnCF,EAAQ0B,KAAK,mBAAmBe,QAAQ7C,GACxCI,EAAQ0B,KAAK,mBAAmBe,QAAQxD,IAExCe,EAAQyC,QAAQpT,EAAE,QAAQqP,OAAOkB,GAAiBlB,OAAOO,IAG7D7Q,KAACkQ,KAAK0B,GAIN3D,EAAAnL,EAAAwI,KAAA4F,EAAA,EAAAF,EAAA/C,EAAAhO,OAAAiR,EAAAF,EAAAE,IC2cF1O,EAAIyL,EAAKiD,GD1cHlR,KAACsT,KAAK,YAAYhD,OAAOtQ,KAACsT,KAAK,SAASrS,EAAEqT,QAAQ9R,EAAGiP,IACzD,KAAAJ,EAAAvO,EAAA0I,KAAA4F,EAAA,EAAAH,EAAAI,EAAApR,OAAAmR,EAAAH,EAAAG,IC8cF5O,EAAI6O,EAAKD,GD7cHpR,KAACsT,KAAK,YAAYhD,OAAOtQ,KAACsT,KAAK,SAASrS,EAAEqT,QAAQ9R,EAAGiP,IACtD,OAAA3O,EAAAsI,gBACCpL,KAACsT,KAAK,kBAAkBtO,IAAIlC,EAAKsI,gBAClC,MAAAtI,EAAAyR,cACCvU,KAACsT,KAAK,gBAAgBtO,IAAIlC,EAAKyR,cAEnCxD,GAAgB,EAGhBQ,EAAiB,SAAA5H,GC+cnB,MD/cmB,YACb,GAAAvF,GAAA6N,EAAAC,EAAAsC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAxJ,CAmBA,IAnBAsJ,GACI7I,kBAAmBrJ,EAAKqJ,kBACxBlE,cAAenF,EAAKmF,cACpB8H,gBAAiBjN,EAAKiN,gBACtBpF,QAAS7H,EAAK6H,QACdkF,UAAW/M,EAAK+M,UAChBvE,QAAUE,SAEdkJ,EAAA,OAAAG,EAAA/R,EAAAzB,YAAA8J,EAAAnG,aAAAP,WAAAoQ,EAA0E,EAC1EnJ,KACA/B,EAAC2J,KAAK,4BAA4BpG,KAAK,WCkdzC,MDld4C8H,GAAQxJ,KAAKzH,KAAK9C,EAAEjB,MAAM4D,KAAK,eACzE+F,EAAC2J,KAAK,4BAA4BpG,KAAK,WCodzC,MDpd4C8H,GAAQ1J,KAAKvH,KAAK9C,EAAEjB,MAAM4D,KAAK,eACzE+F,EAAC2J,KAAK,mCAAmCpG,KAAK,WAC1C,MAAyB,KAAtBwH,EACCzT,EAAEjB,MAAMmV,UAERT,IAC4C,KAAjBzT,EAAEjB,MAAMgF,MAAnC0G,EAAK3H,KAAK9C,EAAEjB,MAAMgF,OAAlB,UAEiB,IAAtB0P,EAEC,IADAE,EAAUjL,EAAC2J,KAAK,YACP9Q,EAAAuS,EAAA,EAAAD,EAAAJ,EAAA,GAAAI,EAAAC,EAAAD,EAAAC,EAAAD,EAAAtS,EAAA,GAAAsS,IAAAC,IAAAA,EAAT,CAKI,IAJAN,EAAcxT,EAAE,YACXuR,SAAS,mBACTlC,OAAOrP,EAAE,aACTd,KAAK,SAAU,WCsd1B,MDtd6BmR,OACvB2D,EAAA,EAAAT,EAAA/C,EAAAxR,OAAAgV,EAAAT,EAAAS,ICwdN7Q,EAAOqN,EAAgBwD,GDvdbR,EAAYnE,OAAOrP,EAAE,YAAY+D,IAAIZ,GAAM+I,KAAK/I,GACpDwQ,GAAQtE,OAAOmE,GA4DvB,GA1DG1D,IACCrF,EAAO5I,EAAK4I,KACZ5L,EAAI,EACJ6J,EAAC2J,KAAK,mCAAmCpG,KAAK,WC4dlD,MD3dQjM,GAAEjB,MAAMgF,IAAI0G,EAAK5L,IACjBA,MACJiR,GAAgB,GAEpBiE,EAAQ5J,eAAiBD,EAAWnG,MACpCgQ,EAAQtJ,KAAOA,EACfsJ,EAAQ7J,WAAarI,EAAKzB,YAAY8J,EAAWnG,OAAO0G,GACxDsJ,EAAQlF,SAAWhN,EAAKhB,UAAUgO,EAAS9K,OAG3CiN,KACAtI,EAAC2J,KAAK,mBAAmB8B,IAAI,YAAYlI,KAAK,WAC1C,GAAAd,EACA,OADAA,GAASnL,EAAEjB,MAAM4D,KAAK,UACnB,MAAAqO,EAAA7F,EAAA,IACC6F,EAAW7F,EAAO,IAAIrI,KAAMqI,EAAO,IAEnC6F,EAAW7F,EAAO,KAAQA,EAAO,MAEzC8F,KACAvI,EAAC2J,KAAK,2BAA2BpG,KAAK,WAClC,GAAAd,EACA,IADAA,EAASnL,EAAEjB,MAAM4D,KAAK,UACnB,MAAAqO,EAAA7F,EAAA,IACC,MAAG,OAAA8F,EAAA9F,EAAA,IACC8F,EAAW9F,EAAO,IAAIrI,KAAMqI,EAAO,IAEnC8F,EAAW9F,EAAO,KAAQA,EAAO,MAE7C4I,EAAQ5I,OAAS,SAAC9H,GACd,GAAA+Q,GAAAC,CAAA,KAAoBxS,EAAKsJ,OAAO9H,GAAhC,OAAO,CACP,KAAAoI,IAAAuF,GACI,GCieRoD,EAAgBpD,EAAWvF,GDjenB4I,EAAgB,GAAGhR,EAAOoI,GAAV9M,EAAA4E,KAAgB6Q,EAAhBC,IAAA,EAAhB,OAAO,CACX,QAAO,GAEXnE,EAAW1B,MAAM3E,EAAMkK,GACvBL,EAAiB1T,EAAEoC,OAAOP,GACtBwI,KAAM0J,EAAQ1J,KACdE,KAAMwJ,EAAQxJ,KACdE,KAAMA,EACNuG,WAAYA,EACZC,WAAYA,EACZqD,eAAgBrD,EAChB9G,eAAgBD,EAAWnG,MAC3BuP,aAAczE,EAAS9K,QAE3B2E,EAAC/F,KAAK,iBAAkB+Q,GAGrB7R,EAAKsP,sBACJ8C,EAAuBvL,EAAC2J,KAAK,iCAC7BrS,EAAEiU,GAAsBM,SAAS,MAC5B5K,KAAK,SAACd,EAAGE,GCmelB,MDnewBrI,GAAYV,EAAE6I,GAAGqD,OAAQlM,EAAE+I,GAAGmD,UAC7CsF,SAASyC,IAElB/D,EAAWiD,IAAI,UAAW,GACQ,MAAAtR,EAAAuP,UCoepC,MDpeEvP,GAAKuP,UAAUsC,KAzFF3U,MA2FjBsR,EAAU,SAAA3H,GCueZ,MDveY,YCyeV,MDxeIwH,GAAWiD,IAAI,UAAW,IAC1BqB,WAAWlE,EAAgB,MAFrBvR,MAKVsR,IAEAtR,KAACsT,KAAK,qBAAqBoC,UACnBC,OAAQ,SAACjG,EAAGkG,GAAO,GAAiB,MAAAA,EAAAC,OCwe1C,MDxeyBvE,MACnBwE,YAAa9V,KAACsT,KAAK,qBACnByC,MAAO,KACPvC,YAAa,mBAvRzB,MAAA7D,GAwRMD,EAAAC,EACwB,mBAAAK,UAAA,OAAAA,SAA1BA,QAAQL,MAAMD,EAAEO,OAChBjQ,KAACkQ,KAAKpN,EAAKmF,cAAcG,eAC7B,MAAOpI,OAMXiB,EAAEb,GAAGyH,QAAU,SAACmO,EAAmBlT,GAC/B,GAAAmT,GAAAC,EAAApW,EAAA2M,EAAA1M,EAAA+N,EAAAqI,EAAAC,EAAA7R,EAAAwJ,EAAAC,CAwBA,QCwdW,MAATgI,IDjfUA,EAAQ,WACpBI,EAAUpW,KAAC4D,KAAK,WAChBuS,EAAUnW,KAAC4D,KAAK,WAIhBqS,EAAA,MAAAnT,GAAA,OAAAyB,EAAAzB,EAAA+E,SAAAtD,EAAqC0R,oBAAA,OCifZ,MAAvBA,IDhfFA,EAAuB,SAACI,GACpB,GAAAnR,GAAAH,CAEA,OAFAA,GAAME,KAAKF,IAALzE,MAAA2E,KAASoR,GACfnR,EAAMD,KAAKC,IAAL5E,MAAA2E,KAASoR,GACR,SAAC7T,GACJ,GAAA8T,EACA,OADAA,GAAS,IAAMrR,KAAKsR,MAAM,KAAK/T,EAAEuC,IAAMG,EAAIH,IACpC,WAAWuR,EAAO,IAAGA,EAAO,OAE3CJ,EAAa,SAAAvM,GCsfb,MDtfa,UAACqM,GACV,GAAAQ,GAAAC,EAAAJ,CCqgBF,ODrgBEI,GAAc,SAACnK,GCwff,MDvfI3C,GAAC2J,KAAK0C,GAAO9I,KAAK,WACd,GAAA1K,EACA,IADAA,EAAIvB,EAAEjB,MAAM4D,KAAK,SACA,MAAApB,GAAOgB,SAAShB,GCyfrC,MDzfI8J,GAAE9J,EAAGvB,EAAEjB,UAEfqW,KACAI,EAAY,SAACjU,GC4fb,MD5fmB6T,GAAOtS,KAAKvB,KAC/BgU,EAAaP,EAAoBI,GACjCI,EAAY,SAACjU,EAAGkU,GC8fhB,MD9fyBA,GAAKtC,IAAI,mBAAoBoC,EAAWhU,QATxDxC,MAWNgW,GAAP,IACS,UAAkBE,EAAW,UAA7B,MADT,KAES,aAAkB,IAAsCpW,EAAAC,EAAA,EAAAgO,EAAAqI,EAAA,GAAArI,EAAAhO,EAAAgO,EAAAhO,EAAAgO,EAAAjO,EAAA,GAAAiO,IAAAhO,IAAAA,EAAtCmW,EAAW,cAAcpW,EAA3C,MAFT,KAGS,aAAkB,IAAsC2M,EAAAqB,EAAA,EAAAE,EAAAmI,EAAA,GAAAnI,EAAAF,EAAAE,EAAAF,EAAAE,EAAAvB,EAAA,GAAAuB,IAAAF,IAAAA,EAAtCoI,EAAW,cAAczJ,GAKpD,MAHAyJ,GAAW,sBACXA,EAAW,sBAEJlW,MAMXiB,EAAEb,GAAGuH,SAAY,WACb,GAAAgP,GAAA7W,EAAAC,EAAAoW,EAAAC,EAAA7R,CAgCA,KAhCA6R,EAAUpW,KAAC4D,KAAK,WAChBuS,EAAUnW,KAAC4D,KAAK,WAEhB+S,EAAa,SAAAhN,GCygBb,MDzgBa,UAACqM,GACV,GAAAS,GAAAvR,EAAAjC,EAAAoT,CC2hBF,OD3hBEI,GAAc,SAACnK,GC2gBf,MD1gBI3C,GAAC2J,KAAK0C,GAAO9I,KAAK,WACd,GAAA1K,EACA,IADAA,EAAIvB,EAAEjB,MAAM4D,KAAK,SACA,MAAApB,GAAOgB,SAAShB,GC4gBrC,MD5gBI8J,GAAE9J,EAAGvB,EAAEjB,UAEfqW,KACAI,EAAY,SAACjU,GC+gBb,MD/gBmB6T,GAAOtS,KAAKvB,KAC/B0C,EAAMD,KAAKC,IAAL5E,MAAA2E,KAASoR,GACfpT,EAAS,SAACT,GCihBV,MDjhBgB,KAAIA,GAAG,IAAI0C,IAC3BuR,EAAY,SAACjU,EAAGkU,GACZ,GAAAvJ,GAAAyJ,CCqiBJ,ODriBIzJ,GAAOuJ,EAAKvJ,OACZyJ,EAAU3V,EAAE,SAASmT,KACjBH,SAAY,WACZ4C,OAAU,SACdD,EAAQtG,OAAOrP,EAAE,SAASmT,KACtBH,SAAY,WACZ6C,OAAU,EACV5C,KAAQ,EACR6C,MAAS,EACTF,OAAU5T,EAAOT,GAAK,IACtBwU,mBAAoB,UACxBJ,EAAQtG,OAAOrP,EAAE,SAASkM,KAAKA,GAAMiH,KACjCH,SAAW,WACXgD,eAAe,MACfC,gBAAgB,SAEpBR,EAAKtC,KAAI+C,QAAW,EAAEC,cAAe,MAAOC,aAAc,WAAUnH,KAAK0G,OA3BpE5W,MA6ByBF,EAAAC,EAAA,EAAAwE,EAAA6R,EAAA,GAAA7R,EAAAxE,EAAAwE,EAAAxE,EAAAwE,EAAAzE,EAAA,GAAAyE,IAAAxE,IAAAA,EAAtC4W,EAAW,cAAc7W,EAGzB,OAFA6W,GAAW,sBAEJ3W,UCgiBZwE,KAAKxE","file":"pivot.min.js","sourcesContent":["callWithJQuery = (pivotModule) ->\r\n    if typeof exports is \"object\" and typeof module is \"object\" # CommonJS\r\n        pivotModule require(\"jquery\")\r\n    else if typeof define is \"function\" and define.amd # AMD\r\n        define [\"jquery\"], pivotModule\r\n    # Plain browser env\r\n    else\r\n        pivotModule jQuery\r\n        \r\ncallWithJQuery ($) ->\r\n\r\n    ###\r\n    Utilities\r\n    ###\r\n\r\n    addSeparators = (nStr, thousandsSep, decimalSep) ->\r\n        nStr += ''\r\n        x = nStr.split('.')\r\n        x1 = x[0]\r\n        x2 = if x.length > 1 then  decimalSep + x[1] else ''\r\n        rgx = /(\\d+)(\\d{3})/\r\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2') while rgx.test(x1)\r\n        return x1 + x2\r\n\r\n    numberFormat = (opts) ->\r\n        defaults = \r\n            digitsAfterDecimal: 2, scaler: 1, \r\n            thousandsSep: \",\", decimalSep: \".\"\r\n            prefix: \"\", suffix: \"\"\r\n            showZero: false\r\n        opts = $.extend defaults, opts\r\n        (x) ->\r\n            return \"\" if isNaN(x) or not isFinite(x)\r\n            return \"\" if x == 0 and not opts.showZero\r\n            result = addSeparators (opts.scaler*x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep\r\n            return \"\"+opts.prefix+result+opts.suffix\r\n\r\n    #aggregator templates default to US number formatting but this is overrideable\r\n    usFmt = numberFormat()\r\n    usFmtInt = numberFormat(digitsAfterDecimal: 0)\r\n    usFmtPct = numberFormat(digitsAfterDecimal:1, scaler: 100, suffix: \"%\")\r\n\r\n    aggregatorTemplates =\r\n        count: (formatter=usFmtInt) -> () -> (data, rowKey, colKey) ->\r\n            count: 0\r\n            push:  -> @count++\r\n            value: -> @count\r\n            format: formatter\r\n\r\n        countUnique: (formatter=usFmtInt) -> ([attr]) -> (data, rowKey, colKey) ->\r\n            uniq: []\r\n            push: (record) -> @uniq.push(record[attr]) if record[attr] not in @uniq\r\n            value: -> @uniq.length\r\n            format: formatter\r\n            numInputs: if attr? then 0 else 1\r\n\r\n        listUnique: (sep) -> ([attr]) -> (data, rowKey, colKey)  ->\r\n            uniq: []\r\n            push: (record) -> @uniq.push(record[attr]) if record[attr] not in @uniq\r\n            value: -> @uniq.join sep\r\n            format: (x) -> x\r\n            numInputs: if attr? then 0 else 1\r\n\r\n        sum: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\r\n            sum: 0\r\n            push: (record) -> @sum += parseFloat(record[attr]) if not isNaN parseFloat(record[attr])\r\n            value: -> @sum\r\n            format: formatter\r\n            numInputs: if attr? then 0 else 1\r\n\r\n        min: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\r\n            val: null\r\n            push: (record) ->\r\n                x = parseFloat(record[attr])\r\n                if not isNaN x then @val = Math.min(x, @val ? x)\r\n            value: -> @val\r\n            format: formatter\r\n            numInputs: if attr? then 0 else 1\r\n\r\n        max: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\r\n            val: null\r\n            push: (record) -> \r\n                x = parseFloat(record[attr])\r\n                if not isNaN x then @val = Math.max(x, @val ? x)\r\n            value: -> @val\r\n            format: formatter\r\n            numInputs: if attr? then 0 else 1\r\n\r\n        average:  (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\r\n            sum: 0\r\n            len: 0\r\n            push: (record) ->\r\n                if not isNaN parseFloat(record[attr])\r\n                    @sum += parseFloat(record[attr])\r\n                    @len++\r\n            value: -> @sum/@len\r\n            format: formatter\r\n            numInputs: if attr? then 0 else 1\r\n\r\n        sumOverSum: (formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\r\n            sumNum: 0\r\n            sumDenom: 0\r\n            push: (record) ->\r\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\r\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\r\n            value: -> @sumNum/@sumDenom\r\n            format: formatter\r\n            numInputs: if num? and denom? then 0 else 2\r\n\r\n        sumOverSumBound80: (upper=true, formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\r\n            sumNum: 0\r\n            sumDenom: 0\r\n            push: (record) ->\r\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\r\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\r\n            value: ->\r\n                sign = if upper then 1 else -1\r\n                (0.821187207574908/@sumDenom + @sumNum/@sumDenom + 1.2815515655446004*sign*\r\n                    Math.sqrt(0.410593603787454/ (@sumDenom*@sumDenom) + (@sumNum*(1 - @sumNum/ @sumDenom))/ (@sumDenom*@sumDenom)))/\r\n                    (1 + 1.642374415149816/@sumDenom)\r\n            format: formatter\r\n            numInputs: if num? and denom? then 0 else 2\r\n\r\n        fractionOf: (wrapped, type=\"total\", formatter=usFmtPct) -> (x...) -> (data, rowKey, colKey) ->\r\n            selector: {total:[[],[]],row:[rowKey,[]],col:[[],colKey]}[type]\r\n            inner: wrapped(x...)(data, rowKey, colKey)\r\n            push: (record) -> @inner.push record\r\n            format: formatter\r\n            value: -> @inner.value() / data.getAggregator(@selector...).inner.value()\r\n            numInputs: wrapped(x...)().numInputs\r\n\r\n    #default aggregators & renderers use US naming and number formatting\r\n    aggregators = do (tpl = aggregatorTemplates) -> \r\n        \"Count\":                tpl.count(usFmtInt)\r\n        \"Count Unique Values\":  tpl.countUnique(usFmtInt)\r\n        \"List Unique Values\":   tpl.listUnique(\", \")\r\n        \"Sum\":                  tpl.sum(usFmt)\r\n        \"Integer Sum\":          tpl.sum(usFmtInt)\r\n        \"Average\":              tpl.average(usFmt)\r\n        \"Minimum\":              tpl.min(usFmt)\r\n        \"Maximum\":              tpl.max(usFmt)\r\n        \"Sum over Sum\":         tpl.sumOverSum(usFmt)\r\n        \"80% Upper Bound\":      tpl.sumOverSumBound80(true, usFmt)\r\n        \"80% Lower Bound\":      tpl.sumOverSumBound80(false, usFmt)\r\n        \"Sum as Fraction of Total\":     tpl.fractionOf(tpl.sum(),   \"total\", usFmtPct)\r\n        \"Sum as Fraction of Rows\":      tpl.fractionOf(tpl.sum(),   \"row\",   usFmtPct)\r\n        \"Sum as Fraction of Columns\":   tpl.fractionOf(tpl.sum(),   \"col\",   usFmtPct)\r\n        \"Count as Fraction of Total\":   tpl.fractionOf(tpl.count(), \"total\", usFmtPct)\r\n        \"Count as Fraction of Rows\":    tpl.fractionOf(tpl.count(), \"row\",   usFmtPct)\r\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\",   usFmtPct)\r\n\r\n    renderers =\r\n        \"Table\":          (data, opts) ->   pivotTableRenderer(data, opts)\r\n        \"Table Barchart\": (data, opts) -> $(pivotTableRenderer(data, opts)).barchart()\r\n        \"Heatmap\":        (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"heatmap\",    opts)\r\n        \"Row Heatmap\":    (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"rowheatmap\", opts)\r\n        \"Col Heatmap\":    (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"colheatmap\", opts)\r\n\r\n    locales = \r\n        en: \r\n            aggregators: aggregators\r\n            renderers: renderers\r\n            localeStrings: \r\n                renderError: \"An error occurred rendering the PivotTable results.\"\r\n                computeError: \"An error occurred computing the PivotTable results.\"\r\n                uiRenderError: \"An error occurred rendering the PivotTable UI.\"\r\n                selectAll: \"Select All\"\r\n                selectNone: \"Select None\"\r\n                tooMany: \"(too many to list)\"\r\n                filterResults: \"Filter results\"\r\n                totals: \"Totals\" #for table renderer\r\n                vs: \"vs\" #for gchart renderer\r\n                by: \"by\" #for gchart renderer\r\n\r\n    #dateFormat deriver l10n requires month and day names to be passed in directly\r\n    mthNamesEn = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]\r\n    dayNamesEn = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"]\r\n    zeroPad = (number) -> (\"0\"+number).substr(-2,2)\r\n\r\n    derivers =\r\n        bin: (col, binWidth) -> (record) -> record[col] - record[col] % binWidth\r\n        dateFormat: (col, formatString, utcOutput=false, mthNames=mthNamesEn, dayNames=dayNamesEn) ->\r\n            utc = if utcOutput then \"UTC\" else \"\"\r\n            (record) -> #thanks http://stackoverflow.com/a/12213072/112871\r\n                date = new Date(Date.parse(record[col]))\r\n                if isNaN(date) then return \"\"\r\n                formatString.replace /%(.)/g, (m, p) ->\r\n                    switch p\r\n                        when \"y\" then date[\"get#{utc}FullYear\"]()\r\n                        when \"m\" then zeroPad(date[\"get#{utc}Month\"]()+1)\r\n                        when \"n\" then mthNames[date[\"get#{utc}Month\"]()]\r\n                        when \"d\" then zeroPad(date[\"get#{utc}Date\"]())\r\n                        when \"w\" then dayNames[date[\"get#{utc}Day\"]()]\r\n                        when \"x\" then date[\"get#{utc}Day\"]()\r\n                        when \"H\" then zeroPad(date[\"get#{utc}Hours\"]())\r\n                        when \"M\" then zeroPad(date[\"get#{utc}Minutes\"]())\r\n                        when \"S\" then zeroPad(date[\"get#{utc}Seconds\"]())\r\n                        else \"%\" + p\r\n\r\n    naturalSort = (as, bs) => #thanks http://stackoverflow.com/a/4373421/112871\r\n        rx = /(\\d+)|(\\D+)/g\r\n        rd = /\\d/\r\n        rz = /^0/\r\n        if typeof as is \"number\" or typeof bs is \"number\"\r\n            return 1  if isNaN(as)\r\n            return -1  if isNaN(bs)\r\n            return as - bs\r\n        a = String(as).toLowerCase()\r\n        b = String(bs).toLowerCase()\r\n        return 0  if a is b\r\n        return (if a > b then 1 else -1)  unless rd.test(a) and rd.test(b)\r\n        a = a.match(rx)\r\n        b = b.match(rx)\r\n        while a.length and b.length\r\n            a1 = a.shift()\r\n            b1 = b.shift()\r\n            if a1 isnt b1\r\n                if rd.test(a1) and rd.test(b1)\r\n                    return a1.replace(rz, \".0\") - b1.replace(rz, \".0\")\r\n                else\r\n                    return (if a1 > b1 then 1 else -1)\r\n        a.length - b.length\r\n\r\n    sortAs = (order) -> \r\n        mapping = {}\r\n        for i, x of order\r\n            mapping[x] = i\r\n        (a, b) ->\r\n            if mapping[a]? and mapping[b]?\r\n                return mapping[a] - mapping[b]\r\n            else if mapping[a]?\r\n                return -1\r\n            else if mapping[b]?\r\n                return 1\r\n            else\r\n                return naturalSort(a,b)\r\n\r\n    getSort = (sorters, attr) ->\r\n        sort = sorters(attr)\r\n        if $.isFunction(sort)\r\n            return sort \r\n        else\r\n            return naturalSort\r\n\r\n    ###\r\n    Data Model class\r\n    ###\r\n\r\n    class PivotData\r\n        constructor: (input, opts) ->\r\n            @aggregator = opts.aggregator\r\n            @aggregatorName = opts.aggregatorName\r\n            @colAttrs = opts.cols\r\n            @rowAttrs = opts.rows\r\n            @valAttrs = opts.vals\r\n            @sorters = opts.sorters\r\n            @tree = {}\r\n            @rowKeys = []\r\n            @colKeys = []\r\n            @rowTotals = {}\r\n            @colTotals = {}\r\n            @allTotal = @aggregator(this, [], [])\r\n            @sorted = false\r\n\r\n            # iterate through input, accumulating data for cells\r\n            PivotData.forEachRecord input, opts.derivedAttributes, (record) =>\r\n                @processRecord(record) if opts.filter(record)\r\n\r\n        #can handle arrays or jQuery selections of tables\r\n        @forEachRecord = (input, derivedAttributes, f) ->\r\n            if $.isEmptyObject derivedAttributes\r\n                addRecord = f\r\n            else\r\n                addRecord = (record) -> \r\n                    record[k] = v(record) ? record[k] for k, v of derivedAttributes\r\n                    f(record)\r\n\r\n            #if it's a function, have it call us back\r\n            if $.isFunction(input)\r\n                input(addRecord)\r\n            else if $.isArray(input)\r\n                if $.isArray(input[0]) #array of arrays\r\n                    for own i, compactRecord of input when i > 0\r\n                        record = {}\r\n                        record[k] = compactRecord[j] for own j, k of input[0]\r\n                        addRecord(record)\r\n                else #array of objects\r\n                    addRecord(record) for record in input\r\n            else if input instanceof jQuery\r\n                tblCols = []\r\n                $(\"thead > tr > th\", input).each (i) -> tblCols.push $(this).text()\r\n                $(\"tbody > tr\", input).each (i) ->\r\n                    record = {}\r\n                    $(\"td\", this).each (j) -> record[tblCols[j]] = $(this).text()\r\n                    addRecord(record)\r\n            else\r\n                throw new Error(\"unknown input format\")\r\n\r\n        #converts to [{attr:val, attr:val},{attr:val, attr:val}] using method above\r\n        @convertToArray = (input) ->\r\n            result = []\r\n            PivotData.forEachRecord input, {}, (record) -> result.push record\r\n            return result\r\n\r\n        arrSort: (attrs) => \r\n            sortersArr = (getSort(@sorters, a) for a in attrs)\r\n            (a,b) -> \r\n                for own i, sorter of sortersArr\r\n                    comparison = sorter(a[i], b[i])\r\n                    return comparison if comparison != 0\r\n                return 0\r\n\r\n        sortKeys: () =>\r\n            if not @sorted\r\n                @sorted = true\r\n                @rowKeys.sort @arrSort(@rowAttrs)\r\n                @colKeys.sort @arrSort(@colAttrs)\r\n\r\n        getColKeys: () =>\r\n            @sortKeys()\r\n            return @colKeys\r\n\r\n        getRowKeys: () =>\r\n            @sortKeys()\r\n            return @rowKeys\r\n\r\n        processRecord: (record) -> #this code is called in a tight loop\r\n            colKey = []\r\n            rowKey = []\r\n            colKey.push record[x] ? \"null\" for x in @colAttrs \r\n            rowKey.push record[x] ? \"null\" for x in @rowAttrs\r\n            flatRowKey = rowKey.join(String.fromCharCode(0))\r\n            flatColKey = colKey.join(String.fromCharCode(0))\r\n\r\n            @allTotal.push record\r\n\r\n            if rowKey.length != 0\r\n                if not @rowTotals[flatRowKey]\r\n                    @rowKeys.push rowKey\r\n                    @rowTotals[flatRowKey] = @aggregator(this, rowKey, [])\r\n                @rowTotals[flatRowKey].push record\r\n\r\n            if colKey.length != 0\r\n                if not @colTotals[flatColKey]\r\n                    @colKeys.push colKey\r\n                    @colTotals[flatColKey] = @aggregator(this, [], colKey)\r\n                @colTotals[flatColKey].push record\r\n\r\n            if colKey.length != 0 and rowKey.length != 0\r\n                if not @tree[flatRowKey]\r\n                    @tree[flatRowKey] = {}\r\n                if not @tree[flatRowKey][flatColKey]\r\n                    @tree[flatRowKey][flatColKey] = @aggregator(this, rowKey, colKey)\r\n                @tree[flatRowKey][flatColKey].push record\r\n\r\n        getAggregator: (rowKey, colKey) =>\r\n            flatRowKey = rowKey.join(String.fromCharCode(0))\r\n            flatColKey = colKey.join(String.fromCharCode(0))\r\n            if rowKey.length == 0 and colKey.length == 0\r\n                agg = @allTotal\r\n            else if rowKey.length == 0\r\n                agg = @colTotals[flatColKey]\r\n            else if colKey.length == 0\r\n                agg = @rowTotals[flatRowKey]\r\n            else\r\n                agg = @tree[flatRowKey][flatColKey]\r\n            return agg ? {value: (-> null), format: -> \"\"}\r\n\r\n    #expose these to the outside world\r\n    $.pivotUtilities = {aggregatorTemplates, aggregators, renderers, derivers, locales,\r\n        naturalSort, numberFormat, sortAs, PivotData}\r\n\r\n    ###\r\n    Default Renderer for hierarchical table layout\r\n    ###\r\n\r\n    pivotTableRenderer = (pivotData, opts) ->\r\n\r\n        defaults =\r\n            localeStrings:\r\n                totals: \"Totals\"\r\n\r\n        opts = $.extend defaults, opts\r\n\r\n        colAttrs = pivotData.colAttrs\r\n        rowAttrs = pivotData.rowAttrs\r\n        rowKeys = pivotData.getRowKeys()\r\n        colKeys = pivotData.getColKeys()\r\n\r\n        #now actually build the output\r\n        result = document.createElement(\"table\")\r\n        result.className = \"pvtTable\"\r\n\r\n        #helper function for setting row/col-span in pivotTableRenderer\r\n        spanSize = (arr, i, j) ->\r\n            if i != 0\r\n                noDraw = true\r\n                for x in [0..j]\r\n                    if arr[i-1][x] != arr[i][x]\r\n                        noDraw = false\r\n                if noDraw\r\n                  return -1 #do not draw cell\r\n            len = 0\r\n            while i+len < arr.length\r\n                stop = false\r\n                for x in [0..j]\r\n                    stop = true if arr[i][x] != arr[i+len][x]\r\n                break if stop\r\n                len++\r\n            return len\r\n\r\n        #the first few rows are for col headers\r\n        for own j, c of colAttrs\r\n            tr = document.createElement(\"tr\")\r\n            if parseInt(j) == 0 and rowAttrs.length != 0\r\n                th = document.createElement(\"th\")\r\n                th.setAttribute(\"colspan\", rowAttrs.length)\r\n                th.setAttribute(\"rowspan\", colAttrs.length)\r\n                tr.appendChild th\r\n            th = document.createElement(\"th\")\r\n            th.className = \"pvtAxisLabel\"\r\n            th.textContent = c\r\n            tr.appendChild th\r\n            for own i, colKey of colKeys\r\n                x = spanSize(colKeys, parseInt(i), parseInt(j))\r\n                if x != -1\r\n                    th = document.createElement(\"th\")\r\n                    th.className = \"pvtColLabel\"\r\n                    th.textContent = colKey[j]\r\n                    th.setAttribute(\"colspan\", x)\r\n                    if parseInt(j) == colAttrs.length-1 and rowAttrs.length != 0\r\n                        th.setAttribute(\"rowspan\", 2)\r\n                    tr.appendChild th\r\n            if parseInt(j) == 0\r\n                th = document.createElement(\"th\")\r\n                th.className = \"pvtTotalLabel\"\r\n                th.innerHTML = opts.localeStrings.totals\r\n                th.setAttribute(\"rowspan\", colAttrs.length + (if rowAttrs.length ==0 then 0 else 1))\r\n                tr.appendChild th\r\n            result.appendChild tr\r\n\r\n        #then a row for row header headers\r\n        if rowAttrs.length !=0\r\n            tr = document.createElement(\"tr\")\r\n            for own i, r of rowAttrs\r\n                th = document.createElement(\"th\")\r\n                th.className = \"pvtAxisLabel\"\r\n                th.textContent = r\r\n                tr.appendChild th \r\n            th = document.createElement(\"th\")\r\n            if colAttrs.length ==0\r\n                th.className = \"pvtTotalLabel\"\r\n                th.innerHTML = opts.localeStrings.totals\r\n            tr.appendChild th\r\n            result.appendChild tr\r\n\r\n        #now the actual data rows, with their row headers and totals\r\n        for own i, rowKey of rowKeys\r\n            tr = document.createElement(\"tr\")\r\n            for own j, txt of rowKey\r\n                x = spanSize(rowKeys, parseInt(i), parseInt(j))\r\n                if x != -1\r\n                    th = document.createElement(\"th\")\r\n                    th.className = \"pvtRowLabel\"\r\n                    th.textContent = txt\r\n                    th.setAttribute(\"rowspan\", x)\r\n                    if parseInt(j) == rowAttrs.length-1 and colAttrs.length !=0\r\n                        th.setAttribute(\"colspan\",2)\r\n                    tr.appendChild th\r\n            for own j, colKey of colKeys #this is the tight loop\r\n                aggregator = pivotData.getAggregator(rowKey, colKey)\r\n                val = aggregator.value()\r\n                td = document.createElement(\"td\")\r\n                td.className = \"pvtVal row#{i} col#{j}\"\r\n                td.textContent = aggregator.format(val)\r\n                td.setAttribute(\"data-value\", val)\r\n                tr.appendChild td\r\n\r\n            totalAggregator = pivotData.getAggregator(rowKey, [])\r\n            val = totalAggregator.value()\r\n            td = document.createElement(\"td\")\r\n            td.className = \"pvtTotal rowTotal\"\r\n            td.textContent = totalAggregator.format(val)\r\n            td.setAttribute(\"data-value\", val)\r\n            td.setAttribute(\"data-for\", \"row\"+i)\r\n            tr.appendChild td\r\n            result.appendChild tr\r\n\r\n        #finally, the row for col totals, and a grand total\r\n        tr = document.createElement(\"tr\")\r\n        th = document.createElement(\"th\")\r\n        th.className = \"pvtTotalLabel\"\r\n        th.innerHTML = opts.localeStrings.totals\r\n        th.setAttribute(\"colspan\", rowAttrs.length + (if colAttrs.length == 0 then 0 else 1))\r\n        tr.appendChild th\r\n        for own j, colKey of colKeys\r\n            totalAggregator = pivotData.getAggregator([], colKey)\r\n            val = totalAggregator.value()\r\n            td = document.createElement(\"td\")\r\n            td.className = \"pvtTotal colTotal\"\r\n            td.textContent = totalAggregator.format(val)\r\n            td.setAttribute(\"data-value\", val)\r\n            td.setAttribute(\"data-for\", \"col\"+j)\r\n            tr.appendChild td\r\n        totalAggregator = pivotData.getAggregator([], [])\r\n        val = totalAggregator.value()\r\n        td = document.createElement(\"td\")\r\n        td.className = \"pvtGrandTotal\"\r\n        td.textContent = totalAggregator.format(val)\r\n        td.setAttribute(\"data-value\", val)\r\n        tr.appendChild td\r\n        result.appendChild tr\r\n\r\n        #squirrel this away for later\r\n        result.setAttribute(\"data-numrows\", rowKeys.length)\r\n        result.setAttribute(\"data-numcols\", colKeys.length)\r\n\r\n        return result\r\n\r\n    ###\r\n    Pivot Table core: create PivotData object and call Renderer on it\r\n    ###\r\n\r\n    $.fn.pivot = (input, opts) ->\r\n        defaults =\r\n            cols : []\r\n            rows: []\r\n            vals: []\r\n            filter: -> true\r\n            dataClass: PivotData\r\n            aggregator: aggregatorTemplates.count()()\r\n            aggregatorName: \"Count\"\r\n            sorters: -> \r\n            derivedAttributes: {},\r\n            renderer: pivotTableRenderer\r\n            rendererOptions: null\r\n            localeStrings: locales.en.localeStrings\r\n\r\n        opts = $.extend defaults, opts\r\n\r\n        result = null\r\n        try\r\n            pivotData = new opts.dataClass(input, opts)\r\n            try\r\n                result = opts.renderer(pivotData, opts.rendererOptions)\r\n            catch e\r\n                console.error(e.stack) if console?\r\n                result = $(\"<span>\").html opts.localeStrings.renderError\r\n        catch e\r\n            console.error(e.stack) if console?\r\n            result = $(\"<span>\").html opts.localeStrings.computeError\r\n        \r\n        x = this[0]\r\n        x.removeChild(x.lastChild) while x.hasChildNodes()\r\n        return @append result\r\n\r\n\r\n    ###\r\n    Pivot Table UI: calls Pivot Table core above with options set by user\r\n    ###\r\n\r\n    $.fn.pivotUI = (input, inputOpts, overwrite = false, locale=\"en\") ->\r\n        if not locales[locale]?\r\n            locale = \"en\"\r\n        defaults =\r\n            derivedAttributes: {}\r\n            aggregators: locales[locale].aggregators\r\n            renderers: locales[locale].renderers\r\n            hiddenAttributes: []\r\n            menuLimit: 200\r\n            dataClass: PivotData\r\n            cols: [], rows: [], vals: []\r\n            exclusions: {}\r\n            inclusions: {}\r\n            unusedAttrsVertical: 85\r\n            autoSortUnusedAttrs: false\r\n            rendererOptions: localeStrings: locales[locale].localeStrings\r\n            onRefresh: null\r\n            filter: -> true\r\n            sorters: -> \r\n            localeStrings: locales[locale].localeStrings\r\n\r\n        existingOpts = @data \"pivotUIOptions\"\r\n        if not existingOpts? or overwrite\r\n            opts = $.extend defaults, inputOpts\r\n        else\r\n            opts = existingOpts\r\n\r\n        try\r\n            #cache the input in some useful form\r\n            input = PivotData.convertToArray(input)\r\n            tblCols = (k for own k of input[0])\r\n            tblCols.push c for own c of opts.derivedAttributes when (c not in tblCols)\r\n\r\n            #figure out the cardinality and some stats\r\n            axisValues = {}\r\n            axisValues[x] = {} for x in tblCols\r\n\r\n            PivotData.forEachRecord input, opts.derivedAttributes, (record) ->\r\n                for own k, v of record when opts.filter(record)\r\n                    v ?= \"null\"\r\n                    axisValues[k][v] ?= 0\r\n                    axisValues[k][v]++\r\n\r\n            #start building the output\r\n            uiTable = $(\"<table>\", \"class\": \"pvtUi\").attr(\"cellpadding\", 5)\r\n\r\n            #renderer control\r\n            rendererControl = $(\"<td>\")\r\n\r\n            renderer = $(\"<select>\")\r\n                .addClass('pvtRenderer')\r\n                .appendTo(rendererControl)\r\n                .bind \"change\", -> refresh() #capture reference\r\n            for own x of opts.renderers\r\n                $(\"<option>\").val(x).html(x).appendTo(renderer)\r\n\r\n\r\n            #axis list, including the double-click menu\r\n            colList = $(\"<td>\").addClass('pvtAxisContainer pvtUnused')\r\n            shownAttributes = (c for c in tblCols when c not in opts.hiddenAttributes)\r\n\r\n            unusedAttrsVerticalAutoOverride = false\r\n            if opts.unusedAttrsVertical == \"auto\"\r\n                unusedAttrsVerticalAutoCutoff = 120 # legacy support\r\n            else\r\n                unusedAttrsVerticalAutoCutoff = parseInt opts.unusedAttrsVertical\r\n\r\n            if not isNaN(unusedAttrsVerticalAutoCutoff)\r\n                attrLength = 0\r\n                attrLength += a.length for a in shownAttributes\r\n                unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff\r\n\r\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\r\n                colList.addClass('pvtVertList')\r\n            else\r\n                colList.addClass('pvtHorizList')\r\n\r\n            for own i, c of shownAttributes\r\n                do (c) ->\r\n                    keys = (k for k of axisValues[c])\r\n                    hasExcludedItem = false\r\n                    valueList = $(\"<div>\").addClass('pvtFilterBox').hide()\r\n\r\n                    valueList.append $(\"<h4>\").text(\"#{c} (#{keys.length})\")\r\n                    if keys.length > opts.menuLimit\r\n                        valueList.append $(\"<p>\").html(opts.localeStrings.tooMany)\r\n                    else\r\n                        btns = $(\"<p>\").appendTo(valueList)\r\n                        btns.append $(\"<button>\", {type:\"button\"}).html(opts.localeStrings.selectAll).bind \"click\", ->\r\n                            valueList.find(\"input:visible\").prop \"checked\", true\r\n                        btns.append $(\"<button>\", {type:\"button\"}).html(opts.localeStrings.selectNone).bind \"click\", ->\r\n                            valueList.find(\"input:visible\").prop \"checked\", false\r\n                        btns.append $(\"<br>\")\r\n                        btns.append $(\"<input>\", {type: \"text\", placeholder: opts.localeStrings.filterResults, class: \"pvtSearch\"}).bind \"keyup\", ->\r\n                            filter = $(this).val().toLowerCase()\r\n                            valueList.find('.pvtCheckContainer p').each ->\r\n                                testString = $(this).text().toLowerCase().indexOf(filter)\r\n                                if testString isnt -1\r\n                                    $(this).show()\r\n                                else\r\n                                    $(this).hide()\r\n\r\n                        checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList)\r\n\r\n                        for k in keys.sort(getSort(opts.sorters, c))\r\n                             v = axisValues[c][k]\r\n                             filterItem = $(\"<label>\")\r\n                             filterItemExcluded = false\r\n                             if opts.inclusions[c]\r\n                                filterItemExcluded = (k not in opts.inclusions[c])\r\n                             else if opts.exclusions[c]\r\n                                filterItemExcluded = (k in opts.exclusions[c])\r\n                             hasExcludedItem ||= filterItemExcluded\r\n                             $(\"<input>\")\r\n                                .attr(\"type\", \"checkbox\").addClass('pvtFilter')\r\n                                .attr(\"checked\", !filterItemExcluded).data(\"filter\", [c,k])\r\n                                .appendTo filterItem\r\n                             filterItem.append $(\"<span>\").text k\r\n                             filterItem.append $(\"<span>\").text \" (\"+v+\")\"\r\n                             checkContainer.append $(\"<p>\").append(filterItem)\r\n\r\n                    updateFilter = ->\r\n                        unselectedCount = valueList.find(\"[type='checkbox']\").length -\r\n                                          valueList.find(\"[type='checkbox']:checked\").length\r\n                        if unselectedCount > 0\r\n                            attrElem.addClass \"pvtFilteredAttribute\"\r\n                        else\r\n                            attrElem.removeClass \"pvtFilteredAttribute\"\r\n                        if keys.length > opts.menuLimit\r\n                            valueList.toggle()\r\n                        else\r\n                            valueList.toggle(0, refresh)\r\n\r\n                    $(\"<p>\").appendTo(valueList)\r\n                        .append $(\"<button>\", {type:\"button\"}).text(\"OK\").bind \"click\", updateFilter\r\n\r\n                    showFilterList = (e) ->\r\n                        {left: clickLeft, top: clickTop, } = $(e.currentTarget).position()\r\n                        valueList.css(left: clickLeft+10, top: clickTop+10).toggle()\r\n                        valueList.find('.pvtSearch').val('')\r\n                        valueList.find('.pvtCheckContainer p').show()\r\n\r\n                    triangleLink = $(\"<span>\").addClass('pvtTriangle').html(\" ▾\")\r\n                        .bind \"click\", showFilterList\r\n\r\n                    attrElem = $(\"<li>\").addClass(\"axis_#{i}\")\r\n                        .append $(\"<span>\").addClass('pvtAttr').text(c).data(\"attrName\", c).append(triangleLink)\r\n                    attrElem.addClass('pvtFilteredAttribute') if hasExcludedItem\r\n                    colList.append(attrElem).append(valueList)\r\n\r\n                    attrElem.bind \"dblclick\", showFilterList\r\n\r\n            tr1 = $(\"<tr>\").appendTo(uiTable)\r\n\r\n            #aggregator menu and value area\r\n\r\n            aggregator = $(\"<select>\").addClass('pvtAggregator')\r\n                .bind \"change\", -> refresh() #capture reference\r\n            for own x of opts.aggregators\r\n                aggregator.append $(\"<option>\").val(x).html(x)\r\n\r\n            $(\"<td>\").addClass('pvtVals')\r\n              .appendTo(tr1)\r\n              .append(aggregator)\r\n              .append($(\"<br>\"))\r\n\r\n            #column axes\r\n            $(\"<td>\").addClass('pvtAxisContainer pvtHorizList pvtCols').appendTo(tr1)\r\n\r\n            tr2 = $(\"<tr>\").appendTo(uiTable)\r\n\r\n            #row axes\r\n            tr2.append $(\"<td>\").addClass('pvtAxisContainer pvtRows').attr(\"valign\", \"top\")\r\n\r\n            #the actual pivot table container\r\n            pivotTable = $(\"<td>\")\r\n                .attr(\"valign\", \"top\")\r\n                .addClass('pvtRendererArea')\r\n                .appendTo(tr2)\r\n\r\n            #finally the renderer dropdown and unused attribs are inserted at the requested location\r\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\r\n                uiTable.find('tr:nth-child(1)').prepend rendererControl\r\n                uiTable.find('tr:nth-child(2)').prepend colList\r\n            else\r\n                uiTable.prepend $(\"<tr>\").append(rendererControl).append(colList)\r\n\r\n            #render the UI in its default state\r\n            @html uiTable\r\n\r\n            #set up the UI initial state as requested by moving elements around\r\n\r\n            for x in opts.cols\r\n                @find(\".pvtCols\").append @find(\".axis_#{$.inArray(x, shownAttributes)}\")\r\n            for x in opts.rows\r\n                @find(\".pvtRows\").append @find(\".axis_#{$.inArray(x, shownAttributes)}\")\r\n            if opts.aggregatorName?\r\n                @find(\".pvtAggregator\").val opts.aggregatorName\r\n            if opts.rendererName?\r\n                @find(\".pvtRenderer\").val opts.rendererName\r\n\r\n            initialRender = true\r\n\r\n            #set up for refreshing\r\n            refreshDelayed = =>\r\n                subopts =\r\n                    derivedAttributes: opts.derivedAttributes\r\n                    localeStrings: opts.localeStrings\r\n                    rendererOptions: opts.rendererOptions\r\n                    sorters: opts.sorters\r\n                    dataClass: opts.dataClass\r\n                    cols: [], rows: []\r\n\r\n                numInputsToProcess = opts.aggregators[aggregator.val()]([])().numInputs ? 0\r\n                vals = []\r\n                @find(\".pvtRows li span.pvtAttr\").each -> subopts.rows.push $(this).data(\"attrName\")\r\n                @find(\".pvtCols li span.pvtAttr\").each -> subopts.cols.push $(this).data(\"attrName\")\r\n                @find(\".pvtVals select.pvtAttrDropdown\").each ->\r\n                    if numInputsToProcess == 0\r\n                        $(this).remove()\r\n                    else\r\n                        numInputsToProcess--\r\n                        vals.push $(this).val() if $(this).val() != \"\"\r\n\r\n                if numInputsToProcess != 0\r\n                    pvtVals = @find(\".pvtVals\")\r\n                    for x in [0...numInputsToProcess]\r\n                        newDropdown = $(\"<select>\")\r\n                            .addClass('pvtAttrDropdown')\r\n                            .append($(\"<option>\"))\r\n                            .bind \"change\", -> refresh()\r\n                        for attr in shownAttributes\r\n                            newDropdown.append($(\"<option>\").val(attr).text(attr))\r\n                        pvtVals.append(newDropdown)\r\n\r\n                if initialRender\r\n                    vals = opts.vals\r\n                    i = 0\r\n                    @find(\".pvtVals select.pvtAttrDropdown\").each ->\r\n                        $(this).val vals[i]\r\n                        i++\r\n                    initialRender = false\r\n\r\n                subopts.aggregatorName = aggregator.val()\r\n                subopts.vals = vals\r\n                subopts.aggregator = opts.aggregators[aggregator.val()](vals)\r\n                subopts.renderer = opts.renderers[renderer.val()]\r\n\r\n                #construct filter here\r\n                exclusions = {}\r\n                @find('input.pvtFilter').not(':checked').each ->\r\n                    filter = $(this).data(\"filter\")\r\n                    if exclusions[filter[0]]?\r\n                        exclusions[filter[0]].push( filter[1] )\r\n                    else\r\n                        exclusions[filter[0]] = [ filter[1] ]\r\n                #include inclusions when exclusions present\r\n                inclusions = {}\r\n                @find('input.pvtFilter:checked').each ->\r\n                    filter = $(this).data(\"filter\")\r\n                    if exclusions[filter[0]]?\r\n                        if inclusions[filter[0]]?\r\n                            inclusions[filter[0]].push( filter[1] )\r\n                        else\r\n                            inclusions[filter[0]] = [ filter[1] ]\r\n\r\n                subopts.filter = (record) ->\r\n                    return false if not opts.filter(record)\r\n                    for k,excludedItems of exclusions\r\n                        return false if \"\"+record[k] in excludedItems\r\n                    return true\r\n\r\n                pivotTable.pivot(input,subopts)\r\n                pivotUIOptions = $.extend opts,\r\n                    cols: subopts.cols\r\n                    rows: subopts.rows\r\n                    vals: vals\r\n                    exclusions: exclusions\r\n                    inclusions: inclusions\r\n                    inclusionsInfo: inclusions #duplicated for backwards-compatibility\r\n                    aggregatorName: aggregator.val()\r\n                    rendererName: renderer.val()\r\n\r\n                @data \"pivotUIOptions\", pivotUIOptions\r\n\r\n                # if requested make sure unused columns are in alphabetical order\r\n                if opts.autoSortUnusedAttrs\r\n                    unusedAttrsContainer = @find(\"td.pvtUnused.pvtAxisContainer\")\r\n                    $(unusedAttrsContainer).children(\"li\")\r\n                        .sort((a, b) => naturalSort($(a).text(), $(b).text()))\r\n                        .appendTo unusedAttrsContainer\r\n\r\n                pivotTable.css(\"opacity\", 1)\r\n                opts.onRefresh(pivotUIOptions) if opts.onRefresh?\r\n\r\n            refresh = =>\r\n                pivotTable.css(\"opacity\", 0.5)\r\n                setTimeout refreshDelayed, 10\r\n\r\n            #the very first refresh will actually display the table\r\n            refresh()\r\n\r\n            @find(\".pvtAxisContainer\").sortable\r\n                    update: (e, ui) -> refresh() if not ui.sender?\r\n                    connectWith: @find(\".pvtAxisContainer\")\r\n                    items: 'li'\r\n                    placeholder: 'pvtPlaceholder'\r\n        catch e\r\n            console.error(e.stack) if console?\r\n            @html opts.localeStrings.uiRenderError\r\n        return this\r\n\r\n    ###\r\n    Heatmap post-processing\r\n    ###\r\n\r\n    $.fn.heatmap = (scope = \"heatmap\", opts) ->\r\n        numRows = @data \"numrows\"\r\n        numCols = @data \"numcols\"\r\n\r\n        # given a series of values\r\n        # must return a function to map a given value to a CSS color\r\n        colorScaleGenerator = opts?.heatmap?.colorScaleGenerator\r\n        colorScaleGenerator ?= (values) ->\r\n            min = Math.min(values...)\r\n            max = Math.max(values...)\r\n            return (x) ->\r\n                nonRed = 255 - Math.round 255*(x-min)/(max-min)\r\n                return \"rgb(255,#{nonRed},#{nonRed})\"\r\n\r\n        heatmapper = (scope) =>\r\n            forEachCell = (f) =>\r\n                @find(scope).each ->\r\n                    x = $(this).data(\"value\")\r\n                    f(x, $(this)) if x? and isFinite(x)\r\n\r\n            values = []\r\n            forEachCell (x) -> values.push x\r\n            colorScale = colorScaleGenerator(values)\r\n            forEachCell (x, elem) -> elem.css \"background-color\", colorScale(x)\r\n\r\n        switch scope\r\n            when \"heatmap\"    then heatmapper \".pvtVal\"\r\n            when \"rowheatmap\" then heatmapper \".pvtVal.row#{i}\" for i in [0...numRows]\r\n            when \"colheatmap\" then heatmapper \".pvtVal.col#{j}\" for j in [0...numCols]\r\n\r\n        heatmapper \".pvtTotal.rowTotal\"\r\n        heatmapper \".pvtTotal.colTotal\"\r\n\r\n        return this\r\n\r\n    ###\r\n    Barchart post-processing\r\n    ###\r\n\r\n    $.fn.barchart =  ->\r\n        numRows = @data \"numrows\"\r\n        numCols = @data \"numcols\"\r\n\r\n        barcharter = (scope) =>\r\n            forEachCell = (f) =>\r\n                @find(scope).each ->\r\n                    x = $(this).data(\"value\")\r\n                    f(x, $(this)) if x? and isFinite(x)\r\n\r\n            values = []\r\n            forEachCell (x) -> values.push x\r\n            max = Math.max(values...)\r\n            scaler = (x) -> 100*x/(1.4*max)\r\n            forEachCell (x, elem) ->\r\n                text = elem.text()\r\n                wrapper = $(\"<div>\").css\r\n                    \"position\": \"relative\"\r\n                    \"height\": \"55px\"\r\n                wrapper.append $(\"<div>\").css\r\n                    \"position\": \"absolute\"\r\n                    \"bottom\": 0\r\n                    \"left\": 0\r\n                    \"right\": 0\r\n                    \"height\": scaler(x) + \"%\"\r\n                    \"background-color\": \"gray\"\r\n                wrapper.append $(\"<div>\").text(text).css\r\n                    \"position\":\"relative\"\r\n                    \"padding-left\":\"5px\"\r\n                    \"padding-right\":\"5px\"\r\n\r\n                elem.css(\"padding\": 0,\"padding-top\": \"5px\", \"text-align\": \"center\").html wrapper\r\n\r\n        barcharter \".pvtVal.row#{i}\" for i in [0...numRows]\r\n        barcharter \".pvtTotal.colTotal\"\r\n\r\n        return this\r\n\r\n\r\n","(function() {\n  var callWithJQuery,\n    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },\n    slice = [].slice,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    hasProp = {}.hasOwnProperty;\n\n  callWithJQuery = function(pivotModule) {\n    if (typeof exports === \"object\" && typeof module === \"object\") {\n      return pivotModule(require(\"jquery\"));\n    } else if (typeof define === \"function\" && define.amd) {\n      return define([\"jquery\"], pivotModule);\n    } else {\n      return pivotModule(jQuery);\n    }\n  };\n\n  callWithJQuery(function($) {\n\n    /*\n    Utilities\n     */\n    var PivotData, addSeparators, aggregatorTemplates, aggregators, dayNamesEn, derivers, getSort, locales, mthNamesEn, naturalSort, numberFormat, pivotTableRenderer, renderers, sortAs, usFmt, usFmtInt, usFmtPct, zeroPad;\n    addSeparators = function(nStr, thousandsSep, decimalSep) {\n      var rgx, x, x1, x2;\n      nStr += '';\n      x = nStr.split('.');\n      x1 = x[0];\n      x2 = x.length > 1 ? decimalSep + x[1] : '';\n      rgx = /(\\d+)(\\d{3})/;\n      while (rgx.test(x1)) {\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2');\n      }\n      return x1 + x2;\n    };\n    numberFormat = function(opts) {\n      var defaults;\n      defaults = {\n        digitsAfterDecimal: 2,\n        scaler: 1,\n        thousandsSep: \",\",\n        decimalSep: \".\",\n        prefix: \"\",\n        suffix: \"\",\n        showZero: false\n      };\n      opts = $.extend(defaults, opts);\n      return function(x) {\n        var result;\n        if (isNaN(x) || !isFinite(x)) {\n          return \"\";\n        }\n        if (x === 0 && !opts.showZero) {\n          return \"\";\n        }\n        result = addSeparators((opts.scaler * x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep);\n        return \"\" + opts.prefix + result + opts.suffix;\n      };\n    };\n    usFmt = numberFormat();\n    usFmtInt = numberFormat({\n      digitsAfterDecimal: 0\n    });\n    usFmtPct = numberFormat({\n      digitsAfterDecimal: 1,\n      scaler: 100,\n      suffix: \"%\"\n    });\n    aggregatorTemplates = {\n      count: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function() {\n          return function(data, rowKey, colKey) {\n            return {\n              count: 0,\n              push: function() {\n                return this.count++;\n              },\n              value: function() {\n                return this.count;\n              },\n              format: formatter\n            };\n          };\n        };\n      },\n      countUnique: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              uniq: [],\n              push: function(record) {\n                var ref;\n                if (ref = record[attr], indexOf.call(this.uniq, ref) < 0) {\n                  return this.uniq.push(record[attr]);\n                }\n              },\n              value: function() {\n                return this.uniq.length;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      listUnique: function(sep) {\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              uniq: [],\n              push: function(record) {\n                var ref;\n                if (ref = record[attr], indexOf.call(this.uniq, ref) < 0) {\n                  return this.uniq.push(record[attr]);\n                }\n              },\n              value: function() {\n                return this.uniq.join(sep);\n              },\n              format: function(x) {\n                return x;\n              },\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              sum: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[attr]))) {\n                  return this.sum += parseFloat(record[attr]);\n                }\n              },\n              value: function() {\n                return this.sum;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      min: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              val: null,\n              push: function(record) {\n                var ref, x;\n                x = parseFloat(record[attr]);\n                if (!isNaN(x)) {\n                  return this.val = Math.min(x, (ref = this.val) != null ? ref : x);\n                }\n              },\n              value: function() {\n                return this.val;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      max: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              val: null,\n              push: function(record) {\n                var ref, x;\n                x = parseFloat(record[attr]);\n                if (!isNaN(x)) {\n                  return this.val = Math.max(x, (ref = this.val) != null ? ref : x);\n                }\n              },\n              value: function() {\n                return this.val;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      average: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              sum: 0,\n              len: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[attr]))) {\n                  this.sum += parseFloat(record[attr]);\n                  return this.len++;\n                }\n              },\n              value: function() {\n                return this.sum / this.len;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sumOverSum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var denom, num;\n          num = arg[0], denom = arg[1];\n          return function(data, rowKey, colKey) {\n            return {\n              sumNum: 0,\n              sumDenom: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[num]))) {\n                  this.sumNum += parseFloat(record[num]);\n                }\n                if (!isNaN(parseFloat(record[denom]))) {\n                  return this.sumDenom += parseFloat(record[denom]);\n                }\n              },\n              value: function() {\n                return this.sumNum / this.sumDenom;\n              },\n              format: formatter,\n              numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n          };\n        };\n      },\n      sumOverSumBound80: function(upper, formatter) {\n        if (upper == null) {\n          upper = true;\n        }\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var denom, num;\n          num = arg[0], denom = arg[1];\n          return function(data, rowKey, colKey) {\n            return {\n              sumNum: 0,\n              sumDenom: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[num]))) {\n                  this.sumNum += parseFloat(record[num]);\n                }\n                if (!isNaN(parseFloat(record[denom]))) {\n                  return this.sumDenom += parseFloat(record[denom]);\n                }\n              },\n              value: function() {\n                var sign;\n                sign = upper ? 1 : -1;\n                return (0.821187207574908 / this.sumDenom + this.sumNum / this.sumDenom + 1.2815515655446004 * sign * Math.sqrt(0.410593603787454 / (this.sumDenom * this.sumDenom) + (this.sumNum * (1 - this.sumNum / this.sumDenom)) / (this.sumDenom * this.sumDenom))) / (1 + 1.642374415149816 / this.sumDenom);\n              },\n              format: formatter,\n              numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n          };\n        };\n      },\n      fractionOf: function(wrapped, type, formatter) {\n        if (type == null) {\n          type = \"total\";\n        }\n        if (formatter == null) {\n          formatter = usFmtPct;\n        }\n        return function() {\n          var x;\n          x = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          return function(data, rowKey, colKey) {\n            return {\n              selector: {\n                total: [[], []],\n                row: [rowKey, []],\n                col: [[], colKey]\n              }[type],\n              inner: wrapped.apply(null, x)(data, rowKey, colKey),\n              push: function(record) {\n                return this.inner.push(record);\n              },\n              format: formatter,\n              value: function() {\n                return this.inner.value() / data.getAggregator.apply(data, this.selector).inner.value();\n              },\n              numInputs: wrapped.apply(null, x)().numInputs\n            };\n          };\n        };\n      }\n    };\n    aggregators = (function(tpl) {\n      return {\n        \"Count\": tpl.count(usFmtInt),\n        \"Count Unique Values\": tpl.countUnique(usFmtInt),\n        \"List Unique Values\": tpl.listUnique(\", \"),\n        \"Sum\": tpl.sum(usFmt),\n        \"Integer Sum\": tpl.sum(usFmtInt),\n        \"Average\": tpl.average(usFmt),\n        \"Minimum\": tpl.min(usFmt),\n        \"Maximum\": tpl.max(usFmt),\n        \"Sum over Sum\": tpl.sumOverSum(usFmt),\n        \"80% Upper Bound\": tpl.sumOverSumBound80(true, usFmt),\n        \"80% Lower Bound\": tpl.sumOverSumBound80(false, usFmt),\n        \"Sum as Fraction of Total\": tpl.fractionOf(tpl.sum(), \"total\", usFmtPct),\n        \"Sum as Fraction of Rows\": tpl.fractionOf(tpl.sum(), \"row\", usFmtPct),\n        \"Sum as Fraction of Columns\": tpl.fractionOf(tpl.sum(), \"col\", usFmtPct),\n        \"Count as Fraction of Total\": tpl.fractionOf(tpl.count(), \"total\", usFmtPct),\n        \"Count as Fraction of Rows\": tpl.fractionOf(tpl.count(), \"row\", usFmtPct),\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\", usFmtPct)\n      };\n    })(aggregatorTemplates);\n    renderers = {\n      \"Table\": function(data, opts) {\n        return pivotTableRenderer(data, opts);\n      },\n      \"Table Barchart\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).barchart();\n      },\n      \"Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"heatmap\", opts);\n      },\n      \"Row Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"rowheatmap\", opts);\n      },\n      \"Col Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"colheatmap\", opts);\n      }\n    };\n    locales = {\n      en: {\n        aggregators: aggregators,\n        renderers: renderers,\n        localeStrings: {\n          renderError: \"An error occurred rendering the PivotTable results.\",\n          computeError: \"An error occurred computing the PivotTable results.\",\n          uiRenderError: \"An error occurred rendering the PivotTable UI.\",\n          selectAll: \"Select All\",\n          selectNone: \"Select None\",\n          tooMany: \"(too many to list)\",\n          filterResults: \"Filter results\",\n          totals: \"Totals\",\n          vs: \"vs\",\n          by: \"by\"\n        }\n      }\n    };\n    mthNamesEn = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    dayNamesEn = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n    zeroPad = function(number) {\n      return (\"0\" + number).substr(-2, 2);\n    };\n    derivers = {\n      bin: function(col, binWidth) {\n        return function(record) {\n          return record[col] - record[col] % binWidth;\n        };\n      },\n      dateFormat: function(col, formatString, utcOutput, mthNames, dayNames) {\n        var utc;\n        if (utcOutput == null) {\n          utcOutput = false;\n        }\n        if (mthNames == null) {\n          mthNames = mthNamesEn;\n        }\n        if (dayNames == null) {\n          dayNames = dayNamesEn;\n        }\n        utc = utcOutput ? \"UTC\" : \"\";\n        return function(record) {\n          var date;\n          date = new Date(Date.parse(record[col]));\n          if (isNaN(date)) {\n            return \"\";\n          }\n          return formatString.replace(/%(.)/g, function(m, p) {\n            switch (p) {\n              case \"y\":\n                return date[\"get\" + utc + \"FullYear\"]();\n              case \"m\":\n                return zeroPad(date[\"get\" + utc + \"Month\"]() + 1);\n              case \"n\":\n                return mthNames[date[\"get\" + utc + \"Month\"]()];\n              case \"d\":\n                return zeroPad(date[\"get\" + utc + \"Date\"]());\n              case \"w\":\n                return dayNames[date[\"get\" + utc + \"Day\"]()];\n              case \"x\":\n                return date[\"get\" + utc + \"Day\"]();\n              case \"H\":\n                return zeroPad(date[\"get\" + utc + \"Hours\"]());\n              case \"M\":\n                return zeroPad(date[\"get\" + utc + \"Minutes\"]());\n              case \"S\":\n                return zeroPad(date[\"get\" + utc + \"Seconds\"]());\n              default:\n                return \"%\" + p;\n            }\n          });\n        };\n      }\n    };\n    naturalSort = (function(_this) {\n      return function(as, bs) {\n        var a, a1, b, b1, rd, rx, rz;\n        rx = /(\\d+)|(\\D+)/g;\n        rd = /\\d/;\n        rz = /^0/;\n        if (typeof as === \"number\" || typeof bs === \"number\") {\n          if (isNaN(as)) {\n            return 1;\n          }\n          if (isNaN(bs)) {\n            return -1;\n          }\n          return as - bs;\n        }\n        a = String(as).toLowerCase();\n        b = String(bs).toLowerCase();\n        if (a === b) {\n          return 0;\n        }\n        if (!(rd.test(a) && rd.test(b))) {\n          return (a > b ? 1 : -1);\n        }\n        a = a.match(rx);\n        b = b.match(rx);\n        while (a.length && b.length) {\n          a1 = a.shift();\n          b1 = b.shift();\n          if (a1 !== b1) {\n            if (rd.test(a1) && rd.test(b1)) {\n              return a1.replace(rz, \".0\") - b1.replace(rz, \".0\");\n            } else {\n              return (a1 > b1 ? 1 : -1);\n            }\n          }\n        }\n        return a.length - b.length;\n      };\n    })(this);\n    sortAs = function(order) {\n      var i, mapping, x;\n      mapping = {};\n      for (i in order) {\n        x = order[i];\n        mapping[x] = i;\n      }\n      return function(a, b) {\n        if ((mapping[a] != null) && (mapping[b] != null)) {\n          return mapping[a] - mapping[b];\n        } else if (mapping[a] != null) {\n          return -1;\n        } else if (mapping[b] != null) {\n          return 1;\n        } else {\n          return naturalSort(a, b);\n        }\n      };\n    };\n    getSort = function(sorters, attr) {\n      var sort;\n      sort = sorters(attr);\n      if ($.isFunction(sort)) {\n        return sort;\n      } else {\n        return naturalSort;\n      }\n    };\n\n    /*\n    Data Model class\n     */\n    PivotData = (function() {\n      function PivotData(input, opts) {\n        this.getAggregator = bind(this.getAggregator, this);\n        this.getRowKeys = bind(this.getRowKeys, this);\n        this.getColKeys = bind(this.getColKeys, this);\n        this.sortKeys = bind(this.sortKeys, this);\n        this.arrSort = bind(this.arrSort, this);\n        this.aggregator = opts.aggregator;\n        this.aggregatorName = opts.aggregatorName;\n        this.colAttrs = opts.cols;\n        this.rowAttrs = opts.rows;\n        this.valAttrs = opts.vals;\n        this.sorters = opts.sorters;\n        this.tree = {};\n        this.rowKeys = [];\n        this.colKeys = [];\n        this.rowTotals = {};\n        this.colTotals = {};\n        this.allTotal = this.aggregator(this, [], []);\n        this.sorted = false;\n        PivotData.forEachRecord(input, opts.derivedAttributes, (function(_this) {\n          return function(record) {\n            if (opts.filter(record)) {\n              return _this.processRecord(record);\n            }\n          };\n        })(this));\n      }\n\n      PivotData.forEachRecord = function(input, derivedAttributes, f) {\n        var addRecord, compactRecord, i, j, k, l, len1, record, ref, results, results1, tblCols;\n        if ($.isEmptyObject(derivedAttributes)) {\n          addRecord = f;\n        } else {\n          addRecord = function(record) {\n            var k, ref, v;\n            for (k in derivedAttributes) {\n              v = derivedAttributes[k];\n              record[k] = (ref = v(record)) != null ? ref : record[k];\n            }\n            return f(record);\n          };\n        }\n        if ($.isFunction(input)) {\n          return input(addRecord);\n        } else if ($.isArray(input)) {\n          if ($.isArray(input[0])) {\n            results = [];\n            for (i in input) {\n              if (!hasProp.call(input, i)) continue;\n              compactRecord = input[i];\n              if (!(i > 0)) {\n                continue;\n              }\n              record = {};\n              ref = input[0];\n              for (j in ref) {\n                if (!hasProp.call(ref, j)) continue;\n                k = ref[j];\n                record[k] = compactRecord[j];\n              }\n              results.push(addRecord(record));\n            }\n            return results;\n          } else {\n            results1 = [];\n            for (l = 0, len1 = input.length; l < len1; l++) {\n              record = input[l];\n              results1.push(addRecord(record));\n            }\n            return results1;\n          }\n        } else if (input instanceof jQuery) {\n          tblCols = [];\n          $(\"thead > tr > th\", input).each(function(i) {\n            return tblCols.push($(this).text());\n          });\n          return $(\"tbody > tr\", input).each(function(i) {\n            record = {};\n            $(\"td\", this).each(function(j) {\n              return record[tblCols[j]] = $(this).text();\n            });\n            return addRecord(record);\n          });\n        } else {\n          throw new Error(\"unknown input format\");\n        }\n      };\n\n      PivotData.convertToArray = function(input) {\n        var result;\n        result = [];\n        PivotData.forEachRecord(input, {}, function(record) {\n          return result.push(record);\n        });\n        return result;\n      };\n\n      PivotData.prototype.arrSort = function(attrs) {\n        var a, sortersArr;\n        sortersArr = (function() {\n          var l, len1, results;\n          results = [];\n          for (l = 0, len1 = attrs.length; l < len1; l++) {\n            a = attrs[l];\n            results.push(getSort(this.sorters, a));\n          }\n          return results;\n        }).call(this);\n        return function(a, b) {\n          var comparison, i, sorter;\n          for (i in sortersArr) {\n            if (!hasProp.call(sortersArr, i)) continue;\n            sorter = sortersArr[i];\n            comparison = sorter(a[i], b[i]);\n            if (comparison !== 0) {\n              return comparison;\n            }\n          }\n          return 0;\n        };\n      };\n\n      PivotData.prototype.sortKeys = function() {\n        if (!this.sorted) {\n          this.sorted = true;\n          this.rowKeys.sort(this.arrSort(this.rowAttrs));\n          return this.colKeys.sort(this.arrSort(this.colAttrs));\n        }\n      };\n\n      PivotData.prototype.getColKeys = function() {\n        this.sortKeys();\n        return this.colKeys;\n      };\n\n      PivotData.prototype.getRowKeys = function() {\n        this.sortKeys();\n        return this.rowKeys;\n      };\n\n      PivotData.prototype.processRecord = function(record) {\n        var colKey, flatColKey, flatRowKey, l, len1, len2, n, ref, ref1, ref2, ref3, rowKey, x;\n        colKey = [];\n        rowKey = [];\n        ref = this.colAttrs;\n        for (l = 0, len1 = ref.length; l < len1; l++) {\n          x = ref[l];\n          colKey.push((ref1 = record[x]) != null ? ref1 : \"null\");\n        }\n        ref2 = this.rowAttrs;\n        for (n = 0, len2 = ref2.length; n < len2; n++) {\n          x = ref2[n];\n          rowKey.push((ref3 = record[x]) != null ? ref3 : \"null\");\n        }\n        flatRowKey = rowKey.join(String.fromCharCode(0));\n        flatColKey = colKey.join(String.fromCharCode(0));\n        this.allTotal.push(record);\n        if (rowKey.length !== 0) {\n          if (!this.rowTotals[flatRowKey]) {\n            this.rowKeys.push(rowKey);\n            this.rowTotals[flatRowKey] = this.aggregator(this, rowKey, []);\n          }\n          this.rowTotals[flatRowKey].push(record);\n        }\n        if (colKey.length !== 0) {\n          if (!this.colTotals[flatColKey]) {\n            this.colKeys.push(colKey);\n            this.colTotals[flatColKey] = this.aggregator(this, [], colKey);\n          }\n          this.colTotals[flatColKey].push(record);\n        }\n        if (colKey.length !== 0 && rowKey.length !== 0) {\n          if (!this.tree[flatRowKey]) {\n            this.tree[flatRowKey] = {};\n          }\n          if (!this.tree[flatRowKey][flatColKey]) {\n            this.tree[flatRowKey][flatColKey] = this.aggregator(this, rowKey, colKey);\n          }\n          return this.tree[flatRowKey][flatColKey].push(record);\n        }\n      };\n\n      PivotData.prototype.getAggregator = function(rowKey, colKey) {\n        var agg, flatColKey, flatRowKey;\n        flatRowKey = rowKey.join(String.fromCharCode(0));\n        flatColKey = colKey.join(String.fromCharCode(0));\n        if (rowKey.length === 0 && colKey.length === 0) {\n          agg = this.allTotal;\n        } else if (rowKey.length === 0) {\n          agg = this.colTotals[flatColKey];\n        } else if (colKey.length === 0) {\n          agg = this.rowTotals[flatRowKey];\n        } else {\n          agg = this.tree[flatRowKey][flatColKey];\n        }\n        return agg != null ? agg : {\n          value: (function() {\n            return null;\n          }),\n          format: function() {\n            return \"\";\n          }\n        };\n      };\n\n      return PivotData;\n\n    })();\n    $.pivotUtilities = {\n      aggregatorTemplates: aggregatorTemplates,\n      aggregators: aggregators,\n      renderers: renderers,\n      derivers: derivers,\n      locales: locales,\n      naturalSort: naturalSort,\n      numberFormat: numberFormat,\n      sortAs: sortAs,\n      PivotData: PivotData\n    };\n\n    /*\n    Default Renderer for hierarchical table layout\n     */\n    pivotTableRenderer = function(pivotData, opts) {\n      var aggregator, c, colAttrs, colKey, colKeys, defaults, i, j, r, result, rowAttrs, rowKey, rowKeys, spanSize, td, th, totalAggregator, tr, txt, val, x;\n      defaults = {\n        localeStrings: {\n          totals: \"Totals\"\n        }\n      };\n      opts = $.extend(defaults, opts);\n      colAttrs = pivotData.colAttrs;\n      rowAttrs = pivotData.rowAttrs;\n      rowKeys = pivotData.getRowKeys();\n      colKeys = pivotData.getColKeys();\n      result = document.createElement(\"table\");\n      result.className = \"pvtTable\";\n      spanSize = function(arr, i, j) {\n        var l, len, n, noDraw, ref, ref1, stop, x;\n        if (i !== 0) {\n          noDraw = true;\n          for (x = l = 0, ref = j; 0 <= ref ? l <= ref : l >= ref; x = 0 <= ref ? ++l : --l) {\n            if (arr[i - 1][x] !== arr[i][x]) {\n              noDraw = false;\n            }\n          }\n          if (noDraw) {\n            return -1;\n          }\n        }\n        len = 0;\n        while (i + len < arr.length) {\n          stop = false;\n          for (x = n = 0, ref1 = j; 0 <= ref1 ? n <= ref1 : n >= ref1; x = 0 <= ref1 ? ++n : --n) {\n            if (arr[i][x] !== arr[i + len][x]) {\n              stop = true;\n            }\n          }\n          if (stop) {\n            break;\n          }\n          len++;\n        }\n        return len;\n      };\n      for (j in colAttrs) {\n        if (!hasProp.call(colAttrs, j)) continue;\n        c = colAttrs[j];\n        tr = document.createElement(\"tr\");\n        if (parseInt(j) === 0 && rowAttrs.length !== 0) {\n          th = document.createElement(\"th\");\n          th.setAttribute(\"colspan\", rowAttrs.length);\n          th.setAttribute(\"rowspan\", colAttrs.length);\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        th.className = \"pvtAxisLabel\";\n        th.textContent = c;\n        tr.appendChild(th);\n        for (i in colKeys) {\n          if (!hasProp.call(colKeys, i)) continue;\n          colKey = colKeys[i];\n          x = spanSize(colKeys, parseInt(i), parseInt(j));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtColLabel\";\n            th.textContent = colKey[j];\n            th.setAttribute(\"colspan\", x);\n            if (parseInt(j) === colAttrs.length - 1 && rowAttrs.length !== 0) {\n              th.setAttribute(\"rowspan\", 2);\n            }\n            tr.appendChild(th);\n          }\n        }\n        if (parseInt(j) === 0) {\n          th = document.createElement(\"th\");\n          th.className = \"pvtTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n          th.setAttribute(\"rowspan\", colAttrs.length + (rowAttrs.length === 0 ? 0 : 1));\n          tr.appendChild(th);\n        }\n        result.appendChild(tr);\n      }\n      if (rowAttrs.length !== 0) {\n        tr = document.createElement(\"tr\");\n        for (i in rowAttrs) {\n          if (!hasProp.call(rowAttrs, i)) continue;\n          r = rowAttrs[i];\n          th = document.createElement(\"th\");\n          th.className = \"pvtAxisLabel\";\n          th.textContent = r;\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        if (colAttrs.length === 0) {\n          th.className = \"pvtTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n        }\n        tr.appendChild(th);\n        result.appendChild(tr);\n      }\n      for (i in rowKeys) {\n        if (!hasProp.call(rowKeys, i)) continue;\n        rowKey = rowKeys[i];\n        tr = document.createElement(\"tr\");\n        for (j in rowKey) {\n          if (!hasProp.call(rowKey, j)) continue;\n          txt = rowKey[j];\n          x = spanSize(rowKeys, parseInt(i), parseInt(j));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtRowLabel\";\n            th.textContent = txt;\n            th.setAttribute(\"rowspan\", x);\n            if (parseInt(j) === rowAttrs.length - 1 && colAttrs.length !== 0) {\n              th.setAttribute(\"colspan\", 2);\n            }\n            tr.appendChild(th);\n          }\n        }\n        for (j in colKeys) {\n          if (!hasProp.call(colKeys, j)) continue;\n          colKey = colKeys[j];\n          aggregator = pivotData.getAggregator(rowKey, colKey);\n          val = aggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtVal row\" + i + \" col\" + j;\n          td.textContent = aggregator.format(val);\n          td.setAttribute(\"data-value\", val);\n          tr.appendChild(td);\n        }\n        totalAggregator = pivotData.getAggregator(rowKey, []);\n        val = totalAggregator.value();\n        td = document.createElement(\"td\");\n        td.className = \"pvtTotal rowTotal\";\n        td.textContent = totalAggregator.format(val);\n        td.setAttribute(\"data-value\", val);\n        td.setAttribute(\"data-for\", \"row\" + i);\n        tr.appendChild(td);\n        result.appendChild(tr);\n      }\n      tr = document.createElement(\"tr\");\n      th = document.createElement(\"th\");\n      th.className = \"pvtTotalLabel\";\n      th.innerHTML = opts.localeStrings.totals;\n      th.setAttribute(\"colspan\", rowAttrs.length + (colAttrs.length === 0 ? 0 : 1));\n      tr.appendChild(th);\n      for (j in colKeys) {\n        if (!hasProp.call(colKeys, j)) continue;\n        colKey = colKeys[j];\n        totalAggregator = pivotData.getAggregator([], colKey);\n        val = totalAggregator.value();\n        td = document.createElement(\"td\");\n        td.className = \"pvtTotal colTotal\";\n        td.textContent = totalAggregator.format(val);\n        td.setAttribute(\"data-value\", val);\n        td.setAttribute(\"data-for\", \"col\" + j);\n        tr.appendChild(td);\n      }\n      totalAggregator = pivotData.getAggregator([], []);\n      val = totalAggregator.value();\n      td = document.createElement(\"td\");\n      td.className = \"pvtGrandTotal\";\n      td.textContent = totalAggregator.format(val);\n      td.setAttribute(\"data-value\", val);\n      tr.appendChild(td);\n      result.appendChild(tr);\n      result.setAttribute(\"data-numrows\", rowKeys.length);\n      result.setAttribute(\"data-numcols\", colKeys.length);\n      return result;\n    };\n\n    /*\n    Pivot Table core: create PivotData object and call Renderer on it\n     */\n    $.fn.pivot = function(input, opts) {\n      var defaults, e, error, error1, pivotData, result, x;\n      defaults = {\n        cols: [],\n        rows: [],\n        vals: [],\n        filter: function() {\n          return true;\n        },\n        dataClass: PivotData,\n        aggregator: aggregatorTemplates.count()(),\n        aggregatorName: \"Count\",\n        sorters: function() {},\n        derivedAttributes: {},\n        renderer: pivotTableRenderer,\n        rendererOptions: null,\n        localeStrings: locales.en.localeStrings\n      };\n      opts = $.extend(defaults, opts);\n      result = null;\n      try {\n        pivotData = new opts.dataClass(input, opts);\n        try {\n          result = opts.renderer(pivotData, opts.rendererOptions);\n        } catch (error) {\n          e = error;\n          if (typeof console !== \"undefined\" && console !== null) {\n            console.error(e.stack);\n          }\n          result = $(\"<span>\").html(opts.localeStrings.renderError);\n        }\n      } catch (error1) {\n        e = error1;\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        result = $(\"<span>\").html(opts.localeStrings.computeError);\n      }\n      x = this[0];\n      while (x.hasChildNodes()) {\n        x.removeChild(x.lastChild);\n      }\n      return this.append(result);\n    };\n\n    /*\n    Pivot Table UI: calls Pivot Table core above with options set by user\n     */\n    $.fn.pivotUI = function(input, inputOpts, overwrite, locale) {\n      var a, aggregator, attrLength, axisValues, c, colList, defaults, e, error, existingOpts, fn, i, initialRender, k, l, len1, len2, len3, len4, n, o, opts, pivotTable, q, ref, ref1, ref2, ref3, ref4, refresh, refreshDelayed, renderer, rendererControl, shownAttributes, tblCols, tr1, tr2, uiTable, unusedAttrsVerticalAutoCutoff, unusedAttrsVerticalAutoOverride, x;\n      if (overwrite == null) {\n        overwrite = false;\n      }\n      if (locale == null) {\n        locale = \"en\";\n      }\n      if (locales[locale] == null) {\n        locale = \"en\";\n      }\n      defaults = {\n        derivedAttributes: {},\n        aggregators: locales[locale].aggregators,\n        renderers: locales[locale].renderers,\n        hiddenAttributes: [],\n        menuLimit: 200,\n        dataClass: PivotData,\n        cols: [],\n        rows: [],\n        vals: [],\n        exclusions: {},\n        inclusions: {},\n        unusedAttrsVertical: 85,\n        autoSortUnusedAttrs: false,\n        rendererOptions: {\n          localeStrings: locales[locale].localeStrings\n        },\n        onRefresh: null,\n        filter: function() {\n          return true;\n        },\n        sorters: function() {},\n        localeStrings: locales[locale].localeStrings\n      };\n      existingOpts = this.data(\"pivotUIOptions\");\n      if ((existingOpts == null) || overwrite) {\n        opts = $.extend(defaults, inputOpts);\n      } else {\n        opts = existingOpts;\n      }\n      try {\n        input = PivotData.convertToArray(input);\n        tblCols = (function() {\n          var ref, results;\n          ref = input[0];\n          results = [];\n          for (k in ref) {\n            if (!hasProp.call(ref, k)) continue;\n            results.push(k);\n          }\n          return results;\n        })();\n        ref = opts.derivedAttributes;\n        for (c in ref) {\n          if (!hasProp.call(ref, c)) continue;\n          if ((indexOf.call(tblCols, c) < 0)) {\n            tblCols.push(c);\n          }\n        }\n        axisValues = {};\n        for (l = 0, len1 = tblCols.length; l < len1; l++) {\n          x = tblCols[l];\n          axisValues[x] = {};\n        }\n        PivotData.forEachRecord(input, opts.derivedAttributes, function(record) {\n          var base, results, v;\n          results = [];\n          for (k in record) {\n            if (!hasProp.call(record, k)) continue;\n            v = record[k];\n            if (!(opts.filter(record))) {\n              continue;\n            }\n            if (v == null) {\n              v = \"null\";\n            }\n            if ((base = axisValues[k])[v] == null) {\n              base[v] = 0;\n            }\n            results.push(axisValues[k][v]++);\n          }\n          return results;\n        });\n        uiTable = $(\"<table>\", {\n          \"class\": \"pvtUi\"\n        }).attr(\"cellpadding\", 5);\n        rendererControl = $(\"<td>\");\n        renderer = $(\"<select>\").addClass('pvtRenderer').appendTo(rendererControl).bind(\"change\", function() {\n          return refresh();\n        });\n        ref1 = opts.renderers;\n        for (x in ref1) {\n          if (!hasProp.call(ref1, x)) continue;\n          $(\"<option>\").val(x).html(x).appendTo(renderer);\n        }\n        colList = $(\"<td>\").addClass('pvtAxisContainer pvtUnused');\n        shownAttributes = (function() {\n          var len2, n, results;\n          results = [];\n          for (n = 0, len2 = tblCols.length; n < len2; n++) {\n            c = tblCols[n];\n            if (indexOf.call(opts.hiddenAttributes, c) < 0) {\n              results.push(c);\n            }\n          }\n          return results;\n        })();\n        unusedAttrsVerticalAutoOverride = false;\n        if (opts.unusedAttrsVertical === \"auto\") {\n          unusedAttrsVerticalAutoCutoff = 120;\n        } else {\n          unusedAttrsVerticalAutoCutoff = parseInt(opts.unusedAttrsVertical);\n        }\n        if (!isNaN(unusedAttrsVerticalAutoCutoff)) {\n          attrLength = 0;\n          for (n = 0, len2 = shownAttributes.length; n < len2; n++) {\n            a = shownAttributes[n];\n            attrLength += a.length;\n          }\n          unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff;\n        }\n        if (opts.unusedAttrsVertical === true || unusedAttrsVerticalAutoOverride) {\n          colList.addClass('pvtVertList');\n        } else {\n          colList.addClass('pvtHorizList');\n        }\n        fn = function(c) {\n          var attrElem, btns, checkContainer, filterItem, filterItemExcluded, hasExcludedItem, keys, len3, o, ref2, showFilterList, triangleLink, updateFilter, v, valueList;\n          keys = (function() {\n            var results;\n            results = [];\n            for (k in axisValues[c]) {\n              results.push(k);\n            }\n            return results;\n          })();\n          hasExcludedItem = false;\n          valueList = $(\"<div>\").addClass('pvtFilterBox').hide();\n          valueList.append($(\"<h4>\").text(c + \" (\" + keys.length + \")\"));\n          if (keys.length > opts.menuLimit) {\n            valueList.append($(\"<p>\").html(opts.localeStrings.tooMany));\n          } else {\n            btns = $(\"<p>\").appendTo(valueList);\n            btns.append($(\"<button>\", {\n              type: \"button\"\n            }).html(opts.localeStrings.selectAll).bind(\"click\", function() {\n              return valueList.find(\"input:visible\").prop(\"checked\", true);\n            }));\n            btns.append($(\"<button>\", {\n              type: \"button\"\n            }).html(opts.localeStrings.selectNone).bind(\"click\", function() {\n              return valueList.find(\"input:visible\").prop(\"checked\", false);\n            }));\n            btns.append($(\"<br>\"));\n            btns.append($(\"<input>\", {\n              type: \"text\",\n              placeholder: opts.localeStrings.filterResults,\n              \"class\": \"pvtSearch\"\n            }).bind(\"keyup\", function() {\n              var filter;\n              filter = $(this).val().toLowerCase();\n              return valueList.find('.pvtCheckContainer p').each(function() {\n                var testString;\n                testString = $(this).text().toLowerCase().indexOf(filter);\n                if (testString !== -1) {\n                  return $(this).show();\n                } else {\n                  return $(this).hide();\n                }\n              });\n            }));\n            checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList);\n            ref2 = keys.sort(getSort(opts.sorters, c));\n            for (o = 0, len3 = ref2.length; o < len3; o++) {\n              k = ref2[o];\n              v = axisValues[c][k];\n              filterItem = $(\"<label>\");\n              filterItemExcluded = false;\n              if (opts.inclusions[c]) {\n                filterItemExcluded = (indexOf.call(opts.inclusions[c], k) < 0);\n              } else if (opts.exclusions[c]) {\n                filterItemExcluded = (indexOf.call(opts.exclusions[c], k) >= 0);\n              }\n              hasExcludedItem || (hasExcludedItem = filterItemExcluded);\n              $(\"<input>\").attr(\"type\", \"checkbox\").addClass('pvtFilter').attr(\"checked\", !filterItemExcluded).data(\"filter\", [c, k]).appendTo(filterItem);\n              filterItem.append($(\"<span>\").text(k));\n              filterItem.append($(\"<span>\").text(\" (\" + v + \")\"));\n              checkContainer.append($(\"<p>\").append(filterItem));\n            }\n          }\n          updateFilter = function() {\n            var unselectedCount;\n            unselectedCount = valueList.find(\"[type='checkbox']\").length - valueList.find(\"[type='checkbox']:checked\").length;\n            if (unselectedCount > 0) {\n              attrElem.addClass(\"pvtFilteredAttribute\");\n            } else {\n              attrElem.removeClass(\"pvtFilteredAttribute\");\n            }\n            if (keys.length > opts.menuLimit) {\n              return valueList.toggle();\n            } else {\n              return valueList.toggle(0, refresh);\n            }\n          };\n          $(\"<p>\").appendTo(valueList).append($(\"<button>\", {\n            type: \"button\"\n          }).text(\"OK\").bind(\"click\", updateFilter));\n          showFilterList = function(e) {\n            var clickLeft, clickTop, ref3;\n            ref3 = $(e.currentTarget).position(), clickLeft = ref3.left, clickTop = ref3.top;\n            valueList.css({\n              left: clickLeft + 10,\n              top: clickTop + 10\n            }).toggle();\n            valueList.find('.pvtSearch').val('');\n            return valueList.find('.pvtCheckContainer p').show();\n          };\n          triangleLink = $(\"<span>\").addClass('pvtTriangle').html(\" ▾\").bind(\"click\", showFilterList);\n          attrElem = $(\"<li>\").addClass(\"axis_\" + i).append($(\"<span>\").addClass('pvtAttr').text(c).data(\"attrName\", c).append(triangleLink));\n          if (hasExcludedItem) {\n            attrElem.addClass('pvtFilteredAttribute');\n          }\n          colList.append(attrElem).append(valueList);\n          return attrElem.bind(\"dblclick\", showFilterList);\n        };\n        for (i in shownAttributes) {\n          if (!hasProp.call(shownAttributes, i)) continue;\n          c = shownAttributes[i];\n          fn(c);\n        }\n        tr1 = $(\"<tr>\").appendTo(uiTable);\n        aggregator = $(\"<select>\").addClass('pvtAggregator').bind(\"change\", function() {\n          return refresh();\n        });\n        ref2 = opts.aggregators;\n        for (x in ref2) {\n          if (!hasProp.call(ref2, x)) continue;\n          aggregator.append($(\"<option>\").val(x).html(x));\n        }\n        $(\"<td>\").addClass('pvtVals').appendTo(tr1).append(aggregator).append($(\"<br>\"));\n        $(\"<td>\").addClass('pvtAxisContainer pvtHorizList pvtCols').appendTo(tr1);\n        tr2 = $(\"<tr>\").appendTo(uiTable);\n        tr2.append($(\"<td>\").addClass('pvtAxisContainer pvtRows').attr(\"valign\", \"top\"));\n        pivotTable = $(\"<td>\").attr(\"valign\", \"top\").addClass('pvtRendererArea').appendTo(tr2);\n        if (opts.unusedAttrsVertical === true || unusedAttrsVerticalAutoOverride) {\n          uiTable.find('tr:nth-child(1)').prepend(rendererControl);\n          uiTable.find('tr:nth-child(2)').prepend(colList);\n        } else {\n          uiTable.prepend($(\"<tr>\").append(rendererControl).append(colList));\n        }\n        this.html(uiTable);\n        ref3 = opts.cols;\n        for (o = 0, len3 = ref3.length; o < len3; o++) {\n          x = ref3[o];\n          this.find(\".pvtCols\").append(this.find(\".axis_\" + ($.inArray(x, shownAttributes))));\n        }\n        ref4 = opts.rows;\n        for (q = 0, len4 = ref4.length; q < len4; q++) {\n          x = ref4[q];\n          this.find(\".pvtRows\").append(this.find(\".axis_\" + ($.inArray(x, shownAttributes))));\n        }\n        if (opts.aggregatorName != null) {\n          this.find(\".pvtAggregator\").val(opts.aggregatorName);\n        }\n        if (opts.rendererName != null) {\n          this.find(\".pvtRenderer\").val(opts.rendererName);\n        }\n        initialRender = true;\n        refreshDelayed = (function(_this) {\n          return function() {\n            var attr, exclusions, inclusions, len5, newDropdown, numInputsToProcess, pivotUIOptions, pvtVals, ref5, ref6, s, subopts, t, unusedAttrsContainer, vals;\n            subopts = {\n              derivedAttributes: opts.derivedAttributes,\n              localeStrings: opts.localeStrings,\n              rendererOptions: opts.rendererOptions,\n              sorters: opts.sorters,\n              dataClass: opts.dataClass,\n              cols: [],\n              rows: []\n            };\n            numInputsToProcess = (ref5 = opts.aggregators[aggregator.val()]([])().numInputs) != null ? ref5 : 0;\n            vals = [];\n            _this.find(\".pvtRows li span.pvtAttr\").each(function() {\n              return subopts.rows.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtCols li span.pvtAttr\").each(function() {\n              return subopts.cols.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n              if (numInputsToProcess === 0) {\n                return $(this).remove();\n              } else {\n                numInputsToProcess--;\n                if ($(this).val() !== \"\") {\n                  return vals.push($(this).val());\n                }\n              }\n            });\n            if (numInputsToProcess !== 0) {\n              pvtVals = _this.find(\".pvtVals\");\n              for (x = s = 0, ref6 = numInputsToProcess; 0 <= ref6 ? s < ref6 : s > ref6; x = 0 <= ref6 ? ++s : --s) {\n                newDropdown = $(\"<select>\").addClass('pvtAttrDropdown').append($(\"<option>\")).bind(\"change\", function() {\n                  return refresh();\n                });\n                for (t = 0, len5 = shownAttributes.length; t < len5; t++) {\n                  attr = shownAttributes[t];\n                  newDropdown.append($(\"<option>\").val(attr).text(attr));\n                }\n                pvtVals.append(newDropdown);\n              }\n            }\n            if (initialRender) {\n              vals = opts.vals;\n              i = 0;\n              _this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n                $(this).val(vals[i]);\n                return i++;\n              });\n              initialRender = false;\n            }\n            subopts.aggregatorName = aggregator.val();\n            subopts.vals = vals;\n            subopts.aggregator = opts.aggregators[aggregator.val()](vals);\n            subopts.renderer = opts.renderers[renderer.val()];\n            exclusions = {};\n            _this.find('input.pvtFilter').not(':checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                return exclusions[filter[0]].push(filter[1]);\n              } else {\n                return exclusions[filter[0]] = [filter[1]];\n              }\n            });\n            inclusions = {};\n            _this.find('input.pvtFilter:checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                if (inclusions[filter[0]] != null) {\n                  return inclusions[filter[0]].push(filter[1]);\n                } else {\n                  return inclusions[filter[0]] = [filter[1]];\n                }\n              }\n            });\n            subopts.filter = function(record) {\n              var excludedItems, ref7;\n              if (!opts.filter(record)) {\n                return false;\n              }\n              for (k in exclusions) {\n                excludedItems = exclusions[k];\n                if (ref7 = \"\" + record[k], indexOf.call(excludedItems, ref7) >= 0) {\n                  return false;\n                }\n              }\n              return true;\n            };\n            pivotTable.pivot(input, subopts);\n            pivotUIOptions = $.extend(opts, {\n              cols: subopts.cols,\n              rows: subopts.rows,\n              vals: vals,\n              exclusions: exclusions,\n              inclusions: inclusions,\n              inclusionsInfo: inclusions,\n              aggregatorName: aggregator.val(),\n              rendererName: renderer.val()\n            });\n            _this.data(\"pivotUIOptions\", pivotUIOptions);\n            if (opts.autoSortUnusedAttrs) {\n              unusedAttrsContainer = _this.find(\"td.pvtUnused.pvtAxisContainer\");\n              $(unusedAttrsContainer).children(\"li\").sort(function(a, b) {\n                return naturalSort($(a).text(), $(b).text());\n              }).appendTo(unusedAttrsContainer);\n            }\n            pivotTable.css(\"opacity\", 1);\n            if (opts.onRefresh != null) {\n              return opts.onRefresh(pivotUIOptions);\n            }\n          };\n        })(this);\n        refresh = (function(_this) {\n          return function() {\n            pivotTable.css(\"opacity\", 0.5);\n            return setTimeout(refreshDelayed, 10);\n          };\n        })(this);\n        refresh();\n        this.find(\".pvtAxisContainer\").sortable({\n          update: function(e, ui) {\n            if (ui.sender == null) {\n              return refresh();\n            }\n          },\n          connectWith: this.find(\".pvtAxisContainer\"),\n          items: 'li',\n          placeholder: 'pvtPlaceholder'\n        });\n      } catch (error) {\n        e = error;\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        this.html(opts.localeStrings.uiRenderError);\n      }\n      return this;\n    };\n\n    /*\n    Heatmap post-processing\n     */\n    $.fn.heatmap = function(scope, opts) {\n      var colorScaleGenerator, heatmapper, i, j, l, n, numCols, numRows, ref, ref1, ref2;\n      if (scope == null) {\n        scope = \"heatmap\";\n      }\n      numRows = this.data(\"numrows\");\n      numCols = this.data(\"numcols\");\n      colorScaleGenerator = opts != null ? (ref = opts.heatmap) != null ? ref.colorScaleGenerator : void 0 : void 0;\n      if (colorScaleGenerator == null) {\n        colorScaleGenerator = function(values) {\n          var max, min;\n          min = Math.min.apply(Math, values);\n          max = Math.max.apply(Math, values);\n          return function(x) {\n            var nonRed;\n            nonRed = 255 - Math.round(255 * (x - min) / (max - min));\n            return \"rgb(255,\" + nonRed + \",\" + nonRed + \")\";\n          };\n        };\n      }\n      heatmapper = (function(_this) {\n        return function(scope) {\n          var colorScale, forEachCell, values;\n          forEachCell = function(f) {\n            return _this.find(scope).each(function() {\n              var x;\n              x = $(this).data(\"value\");\n              if ((x != null) && isFinite(x)) {\n                return f(x, $(this));\n              }\n            });\n          };\n          values = [];\n          forEachCell(function(x) {\n            return values.push(x);\n          });\n          colorScale = colorScaleGenerator(values);\n          return forEachCell(function(x, elem) {\n            return elem.css(\"background-color\", colorScale(x));\n          });\n        };\n      })(this);\n      switch (scope) {\n        case \"heatmap\":\n          heatmapper(\".pvtVal\");\n          break;\n        case \"rowheatmap\":\n          for (i = l = 0, ref1 = numRows; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {\n            heatmapper(\".pvtVal.row\" + i);\n          }\n          break;\n        case \"colheatmap\":\n          for (j = n = 0, ref2 = numCols; 0 <= ref2 ? n < ref2 : n > ref2; j = 0 <= ref2 ? ++n : --n) {\n            heatmapper(\".pvtVal.col\" + j);\n          }\n      }\n      heatmapper(\".pvtTotal.rowTotal\");\n      heatmapper(\".pvtTotal.colTotal\");\n      return this;\n    };\n\n    /*\n    Barchart post-processing\n     */\n    return $.fn.barchart = function() {\n      var barcharter, i, l, numCols, numRows, ref;\n      numRows = this.data(\"numrows\");\n      numCols = this.data(\"numcols\");\n      barcharter = (function(_this) {\n        return function(scope) {\n          var forEachCell, max, scaler, values;\n          forEachCell = function(f) {\n            return _this.find(scope).each(function() {\n              var x;\n              x = $(this).data(\"value\");\n              if ((x != null) && isFinite(x)) {\n                return f(x, $(this));\n              }\n            });\n          };\n          values = [];\n          forEachCell(function(x) {\n            return values.push(x);\n          });\n          max = Math.max.apply(Math, values);\n          scaler = function(x) {\n            return 100 * x / (1.4 * max);\n          };\n          return forEachCell(function(x, elem) {\n            var text, wrapper;\n            text = elem.text();\n            wrapper = $(\"<div>\").css({\n              \"position\": \"relative\",\n              \"height\": \"55px\"\n            });\n            wrapper.append($(\"<div>\").css({\n              \"position\": \"absolute\",\n              \"bottom\": 0,\n              \"left\": 0,\n              \"right\": 0,\n              \"height\": scaler(x) + \"%\",\n              \"background-color\": \"gray\"\n            }));\n            wrapper.append($(\"<div>\").text(text).css({\n              \"position\": \"relative\",\n              \"padding-left\": \"5px\",\n              \"padding-right\": \"5px\"\n            }));\n            return elem.css({\n              \"padding\": 0,\n              \"padding-top\": \"5px\",\n              \"text-align\": \"center\"\n            }).html(wrapper);\n          });\n        };\n      })(this);\n      for (i = l = 0, ref = numRows; 0 <= ref ? l < ref : l > ref; i = 0 <= ref ? ++l : --l) {\n        barcharter(\".pvtVal.row\" + i);\n      }\n      barcharter(\".pvtTotal.colTotal\");\n      return this;\n    };\n  });\n\n}).call(this);\n\n//# sourceMappingURL=pivot.js.map\n"],"sourceRoot":"/source/"}