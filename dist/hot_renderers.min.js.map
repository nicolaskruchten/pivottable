{"version":3,"sources":["hot_renderers.coffee","hot_renderers.min.js"],"names":["callWithJQuery","hasProp1","hasOwnProperty","bind","fn","me","apply","arguments","pivotModule","exports","module","require","define","amd","jQuery","$","ScrollEvent","colEnd","colLimit","colStart","colTotalFlag","elementAppend","getExtendedOpts","grandTotalFlag","hasProp","isOverlap","keydownendEvent","makeClickHandler","pivotTableRenderer","rowEnd","rowLimit","rowStart","rowTotalFlag","scrollColrender","scrollDown","scrollRowrender","arr","i","j","pivotData","opts","colAttrs","createPivotChild","result","rowKeys","scrollPositionX","scrollWidth","tbodyChildNodes","theadChildNodes","this","scrollLeft","offsetWidth","getRowKeys","document","getElementsByClassName","item","getElementsByTagName","childNodes","forEach","node","colAttr","results","call","parseInt","push","k","ref","length","type","heatmap","rowKey","scrollHeight","scrollPositionY","tbody","tr","height","window","scrollTop","slice","createElement","appendChild","e","code","ecode","removeRenderEvent","addRenderEvent","rowrender","colrender","keydownend","event","getKeydownendEvent","getRowrenderEvent","getColRenderEvent","_this","prototype","addEventListener","getElementById","removeEventListener","getRowRenderEvent","colKeys","getClickHandler","rowAttrs","getColKeys","element","target","thead-th","colKey","th","x","className","textContent","setAttribute","table","rowTotals","innerHTML","localeStrings","totals","thead-th-total","r","tbody-th","txt","tbody-td","aggregator","td","val","getAggregator","value","format","onclick","row-total-td","totalAggregator","col-total-th","colTotals","col-total-td","ref1","grand-total-td","clickCallback","rowValues","colValues","attr","filters","defaults","extend","c","scrollevent","thead","getRowLimit","getColLimit","pivotUtilities","hot_renderes","renderer","Table","data","extendedOpts","Heatmap","removeScrollevent"],"mappings":"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","file":"hot_renderers.min.js","sourcesContent":["callWithJQuery = (pivotModule) ->\n    if typeof exports is \"object\" and typeof module is \"object\" # CommonJS\n        pivotModule require(\"jquery\")\n    else if typeof define is \"function\" and define.amd # AMD\n        define [\"jquery\"], pivotModule\n    # Plain browser env\n    else\n        pivotModule jQuery\n\ncallWithJQuery ($) ->\n    hasProp = {}.hasOwnProperty\n    colLimit = 99\n    rowLimit = 99\n    rowStart = 0\n    colStart = 0\n    colEnd = colStart + colLimit\n    rowEnd = rowStart + rowLimit\n    scrollDown = false\n    grandTotalFlag = false\n    colTotalFlag = false\n    rowTotalFlag = false\n\n    isOverlap = (arr, i, j) ->\n        if j == 0\n            return -1\n        if arr[j][i-1] == arr[j-1][i-1] && arr[j][i] == arr[j-1][i]\n            return 1\n        return -1 \n    \n\n    scrollColrender = (pivotData, opts) ->\n        return () ->\n            scrollWidth = this.scrollWidth;\n            scrollPositionX = this.scrollLeft + this.offsetWidth\n            colAttrs = pivotData.colAttrs\n            rowKeys = pivotData.getRowKeys()\n            result = document.getElementsByClassName('pvtTable').item(0)\n            createPivotChild = elementAppend(pivotData, opts)\n\n            if !rowTotalFlag && (((scrollPositionX - scrollWidth) < 0) || (scrollPositionX - scrollWidth) == 1)\n                colStart = colEnd\n                colEnd = colStart + colLimit\n                theadChildNodes = result.getElementsByTagName('thead').item(0).childNodes\n                theadChildNodes.forEach(node, i) ->\n                    for own j, colAttr of colAttrs\n                        if parseInt(i) == parseInt(j)\n                            createPivotChild('thead-th', rowStart, rowEnd, colStart, colEnd, parseInt(j), node)\n                        \n                    \n                tbodyChildNodes = result.getElementsByTagName('tbody').item(0).childNodes\n                tbodyChildNodes.forEach(node, i) ->\n                    for j in [0..rowEnd]\n                        if parseInt(i) == parseInt(j) \n                            if i >= rowKeys.length\n                                createPivotChild('col-total-td', rowStart, rowEnd, colStart, colEnd, null, node)\n                            else \n                                createPivotChild('tbody-td', rowStart, rowEnd, colStart, colEnd, parseInt(j), node)\n                if opts.type == 'Heatmap'\n                    $(result).heatmap(\"heatmap\", opts)\n\n    scrollRowrender = (pivotData, opts) ->\n        return () ->\n            scrollHeight = $(document).height()\n            scrollPositionY = $(window).height() + $(window).scrollTop()\n            if (scrollHeight - scrollPositionY) / scrollHeight == 0\n                rowKeys = pivotData.getRowKeys()\n                result = document.getElementsByClassName('pvtTable').item(0)\n                tbody = result.getElementsByTagName('tbody').item(0)\n                createPivotChild = elementAppend(pivotData, opts)\n                if !colTotalFlag\n                    rowStart = rowEnd\n                    rowEnd = rowStart + rowLimit\n                    for own i, rowKey of rowKeys.slice(rowStart, rowEnd)\n                        tr = document.createElement(\"tr\")\n                        createPivotChild('tbody-th', rowStart, rowEnd, colStart, colEnd, parseInt(i), tr)\n                        createPivotChild('tbody-td', rowStart, rowEnd, colStart, colEnd, parseInt(i), tr)\n                        tbody.appendChild(tr)\n                    createPivotChild('col-total-th', rowStart, rowEnd, colStart, colEnd, null, tbody)\n                    if opts.type == 'Heatmap'\n                        $(result).heatmap(\"heatmap\", opts)\n\n\n    keydownendEvent = (e, pivotData, opts) ->\n        if e.code == 'PageDown'\n            scrollRowrender(pivotData, opts)\n        if e.code == 'end'\n            scrollRowrender(pivotData, opts)\n        if e.ecode == 'ArrowDown'\n            scrollRowrender(pivotData, opts)        \n\n    \n    ###\n    Scroll Event Class\n    ###\n    \n    class ScrollEvent\n        constructor: (pivotData, opts = {}) ->\n            @fn = \n                rowrender: scrollRowrender(pivotData, opts)\n                colrender: scrollColrender(pivotData, opts)\n                keydownend: (event) ->\n                    return keydownendEvent(event, pivotData, opts)\n\n            @getKeydownendEvent = () ->\n                return @fn.keydownend\n            \n            @getRowrenderEvent = () ->\n                return @fn.rowrender\n        \n            @getColRenderEvent = () =>\n                return @fn.colrender\n        addRenderEvent: () =>\n            window.addEventListener('scroll', @getRowrenderEvent())\n            window.addEventListener('keydown', @getKeydownendEvent())\n            document.getElementById('output').addEventListener('scroll', @getColRenderEvent())\n        removeRenderEvent: () =>\n            window.removeEventListener('scroll', @getRowRenderEvent())\n            window.removeEventListener('keydown', @getKeydownendEvent())\n            document.getElementById('output').removeEventListener('scroll', @getColRenderEvent())\n\n\n    elementAppend = (pivotData, opts) ->\n        colAttrs = pivotData.colAttrs\n        rowAttrs = pivotData.rowAttrs\n        rowKeys = pivotData.getRowKeys()\n        colKeys = pivotData.getColKeys()\n        getClickHandler = makeClickHandler(opts)\n        return (element, rowStart, rowEnd, colStart, colEnd, i, target) ->\n            fn = \n                'thead-th': () ->\n                    for own j, colKey  of colKeys.slice(colStart, colEnd)\n                        x = isOverlap(colKeys, parseInt(i), parseInt(j))\n                        th = document.createElement(\"th\")\n                        th.className = \"pvtColLabel\"\n                        if x == -1\n                            th.textContent = colKey[i]\n                            th.setAttribute('style', 'border-right:none;')\n                        else\n                            th.setAttribute('style', 'border-left:none;border-right:none;')\n                        \n                        if (parseInt(i) == colAttrs.length-1 && rowAttrs.length != 0)\n                            th.setAttribute(\"rowspan\", 2)\n                        target.appendChild th\n\n                        if (parseInt(j) == colKeys.length-1 && !rowTotalFlag)\n                            if parseInt(i) == 0 && opts.table.rowTotals\n                                th = document.createElement(\"th\")\n                                th.className = \"pvtTotalLabel pvtRowTotalLabel\"\n                                th.innerHTML = opts.localeStrings.totals\n                                th.setAttribute(\"rowspan\", colAttrs.length + (if rowAttrs.length == 0 then 0 else 1))\n                                target.appendChild th\n                    return target\n                'thead-th-total': () ->\n                    # pvtAxisLabel\n                    if rowAttrs.length != 0\n                        tr = document.createElement(\"tr\")\n                        for own i, r of rowAttrs\n                            # r = rowAttrs[i]\n                            th = document.createElement(\"th\")\n                            th.className = \"pvtAxisLabel\"\n                            th.textContent = r\n                            tr.appendChild th\n                        th = document.createElement(\"th\")\n                        if colAttrs.length == 0\n                            # th.setAttribute(\"rowspan\", 2)\n                            th.className = \"pvtTotalLabel pvtRowTotalLabel\"\n                            th.innerHTML = opts.localeStrings.totals\n                        tr.appendChild th\n                        target.appendChild tr\n                    return target\n                'tbody-th':  () ->\n                    rowKey = rowKeys[i]\n                    # tbody tr th\n                    for own j, txt of rowKey\n                        th = document.createElement(\"th\")\n                        th.className = \"pvtRowLabel\"\n                        x = isOverlap(rowKeys, parseInt(j), parseInt(i))\n                        if x == -1\n                            th.textContent = txt\n                            th.setAttribute('style', 'border-bottom:none;')\n                        else\n                            th.setAttribute('style', 'border-bottom:none;border-top:none;')\n                        if parseInt(j) == rowAttrs.length-1 && colAttrs.length != 0\n                            th.setAttribute(\"colspan\", 2)\n                        target.appendChild th\n                    return target\n                'tbody-td': () -> \n                    # tbody tr td\n                    rowKey = rowKeys[i]\n                    for own j, colKey  of colKeys.slice(colStart, colEnd)\n                        colKey = colKeys[j]\n                        aggregator = pivotData.getAggregator(rowKey, colKey)\n                        val = aggregator.value()\n                        td = document.createElement(\"td\")\n                        td.className = \"pvtVal row\" + i + \" col\" + j\n                        td.textContent = aggregator.format(val)\n                        td.setAttribute(\"data-value\", val)\n                        if getClickHandler?\n                            td.onclick = getClickHandler(val, rowKey, colKey)\n                        target.appendChild td\n                    this['row-total-td']()\n                    return target\n                'row-total-td': () ->\n                    # col Total\n                    rowKey = rowKeys[i]\n                    if colEnd >= colKeys.length\n                        if (opts.table.rowTotals || colAttrs.length == 0)\n                            rowTotalFlag = true\n                            totalAggregator = pivotData.getAggregator(rowKey, [])\n                            val = totalAggregator.value()\n                            td = document.createElement(\"td\")\n                            td.className = \"pvtTotal rowTotal\"\n                            td.textContent = totalAggregator.format(val)\n                            td.setAttribute(\"data-value\", val)\n                            if getClickHandler?\n                                td.onclick = getClickHandler(val, rowKey, [])\n                            td.setAttribute(\"data-for\", \"row\" + i)\n                            target.appendChild td\n                    return target\n                'col-total-th': (tr) ->\n                    tr = tr || document.createElement(\"tr\")\n                    if rowEnd > rowKeys.length && !colTotalFlag\n                        if opts.table.colTotals || rowAttrs.length == 0\n                            colTotalFlag = true\n                            th = document.createElement(\"th\")\n                            th.className = \"pvtTotalLabel pvtColTotalLabel\"\n                            th.innerHTML = opts.localeStrings.totals\n                            th.setAttribute(\"colspan\", rowAttrs.length + (if colAttrs.length == 0 then 0 else 1))\n                            tr.appendChild th\n                            this['col-total-td'](tr)\n                            target.appendChild tr\n                    return target\n                'col-total-td': (tr) ->\n                    tr = tr || target\n                    if colAttrs.length == 0 \n                        this['grand-total-td'](tr)\n                    for j in [colStart..colEnd]\n                        if hasProp.call(colKeys, j)\n                            colKey = colKeys[j]\n                            totalAggregator = pivotData.getAggregator([], colKey)\n                            val = totalAggregator.value()\n                            td = document.createElement(\"td\")\n                            td.className = \"pvtTotal colTotal\"\n                            td.textContent = totalAggregator.format(val)\n                            td.setAttribute(\"data-value\", val)\n                            if getClickHandler?\n                                td.onclick = getClickHandler(val, [], colKey)\n                            td.setAttribute(\"data-for\", \"col\" + j)\n                            tr.appendChild td\n                            if colKeys.length - 1 == j\n                                this['grand-total-td'](tr)\n                    return tr\n                'grand-total-td': (tr) ->\n                    if ((opts.table.rowTotals || colAttrs.length == 0) || !grandTotalFlag)\n                        grandTotalFlag = true\n                        totalAggregator = pivotData.getAggregator([], [])\n                        val = totalAggregator.value()\n                        td = document.createElement(\"td\")\n                        td.className = \"pvtGrandTotal\"\n                        td.textContent = totalAggregator.format(val)\n                        td.setAttribute(\"data-value\", val)\n                        if getClickHandler?\n                            td.onclick = getClickHandler(val, [], [])\n                        tr.appendChild td\n                    return tr\n            return fn[element]()\n\n\n    makeClickHandler = (opts) ->\n        if opts.table.clickCallback\n            getClickHandler = (value, rowValues, colValues) ->\n                filters = {}\n                for own i, attr of colAttrs\n                    if colValues[i]?\n                        filters[attr] = colValues[i]\n                for own j , attr of rowAttrs\n                    if rowValues[j]?\n                        filters[attr] = rowValues[j]\n                return (e) ->\n                    return opts.table.clickCallback(e, value, filters, pivotData)\n        return getClickHandler\n\n    getExtendedOpts = (opts, type) ->\n        defaults =\n            table:\n                clickCallback: null\n                rowTotals: true\n                colTotals: true\n            localeStrings: \n                totals: \"Totals\"\n            type: type\n        return $.extend(true, {}, defaults, opts)\n\n\n    pivotTableRenderer = (pivotData, opts) ->\n        colAttrs = pivotData.colAttrs\n        rowAttrs = pivotData.rowAttrs    \n        rowKeys = pivotData.getRowKeys()\n        colKeys = pivotData.getColKeys()\n        rowLimit = if pivotData.getRowLimit() > 0 then pivotData.getRowLimit() else rowKeys.length\n        colLimit = if pivotData.getColLimit() > 0 then pivotData.getColLimit() else colKeys.length\n        rowStart = 0\n        colStart = 0\n        colEnd = colStart + colLimit\n        rowEnd = rowStart + rowLimit\n        grandTotalFlag = false\n        colTotalFlag = false\n        rowTotalFlag = false\n        result = document.createElement(\"table\")\n        result.className = \"pvtTable\"\n        result.setAttribute(\"data-numrows\", colEnd)\n        result.setAttribute(\"data-numcols\", rowEnd)\n        createPivotChild = elementAppend(pivotData, opts)\n        scrollevent = new ScrollEvent(pivotData, opts)\n        scrollevent.addRenderEvent()\n\n        # thead\n        thead = document.createElement(\"thead\")\n        for own j, c of colAttrs\n            tr = document.createElement(\"tr\")\n            if (parseInt(j) == 0 && rowAttrs.length != 0)\n                th = document.createElement(\"th\")\n                th.setAttribute(\"colspan\", rowAttrs.length)\n                th.setAttribute(\"rowspan\", colAttrs.length)\n                tr.appendChild(th)\n            th = document.createElement(\"th\")\n            th.className = \"pvtAxisLabel\"\n            th.textContent = c\n            tr.appendChild th\n            createPivotChild('thead-th', rowStart, rowEnd, colStart, colEnd, parseInt(j), tr)\n            thead.appendChild tr\n\n        createPivotChild('thead-th-total', rowStart, rowEnd, colStart, colEnd, null, thead)\n        result.appendChild thead\n\n        # tbody\n        tbody = document.createElement(\"tbody\")\n        for own i, rowKey of rowKeys.slice(rowStart, rowEnd)\n            tr = document.createElement(\"tr\")\n            createPivotChild('tbody-th', rowStart, rowEnd, colStart, colEnd, parseInt(i), tr)\n            createPivotChild('tbody-td', rowStart, rowEnd, colStart, colEnd, parseInt(i), tr)\n            tbody.appendChild tr\n        createPivotChild('col-total-th', rowStart, rowEnd, colStart, colEnd, null, tbody)\n        result.appendChild tbody\n\n        return result\n\n    $.pivotUtilities.hot_renderes =\n        renderer:\n            'Table': (data, opts) ->\n                extendedOpts = getExtendedOpts(opts, 'Table')\n                return pivotTableRenderer(data, extendedOpts)\n            'Heatmap': (data, opts) ->\n                extendedOpts = getExtendedOpts(opts, 'Heatmap')\n                return $(pivotTableRenderer(data, extendedOpts)).heatmap(\"heatmap\", extendedOpts)\n        removeScrollevent: () ->\n            if scrollevent\n                return scrollevent.removeRenderEvent()\n","(function() {\n  var callWithJQuery,\n    hasProp1 = {}.hasOwnProperty,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\n  callWithJQuery = function(pivotModule) {\n    if (typeof exports === \"object\" && typeof module === \"object\") {\n      return pivotModule(require(\"jquery\"));\n    } else if (typeof define === \"function\" && define.amd) {\n      return define([\"jquery\"], pivotModule);\n    } else {\n      return pivotModule(jQuery);\n    }\n  };\n\n  callWithJQuery(function($) {\n    var ScrollEvent, colEnd, colLimit, colStart, colTotalFlag, elementAppend, getExtendedOpts, grandTotalFlag, hasProp, isOverlap, keydownendEvent, makeClickHandler, pivotTableRenderer, rowEnd, rowLimit, rowStart, rowTotalFlag, scrollColrender, scrollDown, scrollRowrender;\n    hasProp = {}.hasOwnProperty;\n    colLimit = 99;\n    rowLimit = 99;\n    rowStart = 0;\n    colStart = 0;\n    colEnd = colStart + colLimit;\n    rowEnd = rowStart + rowLimit;\n    scrollDown = false;\n    grandTotalFlag = false;\n    colTotalFlag = false;\n    rowTotalFlag = false;\n    isOverlap = function(arr, i, j) {\n      if (j === 0) {\n        return -1;\n      }\n      if (arr[j][i - 1] === arr[j - 1][i - 1] && arr[j][i] === arr[j - 1][i]) {\n        return 1;\n      }\n      return -1;\n    };\n    scrollColrender = function(pivotData, opts) {\n      return function() {\n        var colAttrs, createPivotChild, result, rowKeys, scrollPositionX, scrollWidth, tbodyChildNodes, theadChildNodes;\n        scrollWidth = this.scrollWidth;\n        scrollPositionX = this.scrollLeft + this.offsetWidth;\n        colAttrs = pivotData.colAttrs;\n        rowKeys = pivotData.getRowKeys();\n        result = document.getElementsByClassName('pvtTable').item(0);\n        createPivotChild = elementAppend(pivotData, opts);\n        if (!rowTotalFlag && (((scrollPositionX - scrollWidth) < 0) || (scrollPositionX - scrollWidth) === 1)) {\n          colStart = colEnd;\n          colEnd = colStart + colLimit;\n          theadChildNodes = result.getElementsByTagName('thead').item(0).childNodes;\n          theadChildNodes.forEach(node, i)(function() {\n            var colAttr, j, results;\n            results = [];\n            for (j in colAttrs) {\n              if (!hasProp1.call(colAttrs, j)) continue;\n              colAttr = colAttrs[j];\n              if (parseInt(i) === parseInt(j)) {\n                results.push(createPivotChild('thead-th', rowStart, rowEnd, colStart, colEnd, parseInt(j), node));\n              } else {\n                results.push(void 0);\n              }\n            }\n            return results;\n          });\n          tbodyChildNodes = result.getElementsByTagName('tbody').item(0).childNodes;\n          tbodyChildNodes.forEach(node, i)(function() {\n            var j, k, ref, results;\n            results = [];\n            for (j = k = 0, ref = rowEnd; 0 <= ref ? k <= ref : k >= ref; j = 0 <= ref ? ++k : --k) {\n              if (parseInt(i) === parseInt(j)) {\n                if (i >= rowKeys.length) {\n                  results.push(createPivotChild('col-total-td', rowStart, rowEnd, colStart, colEnd, null, node));\n                } else {\n                  results.push(createPivotChild('tbody-td', rowStart, rowEnd, colStart, colEnd, parseInt(j), node));\n                }\n              } else {\n                results.push(void 0);\n              }\n            }\n            return results;\n          });\n          if (opts.type === 'Heatmap') {\n            return $(result).heatmap(\"heatmap\", opts);\n          }\n        }\n      };\n    };\n    scrollRowrender = function(pivotData, opts) {\n      return function() {\n        var createPivotChild, i, ref, result, rowKey, rowKeys, scrollHeight, scrollPositionY, tbody, tr;\n        scrollHeight = $(document).height();\n        scrollPositionY = $(window).height() + $(window).scrollTop();\n        if ((scrollHeight - scrollPositionY) / scrollHeight === 0) {\n          rowKeys = pivotData.getRowKeys();\n          result = document.getElementsByClassName('pvtTable').item(0);\n          tbody = result.getElementsByTagName('tbody').item(0);\n          createPivotChild = elementAppend(pivotData, opts);\n          if (!colTotalFlag) {\n            rowStart = rowEnd;\n            rowEnd = rowStart + rowLimit;\n            ref = rowKeys.slice(rowStart, rowEnd);\n            for (i in ref) {\n              if (!hasProp1.call(ref, i)) continue;\n              rowKey = ref[i];\n              tr = document.createElement(\"tr\");\n              createPivotChild('tbody-th', rowStart, rowEnd, colStart, colEnd, parseInt(i), tr);\n              createPivotChild('tbody-td', rowStart, rowEnd, colStart, colEnd, parseInt(i), tr);\n              tbody.appendChild(tr);\n            }\n            createPivotChild('col-total-th', rowStart, rowEnd, colStart, colEnd, null, tbody);\n            if (opts.type === 'Heatmap') {\n              return $(result).heatmap(\"heatmap\", opts);\n            }\n          }\n        }\n      };\n    };\n    keydownendEvent = function(e, pivotData, opts) {\n      if (e.code === 'PageDown') {\n        scrollRowrender(pivotData, opts);\n      }\n      if (e.code === 'end') {\n        scrollRowrender(pivotData, opts);\n      }\n      if (e.ecode === 'ArrowDown') {\n        return scrollRowrender(pivotData, opts);\n      }\n    };\n\n    /*\n    Scroll Event Class\n     */\n    ScrollEvent = (function() {\n      function ScrollEvent(pivotData, opts) {\n        if (opts == null) {\n          opts = {};\n        }\n        this.removeRenderEvent = bind(this.removeRenderEvent, this);\n        this.addRenderEvent = bind(this.addRenderEvent, this);\n        this.fn = {\n          rowrender: scrollRowrender(pivotData, opts),\n          colrender: scrollColrender(pivotData, opts),\n          keydownend: function(event) {\n            return keydownendEvent(event, pivotData, opts);\n          }\n        };\n        this.getKeydownendEvent = function() {\n          return this.fn.keydownend;\n        };\n        this.getRowrenderEvent = function() {\n          return this.fn.rowrender;\n        };\n        this.getColRenderEvent = (function(_this) {\n          return function() {\n            return _this.fn.colrender;\n          };\n        })(this);\n      }\n\n      ScrollEvent.prototype.addRenderEvent = function() {\n        window.addEventListener('scroll', this.getRowrenderEvent());\n        window.addEventListener('keydown', this.getKeydownendEvent());\n        return document.getElementById('output').addEventListener('scroll', this.getColRenderEvent());\n      };\n\n      ScrollEvent.prototype.removeRenderEvent = function() {\n        window.removeEventListener('scroll', this.getRowRenderEvent());\n        window.removeEventListener('keydown', this.getKeydownendEvent());\n        return document.getElementById('output').removeEventListener('scroll', this.getColRenderEvent());\n      };\n\n      return ScrollEvent;\n\n    })();\n    elementAppend = function(pivotData, opts) {\n      var colAttrs, colKeys, getClickHandler, rowAttrs, rowKeys;\n      colAttrs = pivotData.colAttrs;\n      rowAttrs = pivotData.rowAttrs;\n      rowKeys = pivotData.getRowKeys();\n      colKeys = pivotData.getColKeys();\n      getClickHandler = makeClickHandler(opts);\n      return function(element, rowStart, rowEnd, colStart, colEnd, i, target) {\n        var fn;\n        fn = {\n          'thead-th': function() {\n            var colKey, j, ref, th, x;\n            ref = colKeys.slice(colStart, colEnd);\n            for (j in ref) {\n              if (!hasProp1.call(ref, j)) continue;\n              colKey = ref[j];\n              x = isOverlap(colKeys, parseInt(i), parseInt(j));\n              th = document.createElement(\"th\");\n              th.className = \"pvtColLabel\";\n              if (x === -1) {\n                th.textContent = colKey[i];\n                th.setAttribute('style', 'border-right:none;');\n              } else {\n                th.setAttribute('style', 'border-left:none;border-right:none;');\n              }\n              if (parseInt(i) === colAttrs.length - 1 && rowAttrs.length !== 0) {\n                th.setAttribute(\"rowspan\", 2);\n              }\n              target.appendChild(th);\n              if (parseInt(j) === colKeys.length - 1 && !rowTotalFlag) {\n                if (parseInt(i) === 0 && opts.table.rowTotals) {\n                  th = document.createElement(\"th\");\n                  th.className = \"pvtTotalLabel pvtRowTotalLabel\";\n                  th.innerHTML = opts.localeStrings.totals;\n                  th.setAttribute(\"rowspan\", colAttrs.length + (rowAttrs.length === 0 ? 0 : 1));\n                  target.appendChild(th);\n                }\n              }\n            }\n            return target;\n          },\n          'thead-th-total': function() {\n            var r, th, tr;\n            if (rowAttrs.length !== 0) {\n              tr = document.createElement(\"tr\");\n              for (i in rowAttrs) {\n                if (!hasProp1.call(rowAttrs, i)) continue;\n                r = rowAttrs[i];\n                th = document.createElement(\"th\");\n                th.className = \"pvtAxisLabel\";\n                th.textContent = r;\n                tr.appendChild(th);\n              }\n              th = document.createElement(\"th\");\n              if (colAttrs.length === 0) {\n                th.className = \"pvtTotalLabel pvtRowTotalLabel\";\n                th.innerHTML = opts.localeStrings.totals;\n              }\n              tr.appendChild(th);\n              target.appendChild(tr);\n            }\n            return target;\n          },\n          'tbody-th': function() {\n            var j, rowKey, th, txt, x;\n            rowKey = rowKeys[i];\n            for (j in rowKey) {\n              if (!hasProp1.call(rowKey, j)) continue;\n              txt = rowKey[j];\n              th = document.createElement(\"th\");\n              th.className = \"pvtRowLabel\";\n              x = isOverlap(rowKeys, parseInt(j), parseInt(i));\n              if (x === -1) {\n                th.textContent = txt;\n                th.setAttribute('style', 'border-bottom:none;');\n              } else {\n                th.setAttribute('style', 'border-bottom:none;border-top:none;');\n              }\n              if (parseInt(j) === rowAttrs.length - 1 && colAttrs.length !== 0) {\n                th.setAttribute(\"colspan\", 2);\n              }\n              target.appendChild(th);\n            }\n            return target;\n          },\n          'tbody-td': function() {\n            var aggregator, colKey, j, ref, rowKey, td, val;\n            rowKey = rowKeys[i];\n            ref = colKeys.slice(colStart, colEnd);\n            for (j in ref) {\n              if (!hasProp1.call(ref, j)) continue;\n              colKey = ref[j];\n              colKey = colKeys[j];\n              aggregator = pivotData.getAggregator(rowKey, colKey);\n              val = aggregator.value();\n              td = document.createElement(\"td\");\n              td.className = \"pvtVal row\" + i + \" col\" + j;\n              td.textContent = aggregator.format(val);\n              td.setAttribute(\"data-value\", val);\n              if (getClickHandler != null) {\n                td.onclick = getClickHandler(val, rowKey, colKey);\n              }\n              target.appendChild(td);\n            }\n            this['row-total-td']();\n            return target;\n          },\n          'row-total-td': function() {\n            var rowKey, td, totalAggregator, val;\n            rowKey = rowKeys[i];\n            if (colEnd >= colKeys.length) {\n              if (opts.table.rowTotals || colAttrs.length === 0) {\n                rowTotalFlag = true;\n                totalAggregator = pivotData.getAggregator(rowKey, []);\n                val = totalAggregator.value();\n                td = document.createElement(\"td\");\n                td.className = \"pvtTotal rowTotal\";\n                td.textContent = totalAggregator.format(val);\n                td.setAttribute(\"data-value\", val);\n                if (getClickHandler != null) {\n                  td.onclick = getClickHandler(val, rowKey, []);\n                }\n                td.setAttribute(\"data-for\", \"row\" + i);\n                target.appendChild(td);\n              }\n            }\n            return target;\n          },\n          'col-total-th': function(tr) {\n            var th;\n            tr = tr || document.createElement(\"tr\");\n            if (rowEnd > rowKeys.length && !colTotalFlag) {\n              if (opts.table.colTotals || rowAttrs.length === 0) {\n                colTotalFlag = true;\n                th = document.createElement(\"th\");\n                th.className = \"pvtTotalLabel pvtColTotalLabel\";\n                th.innerHTML = opts.localeStrings.totals;\n                th.setAttribute(\"colspan\", rowAttrs.length + (colAttrs.length === 0 ? 0 : 1));\n                tr.appendChild(th);\n                this['col-total-td'](tr);\n                target.appendChild(tr);\n              }\n            }\n            return target;\n          },\n          'col-total-td': function(tr) {\n            var colKey, j, k, ref, ref1, td, totalAggregator, val;\n            tr = tr || target;\n            if (colAttrs.length === 0) {\n              this['grand-total-td'](tr);\n            }\n            for (j = k = ref = colStart, ref1 = colEnd; ref <= ref1 ? k <= ref1 : k >= ref1; j = ref <= ref1 ? ++k : --k) {\n              if (hasProp.call(colKeys, j)) {\n                colKey = colKeys[j];\n                totalAggregator = pivotData.getAggregator([], colKey);\n                val = totalAggregator.value();\n                td = document.createElement(\"td\");\n                td.className = \"pvtTotal colTotal\";\n                td.textContent = totalAggregator.format(val);\n                td.setAttribute(\"data-value\", val);\n                if (getClickHandler != null) {\n                  td.onclick = getClickHandler(val, [], colKey);\n                }\n                td.setAttribute(\"data-for\", \"col\" + j);\n                tr.appendChild(td);\n                if (colKeys.length - 1 === j) {\n                  this['grand-total-td'](tr);\n                }\n              }\n            }\n            return tr;\n          },\n          'grand-total-td': function(tr) {\n            var td, totalAggregator, val;\n            if ((opts.table.rowTotals || colAttrs.length === 0) || !grandTotalFlag) {\n              grandTotalFlag = true;\n              totalAggregator = pivotData.getAggregator([], []);\n              val = totalAggregator.value();\n              td = document.createElement(\"td\");\n              td.className = \"pvtGrandTotal\";\n              td.textContent = totalAggregator.format(val);\n              td.setAttribute(\"data-value\", val);\n              if (getClickHandler != null) {\n                td.onclick = getClickHandler(val, [], []);\n              }\n              tr.appendChild(td);\n            }\n            return tr;\n          }\n        };\n        return fn[element]();\n      };\n    };\n    makeClickHandler = function(opts) {\n      var getClickHandler;\n      if (opts.table.clickCallback) {\n        getClickHandler = function(value, rowValues, colValues) {\n          var attr, filters, i, j;\n          filters = {};\n          for (i in colAttrs) {\n            if (!hasProp1.call(colAttrs, i)) continue;\n            attr = colAttrs[i];\n            if (colValues[i] != null) {\n              filters[attr] = colValues[i];\n            }\n          }\n          for (j in rowAttrs) {\n            if (!hasProp1.call(rowAttrs, j)) continue;\n            attr = rowAttrs[j];\n            if (rowValues[j] != null) {\n              filters[attr] = rowValues[j];\n            }\n          }\n          return function(e) {\n            return opts.table.clickCallback(e, value, filters, pivotData);\n          };\n        };\n      }\n      return getClickHandler;\n    };\n    getExtendedOpts = function(opts, type) {\n      var defaults;\n      defaults = {\n        table: {\n          clickCallback: null,\n          rowTotals: true,\n          colTotals: true\n        },\n        localeStrings: {\n          totals: \"Totals\"\n        },\n        type: type\n      };\n      return $.extend(true, {}, defaults, opts);\n    };\n    pivotTableRenderer = function(pivotData, opts) {\n      var c, colAttrs, colKeys, createPivotChild, i, j, ref, result, rowAttrs, rowKey, rowKeys, scrollevent, tbody, th, thead, tr;\n      colAttrs = pivotData.colAttrs;\n      rowAttrs = pivotData.rowAttrs;\n      rowKeys = pivotData.getRowKeys();\n      colKeys = pivotData.getColKeys();\n      rowLimit = pivotData.getRowLimit() > 0 ? pivotData.getRowLimit() : rowKeys.length;\n      colLimit = pivotData.getColLimit() > 0 ? pivotData.getColLimit() : colKeys.length;\n      rowStart = 0;\n      colStart = 0;\n      colEnd = colStart + colLimit;\n      rowEnd = rowStart + rowLimit;\n      grandTotalFlag = false;\n      colTotalFlag = false;\n      rowTotalFlag = false;\n      result = document.createElement(\"table\");\n      result.className = \"pvtTable\";\n      result.setAttribute(\"data-numrows\", colEnd);\n      result.setAttribute(\"data-numcols\", rowEnd);\n      createPivotChild = elementAppend(pivotData, opts);\n      scrollevent = new ScrollEvent(pivotData, opts);\n      scrollevent.addRenderEvent();\n      thead = document.createElement(\"thead\");\n      for (j in colAttrs) {\n        if (!hasProp1.call(colAttrs, j)) continue;\n        c = colAttrs[j];\n        tr = document.createElement(\"tr\");\n        if (parseInt(j) === 0 && rowAttrs.length !== 0) {\n          th = document.createElement(\"th\");\n          th.setAttribute(\"colspan\", rowAttrs.length);\n          th.setAttribute(\"rowspan\", colAttrs.length);\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        th.className = \"pvtAxisLabel\";\n        th.textContent = c;\n        tr.appendChild(th);\n        createPivotChild('thead-th', rowStart, rowEnd, colStart, colEnd, parseInt(j), tr);\n        thead.appendChild(tr);\n      }\n      createPivotChild('thead-th-total', rowStart, rowEnd, colStart, colEnd, null, thead);\n      result.appendChild(thead);\n      tbody = document.createElement(\"tbody\");\n      ref = rowKeys.slice(rowStart, rowEnd);\n      for (i in ref) {\n        if (!hasProp1.call(ref, i)) continue;\n        rowKey = ref[i];\n        tr = document.createElement(\"tr\");\n        createPivotChild('tbody-th', rowStart, rowEnd, colStart, colEnd, parseInt(i), tr);\n        createPivotChild('tbody-td', rowStart, rowEnd, colStart, colEnd, parseInt(i), tr);\n        tbody.appendChild(tr);\n      }\n      createPivotChild('col-total-th', rowStart, rowEnd, colStart, colEnd, null, tbody);\n      result.appendChild(tbody);\n      return result;\n    };\n    return $.pivotUtilities.hot_renderes = {\n      renderer: {\n        'Table': function(data, opts) {\n          var extendedOpts;\n          extendedOpts = getExtendedOpts(opts, 'Table');\n          return pivotTableRenderer(data, extendedOpts);\n        },\n        'Heatmap': function(data, opts) {\n          var extendedOpts;\n          extendedOpts = getExtendedOpts(opts, 'Heatmap');\n          return $(pivotTableRenderer(data, extendedOpts)).heatmap(\"heatmap\", extendedOpts);\n        }\n      },\n      removeScrollevent: function() {\n        if (scrollevent) {\n          return scrollevent.removeRenderEvent();\n        }\n      }\n    };\n  });\n\n}).call(this);\n\n//# sourceMappingURL=hot_renderers.js.map\n"]}